/****************************************************************************
** Meta object code from reading C++ file 'tst_qsensor.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qsensor.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QSensor_t {
    QByteArrayData data[40];
    char stringdata0[722];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QSensor_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QSensor_t qt_meta_stringdata_tst_QSensor = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_QSensor"
QT_MOC_LITERAL(1, 12, 12), // "initTestCase"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 42, 24), // "testRecursiveLoadPlugins"
QT_MOC_LITERAL(5, 67, 18), // "testTypeRegistered"
QT_MOC_LITERAL(6, 86, 20), // "testSensorRegistered"
QT_MOC_LITERAL(7, 107, 17), // "testSensorDefault"
QT_MOC_LITERAL(8, 125, 24), // "testBadDefaultFromConfig"
QT_MOC_LITERAL(9, 150, 25), // "testGoodDefaultFromConfig"
QT_MOC_LITERAL(10, 176, 20), // "testNoSensorsForType"
QT_MOC_LITERAL(11, 197, 20), // "testNoDefaultForType"
QT_MOC_LITERAL(12, 218, 12), // "testCreation"
QT_MOC_LITERAL(13, 231, 21), // "testSetIdentifierFail"
QT_MOC_LITERAL(14, 253, 22), // "testBadDefaultCreation"
QT_MOC_LITERAL(15, 276, 15), // "testBadCreation"
QT_MOC_LITERAL(16, 292, 13), // "testTimestamp"
QT_MOC_LITERAL(17, 306, 9), // "testStart"
QT_MOC_LITERAL(18, 316, 12), // "testBadStart"
QT_MOC_LITERAL(19, 329, 8), // "testStop"
QT_MOC_LITERAL(20, 338, 12), // "testMetaData"
QT_MOC_LITERAL(21, 351, 10), // "testFilter"
QT_MOC_LITERAL(22, 362, 11), // "testFilter2"
QT_MOC_LITERAL(23, 374, 11), // "testFilter3"
QT_MOC_LITERAL(24, 386, 10), // "testStart2"
QT_MOC_LITERAL(25, 397, 18), // "testSetBadDataRate"
QT_MOC_LITERAL(26, 416, 34), // "testSetBadDataRateWhenNotConn..."
QT_MOC_LITERAL(27, 451, 21), // "testSetBadOutputRange"
QT_MOC_LITERAL(28, 473, 37), // "testSetBadOutputRangeWhenNotC..."
QT_MOC_LITERAL(29, 511, 16), // "testEnumHandling"
QT_MOC_LITERAL(30, 528, 37), // "testDynamicDefaultsAndGeneric..."
QT_MOC_LITERAL(31, 566, 13), // "testCreation2"
QT_MOC_LITERAL(32, 580, 24), // "testSensorsChangedSignal"
QT_MOC_LITERAL(33, 605, 13), // "testSetActive"
QT_MOC_LITERAL(34, 619, 12), // "testAlwaysOn"
QT_MOC_LITERAL(35, 632, 16), // "testIsRegistered"
QT_MOC_LITERAL(36, 649, 20), // "testAllTheInterfaces"
QT_MOC_LITERAL(37, 670, 13), // "testReadingBC"
QT_MOC_LITERAL(38, 684, 15), // "testBusyChanged"
QT_MOC_LITERAL(39, 700, 21) // "testSupportedFeatures"

    },
    "tst_QSensor\0initTestCase\0\0cleanupTestCase\0"
    "testRecursiveLoadPlugins\0testTypeRegistered\0"
    "testSensorRegistered\0testSensorDefault\0"
    "testBadDefaultFromConfig\0"
    "testGoodDefaultFromConfig\0"
    "testNoSensorsForType\0testNoDefaultForType\0"
    "testCreation\0testSetIdentifierFail\0"
    "testBadDefaultCreation\0testBadCreation\0"
    "testTimestamp\0testStart\0testBadStart\0"
    "testStop\0testMetaData\0testFilter\0"
    "testFilter2\0testFilter3\0testStart2\0"
    "testSetBadDataRate\0"
    "testSetBadDataRateWhenNotConnected\0"
    "testSetBadOutputRange\0"
    "testSetBadOutputRangeWhenNotConnected\0"
    "testEnumHandling\0testDynamicDefaultsAndGenericHandling\0"
    "testCreation2\0testSensorsChangedSignal\0"
    "testSetActive\0testAlwaysOn\0testIsRegistered\0"
    "testAllTheInterfaces\0testReadingBC\0"
    "testBusyChanged\0testSupportedFeatures"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QSensor[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      38,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  204,    2, 0x08 /* Private */,
       3,    0,  205,    2, 0x08 /* Private */,
       4,    0,  206,    2, 0x08 /* Private */,
       5,    0,  207,    2, 0x08 /* Private */,
       6,    0,  208,    2, 0x08 /* Private */,
       7,    0,  209,    2, 0x08 /* Private */,
       8,    0,  210,    2, 0x08 /* Private */,
       9,    0,  211,    2, 0x08 /* Private */,
      10,    0,  212,    2, 0x08 /* Private */,
      11,    0,  213,    2, 0x08 /* Private */,
      12,    0,  214,    2, 0x08 /* Private */,
      13,    0,  215,    2, 0x08 /* Private */,
      14,    0,  216,    2, 0x08 /* Private */,
      15,    0,  217,    2, 0x08 /* Private */,
      16,    0,  218,    2, 0x08 /* Private */,
      17,    0,  219,    2, 0x08 /* Private */,
      18,    0,  220,    2, 0x08 /* Private */,
      19,    0,  221,    2, 0x08 /* Private */,
      20,    0,  222,    2, 0x08 /* Private */,
      21,    0,  223,    2, 0x08 /* Private */,
      22,    0,  224,    2, 0x08 /* Private */,
      23,    0,  225,    2, 0x08 /* Private */,
      24,    0,  226,    2, 0x08 /* Private */,
      25,    0,  227,    2, 0x08 /* Private */,
      26,    0,  228,    2, 0x08 /* Private */,
      27,    0,  229,    2, 0x08 /* Private */,
      28,    0,  230,    2, 0x08 /* Private */,
      29,    0,  231,    2, 0x08 /* Private */,
      30,    0,  232,    2, 0x08 /* Private */,
      31,    0,  233,    2, 0x08 /* Private */,
      32,    0,  234,    2, 0x08 /* Private */,
      33,    0,  235,    2, 0x08 /* Private */,
      34,    0,  236,    2, 0x08 /* Private */,
      35,    0,  237,    2, 0x08 /* Private */,
      36,    0,  238,    2, 0x08 /* Private */,
      37,    0,  239,    2, 0x08 /* Private */,
      38,    0,  240,    2, 0x08 /* Private */,
      39,    0,  241,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QSensor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QSensor *_t = static_cast<tst_QSensor *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->testRecursiveLoadPlugins(); break;
        case 3: _t->testTypeRegistered(); break;
        case 4: _t->testSensorRegistered(); break;
        case 5: _t->testSensorDefault(); break;
        case 6: _t->testBadDefaultFromConfig(); break;
        case 7: _t->testGoodDefaultFromConfig(); break;
        case 8: _t->testNoSensorsForType(); break;
        case 9: _t->testNoDefaultForType(); break;
        case 10: _t->testCreation(); break;
        case 11: _t->testSetIdentifierFail(); break;
        case 12: _t->testBadDefaultCreation(); break;
        case 13: _t->testBadCreation(); break;
        case 14: _t->testTimestamp(); break;
        case 15: _t->testStart(); break;
        case 16: _t->testBadStart(); break;
        case 17: _t->testStop(); break;
        case 18: _t->testMetaData(); break;
        case 19: _t->testFilter(); break;
        case 20: _t->testFilter2(); break;
        case 21: _t->testFilter3(); break;
        case 22: _t->testStart2(); break;
        case 23: _t->testSetBadDataRate(); break;
        case 24: _t->testSetBadDataRateWhenNotConnected(); break;
        case 25: _t->testSetBadOutputRange(); break;
        case 26: _t->testSetBadOutputRangeWhenNotConnected(); break;
        case 27: _t->testEnumHandling(); break;
        case 28: _t->testDynamicDefaultsAndGenericHandling(); break;
        case 29: _t->testCreation2(); break;
        case 30: _t->testSensorsChangedSignal(); break;
        case 31: _t->testSetActive(); break;
        case 32: _t->testAlwaysOn(); break;
        case 33: _t->testIsRegistered(); break;
        case 34: _t->testAllTheInterfaces(); break;
        case 35: _t->testReadingBC(); break;
        case 36: _t->testBusyChanged(); break;
        case 37: _t->testSupportedFeatures(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QSensor::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QSensor.data,
      qt_meta_data_tst_QSensor,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QSensor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QSensor::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QSensor.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QSensor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 38)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 38;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 38)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 38;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
