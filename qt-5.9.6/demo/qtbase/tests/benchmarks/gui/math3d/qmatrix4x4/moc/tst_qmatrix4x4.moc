/****************************************************************************
** Meta object code from reading C++ file 'tst_qmatrix4x4.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qmatrix4x4.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QMatrix4x4_t {
    QByteArrayData data[32];
    char stringdata0[655];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QMatrix4x4_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QMatrix4x4_t qt_meta_stringdata_tst_QMatrix4x4 = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QMatrix4x4"
QT_MOC_LITERAL(1, 15, 13), // "multiply_data"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 8), // "multiply"
QT_MOC_LITERAL(4, 39, 20), // "multiplyInPlace_data"
QT_MOC_LITERAL(5, 60, 15), // "multiplyInPlace"
QT_MOC_LITERAL(6, 76, 19), // "multiplyDirect_data"
QT_MOC_LITERAL(7, 96, 14), // "multiplyDirect"
QT_MOC_LITERAL(8, 111, 16), // "mapVector3D_data"
QT_MOC_LITERAL(9, 128, 11), // "mapVector3D"
QT_MOC_LITERAL(10, 140, 16), // "mapVector2D_data"
QT_MOC_LITERAL(11, 157, 11), // "mapVector2D"
QT_MOC_LITERAL(12, 169, 20), // "mapVectorDirect_data"
QT_MOC_LITERAL(13, 190, 15), // "mapVectorDirect"
QT_MOC_LITERAL(14, 206, 21), // "compareTranslate_data"
QT_MOC_LITERAL(15, 228, 16), // "compareTranslate"
QT_MOC_LITERAL(16, 245, 31), // "compareTranslateAfterScale_data"
QT_MOC_LITERAL(17, 277, 26), // "compareTranslateAfterScale"
QT_MOC_LITERAL(18, 304, 32), // "compareTranslateAfterRotate_data"
QT_MOC_LITERAL(19, 337, 27), // "compareTranslateAfterRotate"
QT_MOC_LITERAL(20, 365, 17), // "compareScale_data"
QT_MOC_LITERAL(21, 383, 12), // "compareScale"
QT_MOC_LITERAL(22, 396, 31), // "compareScaleAfterTranslate_data"
QT_MOC_LITERAL(23, 428, 26), // "compareScaleAfterTranslate"
QT_MOC_LITERAL(24, 455, 28), // "compareScaleAfterRotate_data"
QT_MOC_LITERAL(25, 484, 23), // "compareScaleAfterRotate"
QT_MOC_LITERAL(26, 508, 18), // "compareRotate_data"
QT_MOC_LITERAL(27, 527, 13), // "compareRotate"
QT_MOC_LITERAL(28, 541, 32), // "compareRotateAfterTranslate_data"
QT_MOC_LITERAL(29, 574, 27), // "compareRotateAfterTranslate"
QT_MOC_LITERAL(30, 602, 28), // "compareRotateAfterScale_data"
QT_MOC_LITERAL(31, 631, 23) // "compareRotateAfterScale"

    },
    "tst_QMatrix4x4\0multiply_data\0\0multiply\0"
    "multiplyInPlace_data\0multiplyInPlace\0"
    "multiplyDirect_data\0multiplyDirect\0"
    "mapVector3D_data\0mapVector3D\0"
    "mapVector2D_data\0mapVector2D\0"
    "mapVectorDirect_data\0mapVectorDirect\0"
    "compareTranslate_data\0compareTranslate\0"
    "compareTranslateAfterScale_data\0"
    "compareTranslateAfterScale\0"
    "compareTranslateAfterRotate_data\0"
    "compareTranslateAfterRotate\0"
    "compareScale_data\0compareScale\0"
    "compareScaleAfterTranslate_data\0"
    "compareScaleAfterTranslate\0"
    "compareScaleAfterRotate_data\0"
    "compareScaleAfterRotate\0compareRotate_data\0"
    "compareRotate\0compareRotateAfterTranslate_data\0"
    "compareRotateAfterTranslate\0"
    "compareRotateAfterScale_data\0"
    "compareRotateAfterScale"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QMatrix4x4[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      30,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  164,    2, 0x08 /* Private */,
       3,    0,  165,    2, 0x08 /* Private */,
       4,    0,  166,    2, 0x08 /* Private */,
       5,    0,  167,    2, 0x08 /* Private */,
       6,    0,  168,    2, 0x08 /* Private */,
       7,    0,  169,    2, 0x08 /* Private */,
       8,    0,  170,    2, 0x08 /* Private */,
       9,    0,  171,    2, 0x08 /* Private */,
      10,    0,  172,    2, 0x08 /* Private */,
      11,    0,  173,    2, 0x08 /* Private */,
      12,    0,  174,    2, 0x08 /* Private */,
      13,    0,  175,    2, 0x08 /* Private */,
      14,    0,  176,    2, 0x08 /* Private */,
      15,    0,  177,    2, 0x08 /* Private */,
      16,    0,  178,    2, 0x08 /* Private */,
      17,    0,  179,    2, 0x08 /* Private */,
      18,    0,  180,    2, 0x08 /* Private */,
      19,    0,  181,    2, 0x08 /* Private */,
      20,    0,  182,    2, 0x08 /* Private */,
      21,    0,  183,    2, 0x08 /* Private */,
      22,    0,  184,    2, 0x08 /* Private */,
      23,    0,  185,    2, 0x08 /* Private */,
      24,    0,  186,    2, 0x08 /* Private */,
      25,    0,  187,    2, 0x08 /* Private */,
      26,    0,  188,    2, 0x08 /* Private */,
      27,    0,  189,    2, 0x08 /* Private */,
      28,    0,  190,    2, 0x08 /* Private */,
      29,    0,  191,    2, 0x08 /* Private */,
      30,    0,  192,    2, 0x08 /* Private */,
      31,    0,  193,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QMatrix4x4::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QMatrix4x4 *_t = static_cast<tst_QMatrix4x4 *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->multiply_data(); break;
        case 1: _t->multiply(); break;
        case 2: _t->multiplyInPlace_data(); break;
        case 3: _t->multiplyInPlace(); break;
        case 4: _t->multiplyDirect_data(); break;
        case 5: _t->multiplyDirect(); break;
        case 6: _t->mapVector3D_data(); break;
        case 7: _t->mapVector3D(); break;
        case 8: _t->mapVector2D_data(); break;
        case 9: _t->mapVector2D(); break;
        case 10: _t->mapVectorDirect_data(); break;
        case 11: _t->mapVectorDirect(); break;
        case 12: _t->compareTranslate_data(); break;
        case 13: _t->compareTranslate(); break;
        case 14: _t->compareTranslateAfterScale_data(); break;
        case 15: _t->compareTranslateAfterScale(); break;
        case 16: _t->compareTranslateAfterRotate_data(); break;
        case 17: _t->compareTranslateAfterRotate(); break;
        case 18: _t->compareScale_data(); break;
        case 19: _t->compareScale(); break;
        case 20: _t->compareScaleAfterTranslate_data(); break;
        case 21: _t->compareScaleAfterTranslate(); break;
        case 22: _t->compareScaleAfterRotate_data(); break;
        case 23: _t->compareScaleAfterRotate(); break;
        case 24: _t->compareRotate_data(); break;
        case 25: _t->compareRotate(); break;
        case 26: _t->compareRotateAfterTranslate_data(); break;
        case 27: _t->compareRotateAfterTranslate(); break;
        case 28: _t->compareRotateAfterScale_data(); break;
        case 29: _t->compareRotateAfterScale(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QMatrix4x4::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QMatrix4x4.data,
      qt_meta_data_tst_QMatrix4x4,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QMatrix4x4::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QMatrix4x4::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QMatrix4x4.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QMatrix4x4::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 30)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 30;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 30)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 30;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
