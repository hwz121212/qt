/****************************************************************************
** Meta object code from reading C++ file 'main.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'main.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_qfile_t {
    QByteArrayData data[29];
    char stringdata0[537];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_qfile_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_qfile_t qt_meta_stringdata_tst_qfile = {
    {
QT_MOC_LITERAL(0, 0, 9), // "tst_qfile"
QT_MOC_LITERAL(1, 10, 12), // "initTestCase"
QT_MOC_LITERAL(2, 23, 0), // ""
QT_MOC_LITERAL(3, 24, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 40, 9), // "open_data"
QT_MOC_LITERAL(5, 50, 4), // "open"
QT_MOC_LITERAL(6, 55, 9), // "seek_data"
QT_MOC_LITERAL(7, 65, 4), // "seek"
QT_MOC_LITERAL(8, 70, 20), // "readSmallFiles_QFile"
QT_MOC_LITERAL(9, 91, 28), // "readSmallFiles_QFSFileEngine"
QT_MOC_LITERAL(10, 120, 20), // "readSmallFiles_posix"
QT_MOC_LITERAL(11, 141, 20), // "readSmallFiles_Win32"
QT_MOC_LITERAL(12, 162, 25), // "readSmallFiles_QFile_data"
QT_MOC_LITERAL(13, 188, 33), // "readSmallFiles_QFSFileEngine_..."
QT_MOC_LITERAL(14, 222, 25), // "readSmallFiles_posix_data"
QT_MOC_LITERAL(15, 248, 25), // "readSmallFiles_Win32_data"
QT_MOC_LITERAL(16, 274, 22), // "readBigFile_QFile_data"
QT_MOC_LITERAL(17, 297, 30), // "readBigFile_QFSFileEngine_data"
QT_MOC_LITERAL(18, 328, 22), // "readBigFile_posix_data"
QT_MOC_LITERAL(19, 351, 22), // "readBigFile_Win32_data"
QT_MOC_LITERAL(20, 374, 17), // "readBigFile_QFile"
QT_MOC_LITERAL(21, 392, 25), // "readBigFile_QFSFileEngine"
QT_MOC_LITERAL(22, 418, 17), // "readBigFile_posix"
QT_MOC_LITERAL(23, 436, 17), // "readBigFile_Win32"
QT_MOC_LITERAL(24, 454, 13), // "BenchmarkType"
QT_MOC_LITERAL(25, 468, 14), // "QFileBenchmark"
QT_MOC_LITERAL(26, 483, 14), // "Win32Benchmark"
QT_MOC_LITERAL(27, 498, 14), // "PosixBenchmark"
QT_MOC_LITERAL(28, 513, 23) // "QFileFromPosixBenchmark"

    },
    "tst_qfile\0initTestCase\0\0cleanupTestCase\0"
    "open_data\0open\0seek_data\0seek\0"
    "readSmallFiles_QFile\0readSmallFiles_QFSFileEngine\0"
    "readSmallFiles_posix\0readSmallFiles_Win32\0"
    "readSmallFiles_QFile_data\0"
    "readSmallFiles_QFSFileEngine_data\0"
    "readSmallFiles_posix_data\0"
    "readSmallFiles_Win32_data\0"
    "readBigFile_QFile_data\0"
    "readBigFile_QFSFileEngine_data\0"
    "readBigFile_posix_data\0readBigFile_Win32_data\0"
    "readBigFile_QFile\0readBigFile_QFSFileEngine\0"
    "readBigFile_posix\0readBigFile_Win32\0"
    "BenchmarkType\0QFileBenchmark\0"
    "Win32Benchmark\0PosixBenchmark\0"
    "QFileFromPosixBenchmark"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_qfile[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      22,   14, // methods
       0,    0, // properties
       1,  146, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  124,    2, 0x08 /* Private */,
       3,    0,  125,    2, 0x08 /* Private */,
       4,    0,  126,    2, 0x08 /* Private */,
       5,    0,  127,    2, 0x08 /* Private */,
       6,    0,  128,    2, 0x08 /* Private */,
       7,    0,  129,    2, 0x08 /* Private */,
       8,    0,  130,    2, 0x08 /* Private */,
       9,    0,  131,    2, 0x08 /* Private */,
      10,    0,  132,    2, 0x08 /* Private */,
      11,    0,  133,    2, 0x08 /* Private */,
      12,    0,  134,    2, 0x08 /* Private */,
      13,    0,  135,    2, 0x08 /* Private */,
      14,    0,  136,    2, 0x08 /* Private */,
      15,    0,  137,    2, 0x08 /* Private */,
      16,    0,  138,    2, 0x08 /* Private */,
      17,    0,  139,    2, 0x08 /* Private */,
      18,    0,  140,    2, 0x08 /* Private */,
      19,    0,  141,    2, 0x08 /* Private */,
      20,    0,  142,    2, 0x08 /* Private */,
      21,    0,  143,    2, 0x08 /* Private */,
      22,    0,  144,    2, 0x08 /* Private */,
      23,    0,  145,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // enums: name, flags, count, data
      24, 0x0,    4,  150,

 // enum data: key, value
      25, uint(tst_qfile::QFileBenchmark),
      26, uint(tst_qfile::Win32Benchmark),
      27, uint(tst_qfile::PosixBenchmark),
      28, uint(tst_qfile::QFileFromPosixBenchmark),

       0        // eod
};

void tst_qfile::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_qfile *_t = static_cast<tst_qfile *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->open_data(); break;
        case 3: _t->open(); break;
        case 4: _t->seek_data(); break;
        case 5: _t->seek(); break;
        case 6: _t->readSmallFiles_QFile(); break;
        case 7: _t->readSmallFiles_QFSFileEngine(); break;
        case 8: _t->readSmallFiles_posix(); break;
        case 9: _t->readSmallFiles_Win32(); break;
        case 10: _t->readSmallFiles_QFile_data(); break;
        case 11: _t->readSmallFiles_QFSFileEngine_data(); break;
        case 12: _t->readSmallFiles_posix_data(); break;
        case 13: _t->readSmallFiles_Win32_data(); break;
        case 14: _t->readBigFile_QFile_data(); break;
        case 15: _t->readBigFile_QFSFileEngine_data(); break;
        case 16: _t->readBigFile_posix_data(); break;
        case 17: _t->readBigFile_Win32_data(); break;
        case 18: _t->readBigFile_QFile(); break;
        case 19: _t->readBigFile_QFSFileEngine(); break;
        case 20: _t->readBigFile_posix(); break;
        case 21: _t->readBigFile_Win32(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_qfile::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_qfile.data,
      qt_meta_data_tst_qfile,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_qfile::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_qfile::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_qfile.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_qfile::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 22)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 22;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 22)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 22;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
