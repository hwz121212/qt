/****************************************************************************
** Meta object code from reading C++ file 'main.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'main.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QDateTime_t {
    QByteArrayData data[48];
    char stringdata0[665];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QDateTime_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QDateTime_t qt_meta_stringdata_tst_QDateTime = {
    {
QT_MOC_LITERAL(0, 0, 13), // "tst_QDateTime"
QT_MOC_LITERAL(1, 14, 6), // "create"
QT_MOC_LITERAL(2, 21, 0), // ""
QT_MOC_LITERAL(3, 22, 6), // "isNull"
QT_MOC_LITERAL(4, 29, 7), // "isValid"
QT_MOC_LITERAL(5, 37, 4), // "date"
QT_MOC_LITERAL(6, 42, 4), // "time"
QT_MOC_LITERAL(7, 47, 8), // "timeSpec"
QT_MOC_LITERAL(8, 56, 13), // "offsetFromUtc"
QT_MOC_LITERAL(9, 70, 20), // "timeZoneAbbreviation"
QT_MOC_LITERAL(10, 91, 17), // "toMSecsSinceEpoch"
QT_MOC_LITERAL(11, 109, 21), // "toMSecsSinceEpoch1950"
QT_MOC_LITERAL(12, 131, 21), // "toMSecsSinceEpoch2050"
QT_MOC_LITERAL(13, 153, 19), // "toMSecsSinceEpochTz"
QT_MOC_LITERAL(14, 173, 23), // "toMSecsSinceEpoch1950Tz"
QT_MOC_LITERAL(15, 197, 23), // "toMSecsSinceEpoch2050Tz"
QT_MOC_LITERAL(16, 221, 7), // "setDate"
QT_MOC_LITERAL(17, 229, 7), // "setTime"
QT_MOC_LITERAL(18, 237, 11), // "setTimeSpec"
QT_MOC_LITERAL(19, 249, 16), // "setOffsetFromUtc"
QT_MOC_LITERAL(20, 266, 18), // "setMSecsSinceEpoch"
QT_MOC_LITERAL(21, 285, 20), // "setMSecsSinceEpochTz"
QT_MOC_LITERAL(22, 306, 8), // "toString"
QT_MOC_LITERAL(23, 315, 18), // "toStringTextFormat"
QT_MOC_LITERAL(24, 334, 17), // "toStringIsoFormat"
QT_MOC_LITERAL(25, 352, 7), // "addDays"
QT_MOC_LITERAL(26, 360, 9), // "addDaysTz"
QT_MOC_LITERAL(27, 370, 8), // "addMSecs"
QT_MOC_LITERAL(28, 379, 10), // "addMSecsTz"
QT_MOC_LITERAL(29, 390, 10), // "toTimeSpec"
QT_MOC_LITERAL(30, 401, 15), // "toOffsetFromUtc"
QT_MOC_LITERAL(31, 417, 6), // "daysTo"
QT_MOC_LITERAL(32, 424, 7), // "msecsTo"
QT_MOC_LITERAL(33, 432, 10), // "equivalent"
QT_MOC_LITERAL(34, 443, 13), // "equivalentUtc"
QT_MOC_LITERAL(35, 457, 8), // "lessThan"
QT_MOC_LITERAL(36, 466, 11), // "lessThanUtc"
QT_MOC_LITERAL(37, 478, 15), // "currentDateTime"
QT_MOC_LITERAL(38, 494, 11), // "currentDate"
QT_MOC_LITERAL(39, 506, 11), // "currentTime"
QT_MOC_LITERAL(40, 518, 18), // "currentDateTimeUtc"
QT_MOC_LITERAL(41, 537, 22), // "currentMSecsSinceEpoch"
QT_MOC_LITERAL(42, 560, 10), // "fromString"
QT_MOC_LITERAL(43, 571, 14), // "fromStringText"
QT_MOC_LITERAL(44, 586, 13), // "fromStringIso"
QT_MOC_LITERAL(45, 600, 19), // "fromMSecsSinceEpoch"
QT_MOC_LITERAL(46, 620, 22), // "fromMSecsSinceEpochUtc"
QT_MOC_LITERAL(47, 643, 21) // "fromMSecsSinceEpochTz"

    },
    "tst_QDateTime\0create\0\0isNull\0isValid\0"
    "date\0time\0timeSpec\0offsetFromUtc\0"
    "timeZoneAbbreviation\0toMSecsSinceEpoch\0"
    "toMSecsSinceEpoch1950\0toMSecsSinceEpoch2050\0"
    "toMSecsSinceEpochTz\0toMSecsSinceEpoch1950Tz\0"
    "toMSecsSinceEpoch2050Tz\0setDate\0setTime\0"
    "setTimeSpec\0setOffsetFromUtc\0"
    "setMSecsSinceEpoch\0setMSecsSinceEpochTz\0"
    "toString\0toStringTextFormat\0"
    "toStringIsoFormat\0addDays\0addDaysTz\0"
    "addMSecs\0addMSecsTz\0toTimeSpec\0"
    "toOffsetFromUtc\0daysTo\0msecsTo\0"
    "equivalent\0equivalentUtc\0lessThan\0"
    "lessThanUtc\0currentDateTime\0currentDate\0"
    "currentTime\0currentDateTimeUtc\0"
    "currentMSecsSinceEpoch\0fromString\0"
    "fromStringText\0fromStringIso\0"
    "fromMSecsSinceEpoch\0fromMSecsSinceEpochUtc\0"
    "fromMSecsSinceEpochTz"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QDateTime[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      46,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  244,    2, 0x08 /* Private */,
       3,    0,  245,    2, 0x08 /* Private */,
       4,    0,  246,    2, 0x08 /* Private */,
       5,    0,  247,    2, 0x08 /* Private */,
       6,    0,  248,    2, 0x08 /* Private */,
       7,    0,  249,    2, 0x08 /* Private */,
       8,    0,  250,    2, 0x08 /* Private */,
       9,    0,  251,    2, 0x08 /* Private */,
      10,    0,  252,    2, 0x08 /* Private */,
      11,    0,  253,    2, 0x08 /* Private */,
      12,    0,  254,    2, 0x08 /* Private */,
      13,    0,  255,    2, 0x08 /* Private */,
      14,    0,  256,    2, 0x08 /* Private */,
      15,    0,  257,    2, 0x08 /* Private */,
      16,    0,  258,    2, 0x08 /* Private */,
      17,    0,  259,    2, 0x08 /* Private */,
      18,    0,  260,    2, 0x08 /* Private */,
      19,    0,  261,    2, 0x08 /* Private */,
      20,    0,  262,    2, 0x08 /* Private */,
      21,    0,  263,    2, 0x08 /* Private */,
      22,    0,  264,    2, 0x08 /* Private */,
      23,    0,  265,    2, 0x08 /* Private */,
      24,    0,  266,    2, 0x08 /* Private */,
      25,    0,  267,    2, 0x08 /* Private */,
      26,    0,  268,    2, 0x08 /* Private */,
      27,    0,  269,    2, 0x08 /* Private */,
      28,    0,  270,    2, 0x08 /* Private */,
      29,    0,  271,    2, 0x08 /* Private */,
      30,    0,  272,    2, 0x08 /* Private */,
      31,    0,  273,    2, 0x08 /* Private */,
      32,    0,  274,    2, 0x08 /* Private */,
      33,    0,  275,    2, 0x08 /* Private */,
      34,    0,  276,    2, 0x08 /* Private */,
      35,    0,  277,    2, 0x08 /* Private */,
      36,    0,  278,    2, 0x08 /* Private */,
      37,    0,  279,    2, 0x08 /* Private */,
      38,    0,  280,    2, 0x08 /* Private */,
      39,    0,  281,    2, 0x08 /* Private */,
      40,    0,  282,    2, 0x08 /* Private */,
      41,    0,  283,    2, 0x08 /* Private */,
      42,    0,  284,    2, 0x08 /* Private */,
      43,    0,  285,    2, 0x08 /* Private */,
      44,    0,  286,    2, 0x08 /* Private */,
      45,    0,  287,    2, 0x08 /* Private */,
      46,    0,  288,    2, 0x08 /* Private */,
      47,    0,  289,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QDateTime::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QDateTime *_t = static_cast<tst_QDateTime *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->create(); break;
        case 1: _t->isNull(); break;
        case 2: _t->isValid(); break;
        case 3: _t->date(); break;
        case 4: _t->time(); break;
        case 5: _t->timeSpec(); break;
        case 6: _t->offsetFromUtc(); break;
        case 7: _t->timeZoneAbbreviation(); break;
        case 8: _t->toMSecsSinceEpoch(); break;
        case 9: _t->toMSecsSinceEpoch1950(); break;
        case 10: _t->toMSecsSinceEpoch2050(); break;
        case 11: _t->toMSecsSinceEpochTz(); break;
        case 12: _t->toMSecsSinceEpoch1950Tz(); break;
        case 13: _t->toMSecsSinceEpoch2050Tz(); break;
        case 14: _t->setDate(); break;
        case 15: _t->setTime(); break;
        case 16: _t->setTimeSpec(); break;
        case 17: _t->setOffsetFromUtc(); break;
        case 18: _t->setMSecsSinceEpoch(); break;
        case 19: _t->setMSecsSinceEpochTz(); break;
        case 20: _t->toString(); break;
        case 21: _t->toStringTextFormat(); break;
        case 22: _t->toStringIsoFormat(); break;
        case 23: _t->addDays(); break;
        case 24: _t->addDaysTz(); break;
        case 25: _t->addMSecs(); break;
        case 26: _t->addMSecsTz(); break;
        case 27: _t->toTimeSpec(); break;
        case 28: _t->toOffsetFromUtc(); break;
        case 29: _t->daysTo(); break;
        case 30: _t->msecsTo(); break;
        case 31: _t->equivalent(); break;
        case 32: _t->equivalentUtc(); break;
        case 33: _t->lessThan(); break;
        case 34: _t->lessThanUtc(); break;
        case 35: _t->currentDateTime(); break;
        case 36: _t->currentDate(); break;
        case 37: _t->currentTime(); break;
        case 38: _t->currentDateTimeUtc(); break;
        case 39: _t->currentMSecsSinceEpoch(); break;
        case 40: _t->fromString(); break;
        case 41: _t->fromStringText(); break;
        case 42: _t->fromStringIso(); break;
        case 43: _t->fromMSecsSinceEpoch(); break;
        case 44: _t->fromMSecsSinceEpochUtc(); break;
        case 45: _t->fromMSecsSinceEpochTz(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QDateTime::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QDateTime.data,
      qt_meta_data_tst_QDateTime,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QDateTime::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QDateTime::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QDateTime.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QDateTime::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 46)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 46;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 46)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 46;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
