/****************************************************************************
** Meta object code from reading C++ file 'main.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'main.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QVector_t {
    QByteArrayData data[19];
    char stringdata0[399];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QVector_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QVector_t qt_meta_stringdata_tst_QVector = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_QVector"
QT_MOC_LITERAL(1, 12, 11), // "calibration"
QT_MOC_LITERAL(2, 24, 0), // ""
QT_MOC_LITERAL(3, 25, 17), // "qvector_separator"
QT_MOC_LITERAL(4, 43, 25), // "qvector_const_read_access"
QT_MOC_LITERAL(5, 69, 27), // "qvector_mutable_read_access"
QT_MOC_LITERAL(6, 97, 16), // "qvector_pop_back"
QT_MOC_LITERAL(7, 114, 23), // "qvector_fill_and_return"
QT_MOC_LITERAL(8, 138, 9), // "stdvector"
QT_MOC_LITERAL(9, 148, 27), // "stdvector_const_read_access"
QT_MOC_LITERAL(10, 176, 29), // "stdvector_mutable_read_access"
QT_MOC_LITERAL(11, 206, 18), // "stdvector_pop_back"
QT_MOC_LITERAL(12, 225, 25), // "stdvector_fill_and_return"
QT_MOC_LITERAL(13, 251, 11), // "mixedvector"
QT_MOC_LITERAL(14, 263, 27), // "mixedvector_fill_and_return"
QT_MOC_LITERAL(15, 291, 20), // "qrawvector_separator"
QT_MOC_LITERAL(16, 312, 28), // "qrawvector_const_read_access"
QT_MOC_LITERAL(17, 341, 30), // "qrawvector_mutable_read_access"
QT_MOC_LITERAL(18, 372, 26) // "qrawvector_fill_and_return"

    },
    "tst_QVector\0calibration\0\0qvector_separator\0"
    "qvector_const_read_access\0"
    "qvector_mutable_read_access\0"
    "qvector_pop_back\0qvector_fill_and_return\0"
    "stdvector\0stdvector_const_read_access\0"
    "stdvector_mutable_read_access\0"
    "stdvector_pop_back\0stdvector_fill_and_return\0"
    "mixedvector\0mixedvector_fill_and_return\0"
    "qrawvector_separator\0qrawvector_const_read_access\0"
    "qrawvector_mutable_read_access\0"
    "qrawvector_fill_and_return"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QVector[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      17,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   99,    2, 0x08 /* Private */,
       3,    0,  100,    2, 0x08 /* Private */,
       4,    0,  101,    2, 0x08 /* Private */,
       5,    0,  102,    2, 0x08 /* Private */,
       6,    0,  103,    2, 0x08 /* Private */,
       7,    0,  104,    2, 0x08 /* Private */,
       8,    0,  105,    2, 0x08 /* Private */,
       9,    0,  106,    2, 0x08 /* Private */,
      10,    0,  107,    2, 0x08 /* Private */,
      11,    0,  108,    2, 0x08 /* Private */,
      12,    0,  109,    2, 0x08 /* Private */,
      13,    0,  110,    2, 0x08 /* Private */,
      14,    0,  111,    2, 0x08 /* Private */,
      15,    0,  112,    2, 0x08 /* Private */,
      16,    0,  113,    2, 0x08 /* Private */,
      17,    0,  114,    2, 0x08 /* Private */,
      18,    0,  115,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QVector::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QVector *_t = static_cast<tst_QVector *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->calibration(); break;
        case 1: _t->qvector_separator(); break;
        case 2: _t->qvector_const_read_access(); break;
        case 3: _t->qvector_mutable_read_access(); break;
        case 4: _t->qvector_pop_back(); break;
        case 5: _t->qvector_fill_and_return(); break;
        case 6: _t->stdvector(); break;
        case 7: _t->stdvector_const_read_access(); break;
        case 8: _t->stdvector_mutable_read_access(); break;
        case 9: _t->stdvector_pop_back(); break;
        case 10: _t->stdvector_fill_and_return(); break;
        case 11: _t->mixedvector(); break;
        case 12: _t->mixedvector_fill_and_return(); break;
        case 13: _t->qrawvector_separator(); break;
        case 14: _t->qrawvector_const_read_access(); break;
        case 15: _t->qrawvector_mutable_read_access(); break;
        case 16: _t->qrawvector_fill_and_return(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QVector::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QVector.data,
      qt_meta_data_tst_QVector,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QVector::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QVector::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QVector.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QVector::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 17;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
