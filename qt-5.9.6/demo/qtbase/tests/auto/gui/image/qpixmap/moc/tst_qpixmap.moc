/****************************************************************************
** Meta object code from reading C++ file 'tst_qpixmap.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qpixmap.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QPixmap_t {
    QByteArrayData data[67];
    char stringdata0[1071];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QPixmap_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QPixmap_t qt_meta_stringdata_tst_QPixmap = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_QPixmap"
QT_MOC_LITERAL(1, 12, 12), // "initTestCase"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 42, 4), // "swap"
QT_MOC_LITERAL(5, 47, 14), // "fromImage_data"
QT_MOC_LITERAL(6, 62, 9), // "fromImage"
QT_MOC_LITERAL(7, 72, 27), // "fromUninitializedImage_data"
QT_MOC_LITERAL(8, 100, 22), // "fromUninitializedImage"
QT_MOC_LITERAL(9, 123, 21), // "convertFromImage_data"
QT_MOC_LITERAL(10, 145, 16), // "convertFromImage"
QT_MOC_LITERAL(11, 162, 28), // "convertFromImageShouldDetach"
QT_MOC_LITERAL(12, 191, 11), // "testMetrics"
QT_MOC_LITERAL(13, 203, 11), // "scroll_data"
QT_MOC_LITERAL(14, 215, 6), // "scroll"
QT_MOC_LITERAL(15, 222, 9), // "fill_data"
QT_MOC_LITERAL(16, 232, 4), // "fill"
QT_MOC_LITERAL(17, 237, 16), // "fill_transparent"
QT_MOC_LITERAL(18, 254, 19), // "createMaskFromColor"
QT_MOC_LITERAL(19, 274, 4), // "mask"
QT_MOC_LITERAL(20, 279, 10), // "bitmapMask"
QT_MOC_LITERAL(21, 290, 15), // "setGetMask_data"
QT_MOC_LITERAL(22, 306, 10), // "setGetMask"
QT_MOC_LITERAL(23, 317, 8), // "cacheKey"
QT_MOC_LITERAL(24, 326, 10), // "drawBitmap"
QT_MOC_LITERAL(25, 337, 6), // "isNull"
QT_MOC_LITERAL(26, 344, 11), // "task_246446"
QT_MOC_LITERAL(27, 356, 10), // "task_51271"
QT_MOC_LITERAL(28, 367, 24), // "convertFromImageNoDetach"
QT_MOC_LITERAL(29, 392, 25), // "convertFromImageNoDetach2"
QT_MOC_LITERAL(30, 418, 22), // "convertFromImageDetach"
QT_MOC_LITERAL(31, 441, 24), // "convertFromImageCacheKey"
QT_MOC_LITERAL(32, 466, 17), // "toWinHBITMAP_data"
QT_MOC_LITERAL(33, 484, 12), // "toWinHBITMAP"
QT_MOC_LITERAL(34, 497, 19), // "fromWinHBITMAP_data"
QT_MOC_LITERAL(35, 517, 14), // "fromWinHBITMAP"
QT_MOC_LITERAL(36, 532, 15), // "toWinHICON_data"
QT_MOC_LITERAL(37, 548, 10), // "toWinHICON"
QT_MOC_LITERAL(38, 559, 17), // "fromWinHICON_data"
QT_MOC_LITERAL(39, 577, 12), // "fromWinHICON"
QT_MOC_LITERAL(40, 590, 31), // "onlyNullPixmapsOutsideGuiThread"
QT_MOC_LITERAL(41, 622, 8), // "refUnref"
QT_MOC_LITERAL(42, 631, 4), // "copy"
QT_MOC_LITERAL(43, 636, 20), // "deepCopyPreservesDpr"
QT_MOC_LITERAL(44, 657, 18), // "depthOfNullObjects"
QT_MOC_LITERAL(45, 676, 11), // "transformed"
QT_MOC_LITERAL(46, 688, 12), // "transformed2"
QT_MOC_LITERAL(47, 701, 15), // "fromImage_crash"
QT_MOC_LITERAL(48, 717, 4), // "load"
QT_MOC_LITERAL(49, 722, 12), // "loadFromData"
QT_MOC_LITERAL(50, 735, 18), // "loadFromDataStream"
QT_MOC_LITERAL(51, 754, 8), // "fromData"
QT_MOC_LITERAL(52, 763, 22), // "loadFromDataNullValues"
QT_MOC_LITERAL(53, 786, 22), // "loadFromDataImage_data"
QT_MOC_LITERAL(54, 809, 17), // "loadFromDataImage"
QT_MOC_LITERAL(55, 827, 20), // "fromImageReader_data"
QT_MOC_LITERAL(56, 848, 15), // "fromImageReader"
QT_MOC_LITERAL(57, 864, 31), // "fromImageReaderAnimatedGif_data"
QT_MOC_LITERAL(58, 896, 26), // "fromImageReaderAnimatedGif"
QT_MOC_LITERAL(59, 923, 13), // "preserveDepth"
QT_MOC_LITERAL(60, 937, 12), // "splash_crash"
QT_MOC_LITERAL(61, 950, 15), // "toImageDeepCopy"
QT_MOC_LITERAL(62, 966, 20), // "loadAsBitmapOrPixmap"
QT_MOC_LITERAL(63, 987, 17), // "scaled_QTBUG19157"
QT_MOC_LITERAL(64, 1005, 23), // "detachOnLoad_QTBUG29639"
QT_MOC_LITERAL(65, 1029, 24), // "copyOnNonAlignedBoundary"
QT_MOC_LITERAL(66, 1054, 16) // "devicePixelRatio"

    },
    "tst_QPixmap\0initTestCase\0\0cleanupTestCase\0"
    "swap\0fromImage_data\0fromImage\0"
    "fromUninitializedImage_data\0"
    "fromUninitializedImage\0convertFromImage_data\0"
    "convertFromImage\0convertFromImageShouldDetach\0"
    "testMetrics\0scroll_data\0scroll\0fill_data\0"
    "fill\0fill_transparent\0createMaskFromColor\0"
    "mask\0bitmapMask\0setGetMask_data\0"
    "setGetMask\0cacheKey\0drawBitmap\0isNull\0"
    "task_246446\0task_51271\0convertFromImageNoDetach\0"
    "convertFromImageNoDetach2\0"
    "convertFromImageDetach\0convertFromImageCacheKey\0"
    "toWinHBITMAP_data\0toWinHBITMAP\0"
    "fromWinHBITMAP_data\0fromWinHBITMAP\0"
    "toWinHICON_data\0toWinHICON\0fromWinHICON_data\0"
    "fromWinHICON\0onlyNullPixmapsOutsideGuiThread\0"
    "refUnref\0copy\0deepCopyPreservesDpr\0"
    "depthOfNullObjects\0transformed\0"
    "transformed2\0fromImage_crash\0load\0"
    "loadFromData\0loadFromDataStream\0"
    "fromData\0loadFromDataNullValues\0"
    "loadFromDataImage_data\0loadFromDataImage\0"
    "fromImageReader_data\0fromImageReader\0"
    "fromImageReaderAnimatedGif_data\0"
    "fromImageReaderAnimatedGif\0preserveDepth\0"
    "splash_crash\0toImageDeepCopy\0"
    "loadAsBitmapOrPixmap\0scaled_QTBUG19157\0"
    "detachOnLoad_QTBUG29639\0"
    "copyOnNonAlignedBoundary\0devicePixelRatio"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QPixmap[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      65,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  339,    2, 0x0a /* Public */,
       3,    0,  340,    2, 0x0a /* Public */,
       4,    0,  341,    2, 0x08 /* Private */,
       5,    0,  342,    2, 0x08 /* Private */,
       6,    0,  343,    2, 0x08 /* Private */,
       7,    0,  344,    2, 0x08 /* Private */,
       8,    0,  345,    2, 0x08 /* Private */,
       9,    0,  346,    2, 0x08 /* Private */,
      10,    0,  347,    2, 0x08 /* Private */,
      11,    0,  348,    2, 0x08 /* Private */,
      12,    0,  349,    2, 0x08 /* Private */,
      13,    0,  350,    2, 0x08 /* Private */,
      14,    0,  351,    2, 0x08 /* Private */,
      15,    0,  352,    2, 0x08 /* Private */,
      16,    0,  353,    2, 0x08 /* Private */,
      17,    0,  354,    2, 0x08 /* Private */,
      18,    0,  355,    2, 0x08 /* Private */,
      19,    0,  356,    2, 0x08 /* Private */,
      20,    0,  357,    2, 0x08 /* Private */,
      21,    0,  358,    2, 0x08 /* Private */,
      22,    0,  359,    2, 0x08 /* Private */,
      23,    0,  360,    2, 0x08 /* Private */,
      24,    0,  361,    2, 0x08 /* Private */,
      25,    0,  362,    2, 0x08 /* Private */,
      26,    0,  363,    2, 0x08 /* Private */,
      27,    0,  364,    2, 0x08 /* Private */,
      28,    0,  365,    2, 0x08 /* Private */,
      29,    0,  366,    2, 0x08 /* Private */,
      30,    0,  367,    2, 0x08 /* Private */,
      31,    0,  368,    2, 0x08 /* Private */,
      32,    0,  369,    2, 0x08 /* Private */,
      33,    0,  370,    2, 0x08 /* Private */,
      34,    0,  371,    2, 0x08 /* Private */,
      35,    0,  372,    2, 0x08 /* Private */,
      36,    0,  373,    2, 0x08 /* Private */,
      37,    0,  374,    2, 0x08 /* Private */,
      38,    0,  375,    2, 0x08 /* Private */,
      39,    0,  376,    2, 0x08 /* Private */,
      40,    0,  377,    2, 0x08 /* Private */,
      41,    0,  378,    2, 0x08 /* Private */,
      42,    0,  379,    2, 0x08 /* Private */,
      43,    0,  380,    2, 0x08 /* Private */,
      44,    0,  381,    2, 0x08 /* Private */,
      45,    0,  382,    2, 0x08 /* Private */,
      46,    0,  383,    2, 0x08 /* Private */,
      47,    0,  384,    2, 0x08 /* Private */,
      48,    0,  385,    2, 0x08 /* Private */,
      49,    0,  386,    2, 0x08 /* Private */,
      50,    0,  387,    2, 0x08 /* Private */,
      51,    0,  388,    2, 0x08 /* Private */,
      52,    0,  389,    2, 0x08 /* Private */,
      53,    0,  390,    2, 0x08 /* Private */,
      54,    0,  391,    2, 0x08 /* Private */,
      55,    0,  392,    2, 0x08 /* Private */,
      56,    0,  393,    2, 0x08 /* Private */,
      57,    0,  394,    2, 0x08 /* Private */,
      58,    0,  395,    2, 0x08 /* Private */,
      59,    0,  396,    2, 0x08 /* Private */,
      60,    0,  397,    2, 0x08 /* Private */,
      61,    0,  398,    2, 0x08 /* Private */,
      62,    0,  399,    2, 0x08 /* Private */,
      63,    0,  400,    2, 0x08 /* Private */,
      64,    0,  401,    2, 0x08 /* Private */,
      65,    0,  402,    2, 0x08 /* Private */,
      66,    0,  403,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QPixmap::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QPixmap *_t = static_cast<tst_QPixmap *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->swap(); break;
        case 3: _t->fromImage_data(); break;
        case 4: _t->fromImage(); break;
        case 5: _t->fromUninitializedImage_data(); break;
        case 6: _t->fromUninitializedImage(); break;
        case 7: _t->convertFromImage_data(); break;
        case 8: _t->convertFromImage(); break;
        case 9: _t->convertFromImageShouldDetach(); break;
        case 10: _t->testMetrics(); break;
        case 11: _t->scroll_data(); break;
        case 12: _t->scroll(); break;
        case 13: _t->fill_data(); break;
        case 14: _t->fill(); break;
        case 15: _t->fill_transparent(); break;
        case 16: _t->createMaskFromColor(); break;
        case 17: _t->mask(); break;
        case 18: _t->bitmapMask(); break;
        case 19: _t->setGetMask_data(); break;
        case 20: _t->setGetMask(); break;
        case 21: _t->cacheKey(); break;
        case 22: _t->drawBitmap(); break;
        case 23: _t->isNull(); break;
        case 24: _t->task_246446(); break;
        case 25: _t->task_51271(); break;
        case 26: _t->convertFromImageNoDetach(); break;
        case 27: _t->convertFromImageNoDetach2(); break;
        case 28: _t->convertFromImageDetach(); break;
        case 29: _t->convertFromImageCacheKey(); break;
        case 30: _t->toWinHBITMAP_data(); break;
        case 31: _t->toWinHBITMAP(); break;
        case 32: _t->fromWinHBITMAP_data(); break;
        case 33: _t->fromWinHBITMAP(); break;
        case 34: _t->toWinHICON_data(); break;
        case 35: _t->toWinHICON(); break;
        case 36: _t->fromWinHICON_data(); break;
        case 37: _t->fromWinHICON(); break;
        case 38: _t->onlyNullPixmapsOutsideGuiThread(); break;
        case 39: _t->refUnref(); break;
        case 40: _t->copy(); break;
        case 41: _t->deepCopyPreservesDpr(); break;
        case 42: _t->depthOfNullObjects(); break;
        case 43: _t->transformed(); break;
        case 44: _t->transformed2(); break;
        case 45: _t->fromImage_crash(); break;
        case 46: _t->load(); break;
        case 47: _t->loadFromData(); break;
        case 48: _t->loadFromDataStream(); break;
        case 49: _t->fromData(); break;
        case 50: _t->loadFromDataNullValues(); break;
        case 51: _t->loadFromDataImage_data(); break;
        case 52: _t->loadFromDataImage(); break;
        case 53: _t->fromImageReader_data(); break;
        case 54: _t->fromImageReader(); break;
        case 55: _t->fromImageReaderAnimatedGif_data(); break;
        case 56: _t->fromImageReaderAnimatedGif(); break;
        case 57: _t->preserveDepth(); break;
        case 58: _t->splash_crash(); break;
        case 59: _t->toImageDeepCopy(); break;
        case 60: _t->loadAsBitmapOrPixmap(); break;
        case 61: _t->scaled_QTBUG19157(); break;
        case 62: _t->detachOnLoad_QTBUG29639(); break;
        case 63: _t->copyOnNonAlignedBoundary(); break;
        case 64: _t->devicePixelRatio(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QPixmap::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QPixmap.data,
      qt_meta_data_tst_QPixmap,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QPixmap::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QPixmap::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QPixmap.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QPixmap::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 65)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 65;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 65)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 65;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
