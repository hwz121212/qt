/****************************************************************************
** Meta object code from reading C++ file 'tst_qimagereader.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qimagereader.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QImageReader_t {
    QByteArrayData data[64];
    char stringdata0[1150];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QImageReader_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QImageReader_t qt_meta_stringdata_tst_QImageReader = {
    {
QT_MOC_LITERAL(0, 0, 16), // "tst_QImageReader"
QT_MOC_LITERAL(1, 17, 12), // "initTestCase"
QT_MOC_LITERAL(2, 30, 0), // ""
QT_MOC_LITERAL(3, 31, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 47, 11), // "getSetCheck"
QT_MOC_LITERAL(5, 59, 14), // "readImage_data"
QT_MOC_LITERAL(6, 74, 9), // "readImage"
QT_MOC_LITERAL(7, 84, 11), // "jpegRgbCmyk"
QT_MOC_LITERAL(8, 96, 18), // "setScaledSize_data"
QT_MOC_LITERAL(9, 115, 13), // "setScaledSize"
QT_MOC_LITERAL(10, 129, 16), // "setClipRect_data"
QT_MOC_LITERAL(11, 146, 11), // "setClipRect"
QT_MOC_LITERAL(12, 158, 22), // "setScaledClipRect_data"
QT_MOC_LITERAL(13, 181, 17), // "setScaledClipRect"
QT_MOC_LITERAL(14, 199, 16), // "imageFormat_data"
QT_MOC_LITERAL(15, 216, 11), // "imageFormat"
QT_MOC_LITERAL(16, 228, 8), // "blackXPM"
QT_MOC_LITERAL(17, 237, 14), // "transparentXPM"
QT_MOC_LITERAL(18, 252, 22), // "multiWordNamedColorXPM"
QT_MOC_LITERAL(19, 275, 16), // "supportedFormats"
QT_MOC_LITERAL(20, 292, 18), // "supportedMimeTypes"
QT_MOC_LITERAL(21, 311, 19), // "readFromDevice_data"
QT_MOC_LITERAL(22, 331, 14), // "readFromDevice"
QT_MOC_LITERAL(23, 346, 26), // "readFromFileAfterJunk_data"
QT_MOC_LITERAL(24, 373, 21), // "readFromFileAfterJunk"
QT_MOC_LITERAL(25, 395, 19), // "devicePosition_data"
QT_MOC_LITERAL(26, 415, 14), // "devicePosition"
QT_MOC_LITERAL(27, 430, 23), // "setBackgroundColor_data"
QT_MOC_LITERAL(28, 454, 18), // "setBackgroundColor"
QT_MOC_LITERAL(29, 473, 22), // "supportsAnimation_data"
QT_MOC_LITERAL(30, 496, 17), // "supportsAnimation"
QT_MOC_LITERAL(31, 514, 22), // "readFromResources_data"
QT_MOC_LITERAL(32, 537, 17), // "readFromResources"
QT_MOC_LITERAL(33, 555, 19), // "sizeBeforeRead_data"
QT_MOC_LITERAL(34, 575, 14), // "sizeBeforeRead"
QT_MOC_LITERAL(35, 590, 21), // "sizeBeforeFormat_data"
QT_MOC_LITERAL(36, 612, 16), // "sizeBeforeFormat"
QT_MOC_LITERAL(37, 629, 26), // "imageFormatBeforeRead_data"
QT_MOC_LITERAL(38, 656, 21), // "imageFormatBeforeRead"
QT_MOC_LITERAL(39, 678, 14), // "gifHandlerBugs"
QT_MOC_LITERAL(40, 693, 11), // "animatedGif"
QT_MOC_LITERAL(41, 705, 13), // "gifImageCount"
QT_MOC_LITERAL(42, 719, 12), // "gifLoopCount"
QT_MOC_LITERAL(43, 732, 14), // "ppmMaxval_data"
QT_MOC_LITERAL(44, 747, 9), // "ppmMaxval"
QT_MOC_LITERAL(45, 757, 21), // "readCorruptImage_data"
QT_MOC_LITERAL(46, 779, 16), // "readCorruptImage"
QT_MOC_LITERAL(47, 796, 14), // "readCorruptBmp"
QT_MOC_LITERAL(48, 811, 19), // "supportsOption_data"
QT_MOC_LITERAL(49, 831, 14), // "supportsOption"
QT_MOC_LITERAL(50, 846, 21), // "autoDetectImageFormat"
QT_MOC_LITERAL(51, 868, 15), // "fileNameProbing"
QT_MOC_LITERAL(52, 884, 29), // "pixelCompareWithBaseline_data"
QT_MOC_LITERAL(53, 914, 24), // "pixelCompareWithBaseline"
QT_MOC_LITERAL(54, 939, 33), // "task255627_setNullScaledSize_..."
QT_MOC_LITERAL(55, 973, 28), // "task255627_setNullScaledSize"
QT_MOC_LITERAL(56, 1002, 34), // "testIgnoresFormatAndExtension..."
QT_MOC_LITERAL(57, 1037, 29), // "testIgnoresFormatAndExtension"
QT_MOC_LITERAL(58, 1067, 15), // "saveFormat_data"
QT_MOC_LITERAL(59, 1083, 10), // "saveFormat"
QT_MOC_LITERAL(60, 1094, 13), // "readText_data"
QT_MOC_LITERAL(61, 1108, 8), // "readText"
QT_MOC_LITERAL(62, 1117, 18), // "preserveTexts_data"
QT_MOC_LITERAL(63, 1136, 13) // "preserveTexts"

    },
    "tst_QImageReader\0initTestCase\0\0"
    "cleanupTestCase\0getSetCheck\0readImage_data\0"
    "readImage\0jpegRgbCmyk\0setScaledSize_data\0"
    "setScaledSize\0setClipRect_data\0"
    "setClipRect\0setScaledClipRect_data\0"
    "setScaledClipRect\0imageFormat_data\0"
    "imageFormat\0blackXPM\0transparentXPM\0"
    "multiWordNamedColorXPM\0supportedFormats\0"
    "supportedMimeTypes\0readFromDevice_data\0"
    "readFromDevice\0readFromFileAfterJunk_data\0"
    "readFromFileAfterJunk\0devicePosition_data\0"
    "devicePosition\0setBackgroundColor_data\0"
    "setBackgroundColor\0supportsAnimation_data\0"
    "supportsAnimation\0readFromResources_data\0"
    "readFromResources\0sizeBeforeRead_data\0"
    "sizeBeforeRead\0sizeBeforeFormat_data\0"
    "sizeBeforeFormat\0imageFormatBeforeRead_data\0"
    "imageFormatBeforeRead\0gifHandlerBugs\0"
    "animatedGif\0gifImageCount\0gifLoopCount\0"
    "ppmMaxval_data\0ppmMaxval\0readCorruptImage_data\0"
    "readCorruptImage\0readCorruptBmp\0"
    "supportsOption_data\0supportsOption\0"
    "autoDetectImageFormat\0fileNameProbing\0"
    "pixelCompareWithBaseline_data\0"
    "pixelCompareWithBaseline\0"
    "task255627_setNullScaledSize_data\0"
    "task255627_setNullScaledSize\0"
    "testIgnoresFormatAndExtension_data\0"
    "testIgnoresFormatAndExtension\0"
    "saveFormat_data\0saveFormat\0readText_data\0"
    "readText\0preserveTexts_data\0preserveTexts"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QImageReader[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      62,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  324,    2, 0x0a /* Public */,
       3,    0,  325,    2, 0x0a /* Public */,
       4,    0,  326,    2, 0x08 /* Private */,
       5,    0,  327,    2, 0x08 /* Private */,
       6,    0,  328,    2, 0x08 /* Private */,
       7,    0,  329,    2, 0x08 /* Private */,
       8,    0,  330,    2, 0x08 /* Private */,
       9,    0,  331,    2, 0x08 /* Private */,
      10,    0,  332,    2, 0x08 /* Private */,
      11,    0,  333,    2, 0x08 /* Private */,
      12,    0,  334,    2, 0x08 /* Private */,
      13,    0,  335,    2, 0x08 /* Private */,
      14,    0,  336,    2, 0x08 /* Private */,
      15,    0,  337,    2, 0x08 /* Private */,
      16,    0,  338,    2, 0x08 /* Private */,
      17,    0,  339,    2, 0x08 /* Private */,
      18,    0,  340,    2, 0x08 /* Private */,
      19,    0,  341,    2, 0x08 /* Private */,
      20,    0,  342,    2, 0x08 /* Private */,
      21,    0,  343,    2, 0x08 /* Private */,
      22,    0,  344,    2, 0x08 /* Private */,
      23,    0,  345,    2, 0x08 /* Private */,
      24,    0,  346,    2, 0x08 /* Private */,
      25,    0,  347,    2, 0x08 /* Private */,
      26,    0,  348,    2, 0x08 /* Private */,
      27,    0,  349,    2, 0x08 /* Private */,
      28,    0,  350,    2, 0x08 /* Private */,
      29,    0,  351,    2, 0x08 /* Private */,
      30,    0,  352,    2, 0x08 /* Private */,
      31,    0,  353,    2, 0x08 /* Private */,
      32,    0,  354,    2, 0x08 /* Private */,
      33,    0,  355,    2, 0x08 /* Private */,
      34,    0,  356,    2, 0x08 /* Private */,
      35,    0,  357,    2, 0x08 /* Private */,
      36,    0,  358,    2, 0x08 /* Private */,
      37,    0,  359,    2, 0x08 /* Private */,
      38,    0,  360,    2, 0x08 /* Private */,
      39,    0,  361,    2, 0x08 /* Private */,
      40,    0,  362,    2, 0x08 /* Private */,
      41,    0,  363,    2, 0x08 /* Private */,
      42,    0,  364,    2, 0x08 /* Private */,
      43,    0,  365,    2, 0x08 /* Private */,
      44,    0,  366,    2, 0x08 /* Private */,
      45,    0,  367,    2, 0x08 /* Private */,
      46,    0,  368,    2, 0x08 /* Private */,
      47,    0,  369,    2, 0x08 /* Private */,
      48,    0,  370,    2, 0x08 /* Private */,
      49,    0,  371,    2, 0x08 /* Private */,
      50,    0,  372,    2, 0x08 /* Private */,
      51,    0,  373,    2, 0x08 /* Private */,
      52,    0,  374,    2, 0x08 /* Private */,
      53,    0,  375,    2, 0x08 /* Private */,
      54,    0,  376,    2, 0x08 /* Private */,
      55,    0,  377,    2, 0x08 /* Private */,
      56,    0,  378,    2, 0x08 /* Private */,
      57,    0,  379,    2, 0x08 /* Private */,
      58,    0,  380,    2, 0x08 /* Private */,
      59,    0,  381,    2, 0x08 /* Private */,
      60,    0,  382,    2, 0x08 /* Private */,
      61,    0,  383,    2, 0x08 /* Private */,
      62,    0,  384,    2, 0x08 /* Private */,
      63,    0,  385,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QImageReader::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QImageReader *_t = static_cast<tst_QImageReader *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->getSetCheck(); break;
        case 3: _t->readImage_data(); break;
        case 4: _t->readImage(); break;
        case 5: _t->jpegRgbCmyk(); break;
        case 6: _t->setScaledSize_data(); break;
        case 7: _t->setScaledSize(); break;
        case 8: _t->setClipRect_data(); break;
        case 9: _t->setClipRect(); break;
        case 10: _t->setScaledClipRect_data(); break;
        case 11: _t->setScaledClipRect(); break;
        case 12: _t->imageFormat_data(); break;
        case 13: _t->imageFormat(); break;
        case 14: _t->blackXPM(); break;
        case 15: _t->transparentXPM(); break;
        case 16: _t->multiWordNamedColorXPM(); break;
        case 17: _t->supportedFormats(); break;
        case 18: _t->supportedMimeTypes(); break;
        case 19: _t->readFromDevice_data(); break;
        case 20: _t->readFromDevice(); break;
        case 21: _t->readFromFileAfterJunk_data(); break;
        case 22: _t->readFromFileAfterJunk(); break;
        case 23: _t->devicePosition_data(); break;
        case 24: _t->devicePosition(); break;
        case 25: _t->setBackgroundColor_data(); break;
        case 26: _t->setBackgroundColor(); break;
        case 27: _t->supportsAnimation_data(); break;
        case 28: _t->supportsAnimation(); break;
        case 29: _t->readFromResources_data(); break;
        case 30: _t->readFromResources(); break;
        case 31: _t->sizeBeforeRead_data(); break;
        case 32: _t->sizeBeforeRead(); break;
        case 33: _t->sizeBeforeFormat_data(); break;
        case 34: _t->sizeBeforeFormat(); break;
        case 35: _t->imageFormatBeforeRead_data(); break;
        case 36: _t->imageFormatBeforeRead(); break;
        case 37: _t->gifHandlerBugs(); break;
        case 38: _t->animatedGif(); break;
        case 39: _t->gifImageCount(); break;
        case 40: _t->gifLoopCount(); break;
        case 41: _t->ppmMaxval_data(); break;
        case 42: _t->ppmMaxval(); break;
        case 43: _t->readCorruptImage_data(); break;
        case 44: _t->readCorruptImage(); break;
        case 45: _t->readCorruptBmp(); break;
        case 46: _t->supportsOption_data(); break;
        case 47: _t->supportsOption(); break;
        case 48: _t->autoDetectImageFormat(); break;
        case 49: _t->fileNameProbing(); break;
        case 50: _t->pixelCompareWithBaseline_data(); break;
        case 51: _t->pixelCompareWithBaseline(); break;
        case 52: _t->task255627_setNullScaledSize_data(); break;
        case 53: _t->task255627_setNullScaledSize(); break;
        case 54: _t->testIgnoresFormatAndExtension_data(); break;
        case 55: _t->testIgnoresFormatAndExtension(); break;
        case 56: _t->saveFormat_data(); break;
        case 57: _t->saveFormat(); break;
        case 58: _t->readText_data(); break;
        case 59: _t->readText(); break;
        case 60: _t->preserveTexts_data(); break;
        case 61: _t->preserveTexts(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QImageReader::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QImageReader.data,
      qt_meta_data_tst_QImageReader,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QImageReader::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QImageReader::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QImageReader.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QImageReader::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 62)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 62;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 62)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 62;
    }
    return _id;
}
struct qt_meta_stringdata_Server_t {
    QByteArrayData data[7];
    char stringdata0[69];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_Server_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_Server_t qt_meta_stringdata_Server = {
    {
QT_MOC_LITERAL(0, 0, 6), // "Server"
QT_MOC_LITERAL(1, 7, 5), // "ready"
QT_MOC_LITERAL(2, 13, 0), // ""
QT_MOC_LITERAL(3, 14, 7), // "runTest"
QT_MOC_LITERAL(4, 22, 19), // "acceptNewConnection"
QT_MOC_LITERAL(5, 42, 9), // "connected"
QT_MOC_LITERAL(6, 52, 16) // "remoteHostClosed"

    },
    "Server\0ready\0\0runTest\0acceptNewConnection\0"
    "connected\0remoteHostClosed"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_Server[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       5,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   39,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
       3,    0,   40,    2, 0x0a /* Public */,
       4,    0,   41,    2, 0x08 /* Private */,
       5,    0,   42,    2, 0x08 /* Private */,
       6,    0,   43,    2, 0x08 /* Private */,

 // signals: parameters
    QMetaType::Void,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void Server::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        Server *_t = static_cast<Server *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->ready(); break;
        case 1: _t->runTest(); break;
        case 2: _t->acceptNewConnection(); break;
        case 3: _t->connected(); break;
        case 4: _t->remoteHostClosed(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (Server::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&Server::ready)) {
                *result = 0;
                return;
            }
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject Server::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_Server.data,
      qt_meta_data_Server,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *Server::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Server::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_Server.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int Server::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 5)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 5;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 5)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 5;
    }
    return _id;
}

// SIGNAL 0
void Server::ready()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
