/****************************************************************************
** Meta object code from reading C++ file 'tst_qguivariant.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qguivariant.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QGuiVariant_t {
    QByteArrayData data[40];
    char stringdata0[537];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QGuiVariant_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QGuiVariant_t qt_meta_stringdata_tst_QGuiVariant = {
    {
QT_MOC_LITERAL(0, 0, 15), // "tst_QGuiVariant"
QT_MOC_LITERAL(1, 16, 24), // "constructor_invalid_data"
QT_MOC_LITERAL(2, 41, 0), // ""
QT_MOC_LITERAL(3, 42, 19), // "constructor_invalid"
QT_MOC_LITERAL(4, 62, 15), // "canConvert_data"
QT_MOC_LITERAL(5, 78, 10), // "canConvert"
QT_MOC_LITERAL(6, 89, 10), // "toInt_data"
QT_MOC_LITERAL(7, 100, 5), // "toInt"
QT_MOC_LITERAL(8, 106, 11), // "toFont_data"
QT_MOC_LITERAL(9, 118, 6), // "toFont"
QT_MOC_LITERAL(10, 125, 18), // "toKeySequence_data"
QT_MOC_LITERAL(11, 144, 13), // "toKeySequence"
QT_MOC_LITERAL(12, 158, 13), // "toString_data"
QT_MOC_LITERAL(13, 172, 8), // "toString"
QT_MOC_LITERAL(14, 181, 12), // "toColor_data"
QT_MOC_LITERAL(15, 194, 7), // "toColor"
QT_MOC_LITERAL(16, 202, 13), // "toPixmap_data"
QT_MOC_LITERAL(17, 216, 8), // "toPixmap"
QT_MOC_LITERAL(18, 225, 12), // "toImage_data"
QT_MOC_LITERAL(19, 238, 7), // "toImage"
QT_MOC_LITERAL(20, 246, 12), // "toBrush_data"
QT_MOC_LITERAL(21, 259, 7), // "toBrush"
QT_MOC_LITERAL(22, 267, 6), // "matrix"
QT_MOC_LITERAL(23, 274, 9), // "transform"
QT_MOC_LITERAL(24, 284, 9), // "matrix4x4"
QT_MOC_LITERAL(25, 294, 8), // "vector2D"
QT_MOC_LITERAL(26, 303, 8), // "vector3D"
QT_MOC_LITERAL(27, 312, 8), // "vector4D"
QT_MOC_LITERAL(28, 321, 10), // "quaternion"
QT_MOC_LITERAL(29, 332, 30), // "writeToReadFromDataStream_data"
QT_MOC_LITERAL(30, 363, 25), // "writeToReadFromDataStream"
QT_MOC_LITERAL(31, 389, 28), // "writeToReadFromOldDataStream"
QT_MOC_LITERAL(32, 418, 12), // "colorInteger"
QT_MOC_LITERAL(33, 431, 13), // "invalidQColor"
QT_MOC_LITERAL(34, 445, 11), // "validQColor"
QT_MOC_LITERAL(35, 457, 16), // "debugStream_data"
QT_MOC_LITERAL(36, 474, 11), // "debugStream"
QT_MOC_LITERAL(37, 486, 20), // "implicitConstruction"
QT_MOC_LITERAL(38, 507, 16), // "guiVariantAtExit"
QT_MOC_LITERAL(39, 524, 12) // "iconEquality"

    },
    "tst_QGuiVariant\0constructor_invalid_data\0"
    "\0constructor_invalid\0canConvert_data\0"
    "canConvert\0toInt_data\0toInt\0toFont_data\0"
    "toFont\0toKeySequence_data\0toKeySequence\0"
    "toString_data\0toString\0toColor_data\0"
    "toColor\0toPixmap_data\0toPixmap\0"
    "toImage_data\0toImage\0toBrush_data\0"
    "toBrush\0matrix\0transform\0matrix4x4\0"
    "vector2D\0vector3D\0vector4D\0quaternion\0"
    "writeToReadFromDataStream_data\0"
    "writeToReadFromDataStream\0"
    "writeToReadFromOldDataStream\0colorInteger\0"
    "invalidQColor\0validQColor\0debugStream_data\0"
    "debugStream\0implicitConstruction\0"
    "guiVariantAtExit\0iconEquality"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QGuiVariant[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      38,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  204,    2, 0x08 /* Private */,
       3,    0,  205,    2, 0x08 /* Private */,
       4,    0,  206,    2, 0x08 /* Private */,
       5,    0,  207,    2, 0x08 /* Private */,
       6,    0,  208,    2, 0x08 /* Private */,
       7,    0,  209,    2, 0x08 /* Private */,
       8,    0,  210,    2, 0x08 /* Private */,
       9,    0,  211,    2, 0x08 /* Private */,
      10,    0,  212,    2, 0x08 /* Private */,
      11,    0,  213,    2, 0x08 /* Private */,
      12,    0,  214,    2, 0x08 /* Private */,
      13,    0,  215,    2, 0x08 /* Private */,
      14,    0,  216,    2, 0x08 /* Private */,
      15,    0,  217,    2, 0x08 /* Private */,
      16,    0,  218,    2, 0x08 /* Private */,
      17,    0,  219,    2, 0x08 /* Private */,
      18,    0,  220,    2, 0x08 /* Private */,
      19,    0,  221,    2, 0x08 /* Private */,
      20,    0,  222,    2, 0x08 /* Private */,
      21,    0,  223,    2, 0x08 /* Private */,
      22,    0,  224,    2, 0x08 /* Private */,
      23,    0,  225,    2, 0x08 /* Private */,
      24,    0,  226,    2, 0x08 /* Private */,
      25,    0,  227,    2, 0x08 /* Private */,
      26,    0,  228,    2, 0x08 /* Private */,
      27,    0,  229,    2, 0x08 /* Private */,
      28,    0,  230,    2, 0x08 /* Private */,
      29,    0,  231,    2, 0x08 /* Private */,
      30,    0,  232,    2, 0x08 /* Private */,
      31,    0,  233,    2, 0x08 /* Private */,
      32,    0,  234,    2, 0x08 /* Private */,
      33,    0,  235,    2, 0x08 /* Private */,
      34,    0,  236,    2, 0x08 /* Private */,
      35,    0,  237,    2, 0x08 /* Private */,
      36,    0,  238,    2, 0x08 /* Private */,
      37,    0,  239,    2, 0x08 /* Private */,
      38,    0,  240,    2, 0x08 /* Private */,
      39,    0,  241,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QGuiVariant::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QGuiVariant *_t = static_cast<tst_QGuiVariant *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->constructor_invalid_data(); break;
        case 1: _t->constructor_invalid(); break;
        case 2: _t->canConvert_data(); break;
        case 3: _t->canConvert(); break;
        case 4: _t->toInt_data(); break;
        case 5: _t->toInt(); break;
        case 6: _t->toFont_data(); break;
        case 7: _t->toFont(); break;
        case 8: _t->toKeySequence_data(); break;
        case 9: _t->toKeySequence(); break;
        case 10: _t->toString_data(); break;
        case 11: _t->toString(); break;
        case 12: _t->toColor_data(); break;
        case 13: _t->toColor(); break;
        case 14: _t->toPixmap_data(); break;
        case 15: _t->toPixmap(); break;
        case 16: _t->toImage_data(); break;
        case 17: _t->toImage(); break;
        case 18: _t->toBrush_data(); break;
        case 19: _t->toBrush(); break;
        case 20: _t->matrix(); break;
        case 21: _t->transform(); break;
        case 22: _t->matrix4x4(); break;
        case 23: _t->vector2D(); break;
        case 24: _t->vector3D(); break;
        case 25: _t->vector4D(); break;
        case 26: _t->quaternion(); break;
        case 27: _t->writeToReadFromDataStream_data(); break;
        case 28: _t->writeToReadFromDataStream(); break;
        case 29: _t->writeToReadFromOldDataStream(); break;
        case 30: _t->colorInteger(); break;
        case 31: _t->invalidQColor(); break;
        case 32: _t->validQColor(); break;
        case 33: _t->debugStream_data(); break;
        case 34: _t->debugStream(); break;
        case 35: _t->implicitConstruction(); break;
        case 36: _t->guiVariantAtExit(); break;
        case 37: _t->iconEquality(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QGuiVariant::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QGuiVariant.data,
      qt_meta_data_tst_QGuiVariant,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QGuiVariant::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QGuiVariant::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QGuiVariant.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QGuiVariant::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 38)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 38;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 38)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 38;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
