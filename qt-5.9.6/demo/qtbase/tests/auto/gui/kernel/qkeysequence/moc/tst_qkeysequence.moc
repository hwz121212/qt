/****************************************************************************
** Meta object code from reading C++ file 'tst_qkeysequence.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qkeysequence.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QKeySequence_t {
    QByteArrayData data[35];
    char stringdata0[546];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QKeySequence_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QKeySequence_t qt_meta_stringdata_tst_QKeySequence = {
    {
QT_MOC_LITERAL(0, 0, 16), // "tst_QKeySequence"
QT_MOC_LITERAL(1, 17, 4), // "swap"
QT_MOC_LITERAL(2, 22, 0), // ""
QT_MOC_LITERAL(3, 23, 20), // "operatorQString_data"
QT_MOC_LITERAL(4, 44, 15), // "operatorQString"
QT_MOC_LITERAL(5, 60, 24), // "compareConstructors_data"
QT_MOC_LITERAL(6, 85, 19), // "compareConstructors"
QT_MOC_LITERAL(7, 105, 25), // "symetricConstructors_data"
QT_MOC_LITERAL(8, 131, 20), // "symetricConstructors"
QT_MOC_LITERAL(9, 152, 18), // "checkMultipleNames"
QT_MOC_LITERAL(10, 171, 18), // "checkMultipleCodes"
QT_MOC_LITERAL(11, 190, 13), // "mnemonic_data"
QT_MOC_LITERAL(12, 204, 8), // "mnemonic"
QT_MOC_LITERAL(13, 213, 13), // "toString_data"
QT_MOC_LITERAL(14, 227, 8), // "toString"
QT_MOC_LITERAL(15, 236, 24), // "toStringFromKeycode_data"
QT_MOC_LITERAL(16, 261, 19), // "toStringFromKeycode"
QT_MOC_LITERAL(17, 281, 20), // "streamOperators_data"
QT_MOC_LITERAL(18, 302, 15), // "streamOperators"
QT_MOC_LITERAL(19, 318, 16), // "parseString_data"
QT_MOC_LITERAL(20, 335, 11), // "parseString"
QT_MOC_LITERAL(21, 347, 15), // "fromString_data"
QT_MOC_LITERAL(22, 363, 10), // "fromString"
QT_MOC_LITERAL(23, 374, 17), // "listToString_data"
QT_MOC_LITERAL(24, 392, 12), // "listToString"
QT_MOC_LITERAL(25, 405, 19), // "listFromString_data"
QT_MOC_LITERAL(26, 425, 14), // "listFromString"
QT_MOC_LITERAL(27, 440, 17), // "standardKeys_data"
QT_MOC_LITERAL(28, 458, 12), // "standardKeys"
QT_MOC_LITERAL(29, 471, 11), // "keyBindings"
QT_MOC_LITERAL(30, 483, 15), // "translated_data"
QT_MOC_LITERAL(31, 499, 10), // "translated"
QT_MOC_LITERAL(32, 510, 13), // "i18nKeys_data"
QT_MOC_LITERAL(33, 524, 8), // "i18nKeys"
QT_MOC_LITERAL(34, 533, 12) // "initTestCase"

    },
    "tst_QKeySequence\0swap\0\0operatorQString_data\0"
    "operatorQString\0compareConstructors_data\0"
    "compareConstructors\0symetricConstructors_data\0"
    "symetricConstructors\0checkMultipleNames\0"
    "checkMultipleCodes\0mnemonic_data\0"
    "mnemonic\0toString_data\0toString\0"
    "toStringFromKeycode_data\0toStringFromKeycode\0"
    "streamOperators_data\0streamOperators\0"
    "parseString_data\0parseString\0"
    "fromString_data\0fromString\0listToString_data\0"
    "listToString\0listFromString_data\0"
    "listFromString\0standardKeys_data\0"
    "standardKeys\0keyBindings\0translated_data\0"
    "translated\0i18nKeys_data\0i18nKeys\0"
    "initTestCase"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QKeySequence[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      33,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  179,    2, 0x08 /* Private */,
       3,    0,  180,    2, 0x08 /* Private */,
       4,    0,  181,    2, 0x08 /* Private */,
       5,    0,  182,    2, 0x08 /* Private */,
       6,    0,  183,    2, 0x08 /* Private */,
       7,    0,  184,    2, 0x08 /* Private */,
       8,    0,  185,    2, 0x08 /* Private */,
       9,    0,  186,    2, 0x08 /* Private */,
      10,    0,  187,    2, 0x08 /* Private */,
      11,    0,  188,    2, 0x08 /* Private */,
      12,    0,  189,    2, 0x08 /* Private */,
      13,    0,  190,    2, 0x08 /* Private */,
      14,    0,  191,    2, 0x08 /* Private */,
      15,    0,  192,    2, 0x08 /* Private */,
      16,    0,  193,    2, 0x08 /* Private */,
      17,    0,  194,    2, 0x08 /* Private */,
      18,    0,  195,    2, 0x08 /* Private */,
      19,    0,  196,    2, 0x08 /* Private */,
      20,    0,  197,    2, 0x08 /* Private */,
      21,    0,  198,    2, 0x08 /* Private */,
      22,    0,  199,    2, 0x08 /* Private */,
      23,    0,  200,    2, 0x08 /* Private */,
      24,    0,  201,    2, 0x08 /* Private */,
      25,    0,  202,    2, 0x08 /* Private */,
      26,    0,  203,    2, 0x08 /* Private */,
      27,    0,  204,    2, 0x08 /* Private */,
      28,    0,  205,    2, 0x08 /* Private */,
      29,    0,  206,    2, 0x08 /* Private */,
      30,    0,  207,    2, 0x08 /* Private */,
      31,    0,  208,    2, 0x08 /* Private */,
      32,    0,  209,    2, 0x08 /* Private */,
      33,    0,  210,    2, 0x08 /* Private */,
      34,    0,  211,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QKeySequence::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QKeySequence *_t = static_cast<tst_QKeySequence *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->swap(); break;
        case 1: _t->operatorQString_data(); break;
        case 2: _t->operatorQString(); break;
        case 3: _t->compareConstructors_data(); break;
        case 4: _t->compareConstructors(); break;
        case 5: _t->symetricConstructors_data(); break;
        case 6: _t->symetricConstructors(); break;
        case 7: _t->checkMultipleNames(); break;
        case 8: _t->checkMultipleCodes(); break;
        case 9: _t->mnemonic_data(); break;
        case 10: _t->mnemonic(); break;
        case 11: _t->toString_data(); break;
        case 12: _t->toString(); break;
        case 13: _t->toStringFromKeycode_data(); break;
        case 14: _t->toStringFromKeycode(); break;
        case 15: _t->streamOperators_data(); break;
        case 16: _t->streamOperators(); break;
        case 17: _t->parseString_data(); break;
        case 18: _t->parseString(); break;
        case 19: _t->fromString_data(); break;
        case 20: _t->fromString(); break;
        case 21: _t->listToString_data(); break;
        case 22: _t->listToString(); break;
        case 23: _t->listFromString_data(); break;
        case 24: _t->listFromString(); break;
        case 25: _t->standardKeys_data(); break;
        case 26: _t->standardKeys(); break;
        case 27: _t->keyBindings(); break;
        case 28: _t->translated_data(); break;
        case 29: _t->translated(); break;
        case 30: _t->i18nKeys_data(); break;
        case 31: _t->i18nKeys(); break;
        case 32: _t->initTestCase(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QKeySequence::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QKeySequence.data,
      qt_meta_data_tst_QKeySequence,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QKeySequence::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QKeySequence::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QKeySequence.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QKeySequence::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 33)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 33;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 33)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 33;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
