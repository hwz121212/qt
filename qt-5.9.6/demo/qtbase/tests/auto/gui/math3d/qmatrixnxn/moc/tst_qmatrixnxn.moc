/****************************************************************************
** Meta object code from reading C++ file 'tst_qmatrixnxn.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qmatrixnxn.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QMatrixNxN_t {
    QByteArrayData data[96];
    char stringdata0[1322];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QMatrixNxN_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QMatrixNxN_t qt_meta_stringdata_tst_QMatrixNxN = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QMatrixNxN"
QT_MOC_LITERAL(1, 15, 9), // "create2x2"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 9), // "create3x3"
QT_MOC_LITERAL(4, 36, 9), // "create4x4"
QT_MOC_LITERAL(5, 46, 9), // "create4x3"
QT_MOC_LITERAL(6, 56, 13), // "isIdentity2x2"
QT_MOC_LITERAL(7, 70, 13), // "isIdentity3x3"
QT_MOC_LITERAL(8, 84, 13), // "isIdentity4x4"
QT_MOC_LITERAL(9, 98, 13), // "isIdentity4x3"
QT_MOC_LITERAL(10, 112, 10), // "compare2x2"
QT_MOC_LITERAL(11, 123, 10), // "compare3x3"
QT_MOC_LITERAL(12, 134, 10), // "compare4x4"
QT_MOC_LITERAL(13, 145, 10), // "compare4x3"
QT_MOC_LITERAL(14, 156, 13), // "transposed2x2"
QT_MOC_LITERAL(15, 170, 13), // "transposed3x3"
QT_MOC_LITERAL(16, 184, 13), // "transposed4x4"
QT_MOC_LITERAL(17, 198, 13), // "transposed4x3"
QT_MOC_LITERAL(18, 212, 11), // "add2x2_data"
QT_MOC_LITERAL(19, 224, 6), // "add2x2"
QT_MOC_LITERAL(20, 231, 11), // "add3x3_data"
QT_MOC_LITERAL(21, 243, 6), // "add3x3"
QT_MOC_LITERAL(22, 250, 11), // "add4x4_data"
QT_MOC_LITERAL(23, 262, 6), // "add4x4"
QT_MOC_LITERAL(24, 269, 11), // "add4x3_data"
QT_MOC_LITERAL(25, 281, 6), // "add4x3"
QT_MOC_LITERAL(26, 288, 16), // "subtract2x2_data"
QT_MOC_LITERAL(27, 305, 11), // "subtract2x2"
QT_MOC_LITERAL(28, 317, 16), // "subtract3x3_data"
QT_MOC_LITERAL(29, 334, 11), // "subtract3x3"
QT_MOC_LITERAL(30, 346, 16), // "subtract4x4_data"
QT_MOC_LITERAL(31, 363, 11), // "subtract4x4"
QT_MOC_LITERAL(32, 375, 16), // "subtract4x3_data"
QT_MOC_LITERAL(33, 392, 11), // "subtract4x3"
QT_MOC_LITERAL(34, 404, 16), // "multiply2x2_data"
QT_MOC_LITERAL(35, 421, 11), // "multiply2x2"
QT_MOC_LITERAL(36, 433, 16), // "multiply3x3_data"
QT_MOC_LITERAL(37, 450, 11), // "multiply3x3"
QT_MOC_LITERAL(38, 462, 16), // "multiply4x4_data"
QT_MOC_LITERAL(39, 479, 11), // "multiply4x4"
QT_MOC_LITERAL(40, 491, 16), // "multiply4x3_data"
QT_MOC_LITERAL(41, 508, 11), // "multiply4x3"
QT_MOC_LITERAL(42, 520, 22), // "multiplyFactor2x2_data"
QT_MOC_LITERAL(43, 543, 17), // "multiplyFactor2x2"
QT_MOC_LITERAL(44, 561, 22), // "multiplyFactor3x3_data"
QT_MOC_LITERAL(45, 584, 17), // "multiplyFactor3x3"
QT_MOC_LITERAL(46, 602, 22), // "multiplyFactor4x4_data"
QT_MOC_LITERAL(47, 625, 17), // "multiplyFactor4x4"
QT_MOC_LITERAL(48, 643, 22), // "multiplyFactor4x3_data"
QT_MOC_LITERAL(49, 666, 17), // "multiplyFactor4x3"
QT_MOC_LITERAL(50, 684, 20), // "divideFactor2x2_data"
QT_MOC_LITERAL(51, 705, 15), // "divideFactor2x2"
QT_MOC_LITERAL(52, 721, 20), // "divideFactor3x3_data"
QT_MOC_LITERAL(53, 742, 15), // "divideFactor3x3"
QT_MOC_LITERAL(54, 758, 20), // "divideFactor4x4_data"
QT_MOC_LITERAL(55, 779, 15), // "divideFactor4x4"
QT_MOC_LITERAL(56, 795, 20), // "divideFactor4x3_data"
QT_MOC_LITERAL(57, 816, 15), // "divideFactor4x3"
QT_MOC_LITERAL(58, 832, 14), // "negate2x2_data"
QT_MOC_LITERAL(59, 847, 9), // "negate2x2"
QT_MOC_LITERAL(60, 857, 14), // "negate3x3_data"
QT_MOC_LITERAL(61, 872, 9), // "negate3x3"
QT_MOC_LITERAL(62, 882, 14), // "negate4x4_data"
QT_MOC_LITERAL(63, 897, 9), // "negate4x4"
QT_MOC_LITERAL(64, 907, 14), // "negate4x3_data"
QT_MOC_LITERAL(65, 922, 9), // "negate4x3"
QT_MOC_LITERAL(66, 932, 16), // "inverted4x4_data"
QT_MOC_LITERAL(67, 949, 11), // "inverted4x4"
QT_MOC_LITERAL(68, 961, 21), // "orthonormalInverse4x4"
QT_MOC_LITERAL(69, 983, 13), // "scale4x4_data"
QT_MOC_LITERAL(70, 997, 8), // "scale4x4"
QT_MOC_LITERAL(71, 1006, 17), // "translate4x4_data"
QT_MOC_LITERAL(72, 1024, 12), // "translate4x4"
QT_MOC_LITERAL(73, 1037, 14), // "rotate4x4_data"
QT_MOC_LITERAL(74, 1052, 9), // "rotate4x4"
QT_MOC_LITERAL(75, 1062, 17), // "normalMatrix_data"
QT_MOC_LITERAL(76, 1080, 12), // "normalMatrix"
QT_MOC_LITERAL(77, 1093, 19), // "optimizedTransforms"
QT_MOC_LITERAL(78, 1113, 5), // "ortho"
QT_MOC_LITERAL(79, 1119, 7), // "frustum"
QT_MOC_LITERAL(80, 1127, 11), // "perspective"
QT_MOC_LITERAL(81, 1139, 8), // "viewport"
QT_MOC_LITERAL(82, 1148, 15), // "flipCoordinates"
QT_MOC_LITERAL(83, 1164, 14), // "convertGeneric"
QT_MOC_LITERAL(84, 1179, 13), // "optimize_data"
QT_MOC_LITERAL(85, 1193, 8), // "optimize"
QT_MOC_LITERAL(86, 1202, 14), // "columnsAndRows"
QT_MOC_LITERAL(87, 1217, 14), // "convertQMatrix"
QT_MOC_LITERAL(88, 1232, 17), // "convertQTransform"
QT_MOC_LITERAL(89, 1250, 4), // "fill"
QT_MOC_LITERAL(90, 1255, 12), // "mapRect_data"
QT_MOC_LITERAL(91, 1268, 7), // "mapRect"
QT_MOC_LITERAL(92, 1276, 14), // "mapVector_data"
QT_MOC_LITERAL(93, 1291, 9), // "mapVector"
QT_MOC_LITERAL(94, 1301, 10), // "properties"
QT_MOC_LITERAL(95, 1312, 9) // "metaTypes"

    },
    "tst_QMatrixNxN\0create2x2\0\0create3x3\0"
    "create4x4\0create4x3\0isIdentity2x2\0"
    "isIdentity3x3\0isIdentity4x4\0isIdentity4x3\0"
    "compare2x2\0compare3x3\0compare4x4\0"
    "compare4x3\0transposed2x2\0transposed3x3\0"
    "transposed4x4\0transposed4x3\0add2x2_data\0"
    "add2x2\0add3x3_data\0add3x3\0add4x4_data\0"
    "add4x4\0add4x3_data\0add4x3\0subtract2x2_data\0"
    "subtract2x2\0subtract3x3_data\0subtract3x3\0"
    "subtract4x4_data\0subtract4x4\0"
    "subtract4x3_data\0subtract4x3\0"
    "multiply2x2_data\0multiply2x2\0"
    "multiply3x3_data\0multiply3x3\0"
    "multiply4x4_data\0multiply4x4\0"
    "multiply4x3_data\0multiply4x3\0"
    "multiplyFactor2x2_data\0multiplyFactor2x2\0"
    "multiplyFactor3x3_data\0multiplyFactor3x3\0"
    "multiplyFactor4x4_data\0multiplyFactor4x4\0"
    "multiplyFactor4x3_data\0multiplyFactor4x3\0"
    "divideFactor2x2_data\0divideFactor2x2\0"
    "divideFactor3x3_data\0divideFactor3x3\0"
    "divideFactor4x4_data\0divideFactor4x4\0"
    "divideFactor4x3_data\0divideFactor4x3\0"
    "negate2x2_data\0negate2x2\0negate3x3_data\0"
    "negate3x3\0negate4x4_data\0negate4x4\0"
    "negate4x3_data\0negate4x3\0inverted4x4_data\0"
    "inverted4x4\0orthonormalInverse4x4\0"
    "scale4x4_data\0scale4x4\0translate4x4_data\0"
    "translate4x4\0rotate4x4_data\0rotate4x4\0"
    "normalMatrix_data\0normalMatrix\0"
    "optimizedTransforms\0ortho\0frustum\0"
    "perspective\0viewport\0flipCoordinates\0"
    "convertGeneric\0optimize_data\0optimize\0"
    "columnsAndRows\0convertQMatrix\0"
    "convertQTransform\0fill\0mapRect_data\0"
    "mapRect\0mapVector_data\0mapVector\0"
    "properties\0metaTypes"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QMatrixNxN[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      94,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  484,    2, 0x08 /* Private */,
       3,    0,  485,    2, 0x08 /* Private */,
       4,    0,  486,    2, 0x08 /* Private */,
       5,    0,  487,    2, 0x08 /* Private */,
       6,    0,  488,    2, 0x08 /* Private */,
       7,    0,  489,    2, 0x08 /* Private */,
       8,    0,  490,    2, 0x08 /* Private */,
       9,    0,  491,    2, 0x08 /* Private */,
      10,    0,  492,    2, 0x08 /* Private */,
      11,    0,  493,    2, 0x08 /* Private */,
      12,    0,  494,    2, 0x08 /* Private */,
      13,    0,  495,    2, 0x08 /* Private */,
      14,    0,  496,    2, 0x08 /* Private */,
      15,    0,  497,    2, 0x08 /* Private */,
      16,    0,  498,    2, 0x08 /* Private */,
      17,    0,  499,    2, 0x08 /* Private */,
      18,    0,  500,    2, 0x08 /* Private */,
      19,    0,  501,    2, 0x08 /* Private */,
      20,    0,  502,    2, 0x08 /* Private */,
      21,    0,  503,    2, 0x08 /* Private */,
      22,    0,  504,    2, 0x08 /* Private */,
      23,    0,  505,    2, 0x08 /* Private */,
      24,    0,  506,    2, 0x08 /* Private */,
      25,    0,  507,    2, 0x08 /* Private */,
      26,    0,  508,    2, 0x08 /* Private */,
      27,    0,  509,    2, 0x08 /* Private */,
      28,    0,  510,    2, 0x08 /* Private */,
      29,    0,  511,    2, 0x08 /* Private */,
      30,    0,  512,    2, 0x08 /* Private */,
      31,    0,  513,    2, 0x08 /* Private */,
      32,    0,  514,    2, 0x08 /* Private */,
      33,    0,  515,    2, 0x08 /* Private */,
      34,    0,  516,    2, 0x08 /* Private */,
      35,    0,  517,    2, 0x08 /* Private */,
      36,    0,  518,    2, 0x08 /* Private */,
      37,    0,  519,    2, 0x08 /* Private */,
      38,    0,  520,    2, 0x08 /* Private */,
      39,    0,  521,    2, 0x08 /* Private */,
      40,    0,  522,    2, 0x08 /* Private */,
      41,    0,  523,    2, 0x08 /* Private */,
      42,    0,  524,    2, 0x08 /* Private */,
      43,    0,  525,    2, 0x08 /* Private */,
      44,    0,  526,    2, 0x08 /* Private */,
      45,    0,  527,    2, 0x08 /* Private */,
      46,    0,  528,    2, 0x08 /* Private */,
      47,    0,  529,    2, 0x08 /* Private */,
      48,    0,  530,    2, 0x08 /* Private */,
      49,    0,  531,    2, 0x08 /* Private */,
      50,    0,  532,    2, 0x08 /* Private */,
      51,    0,  533,    2, 0x08 /* Private */,
      52,    0,  534,    2, 0x08 /* Private */,
      53,    0,  535,    2, 0x08 /* Private */,
      54,    0,  536,    2, 0x08 /* Private */,
      55,    0,  537,    2, 0x08 /* Private */,
      56,    0,  538,    2, 0x08 /* Private */,
      57,    0,  539,    2, 0x08 /* Private */,
      58,    0,  540,    2, 0x08 /* Private */,
      59,    0,  541,    2, 0x08 /* Private */,
      60,    0,  542,    2, 0x08 /* Private */,
      61,    0,  543,    2, 0x08 /* Private */,
      62,    0,  544,    2, 0x08 /* Private */,
      63,    0,  545,    2, 0x08 /* Private */,
      64,    0,  546,    2, 0x08 /* Private */,
      65,    0,  547,    2, 0x08 /* Private */,
      66,    0,  548,    2, 0x08 /* Private */,
      67,    0,  549,    2, 0x08 /* Private */,
      68,    0,  550,    2, 0x08 /* Private */,
      69,    0,  551,    2, 0x08 /* Private */,
      70,    0,  552,    2, 0x08 /* Private */,
      71,    0,  553,    2, 0x08 /* Private */,
      72,    0,  554,    2, 0x08 /* Private */,
      73,    0,  555,    2, 0x08 /* Private */,
      74,    0,  556,    2, 0x08 /* Private */,
      75,    0,  557,    2, 0x08 /* Private */,
      76,    0,  558,    2, 0x08 /* Private */,
      77,    0,  559,    2, 0x08 /* Private */,
      78,    0,  560,    2, 0x08 /* Private */,
      79,    0,  561,    2, 0x08 /* Private */,
      80,    0,  562,    2, 0x08 /* Private */,
      81,    0,  563,    2, 0x08 /* Private */,
      82,    0,  564,    2, 0x08 /* Private */,
      83,    0,  565,    2, 0x08 /* Private */,
      84,    0,  566,    2, 0x08 /* Private */,
      85,    0,  567,    2, 0x08 /* Private */,
      86,    0,  568,    2, 0x08 /* Private */,
      87,    0,  569,    2, 0x08 /* Private */,
      88,    0,  570,    2, 0x08 /* Private */,
      89,    0,  571,    2, 0x08 /* Private */,
      90,    0,  572,    2, 0x08 /* Private */,
      91,    0,  573,    2, 0x08 /* Private */,
      92,    0,  574,    2, 0x08 /* Private */,
      93,    0,  575,    2, 0x08 /* Private */,
      94,    0,  576,    2, 0x08 /* Private */,
      95,    0,  577,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QMatrixNxN::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QMatrixNxN *_t = static_cast<tst_QMatrixNxN *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->create2x2(); break;
        case 1: _t->create3x3(); break;
        case 2: _t->create4x4(); break;
        case 3: _t->create4x3(); break;
        case 4: _t->isIdentity2x2(); break;
        case 5: _t->isIdentity3x3(); break;
        case 6: _t->isIdentity4x4(); break;
        case 7: _t->isIdentity4x3(); break;
        case 8: _t->compare2x2(); break;
        case 9: _t->compare3x3(); break;
        case 10: _t->compare4x4(); break;
        case 11: _t->compare4x3(); break;
        case 12: _t->transposed2x2(); break;
        case 13: _t->transposed3x3(); break;
        case 14: _t->transposed4x4(); break;
        case 15: _t->transposed4x3(); break;
        case 16: _t->add2x2_data(); break;
        case 17: _t->add2x2(); break;
        case 18: _t->add3x3_data(); break;
        case 19: _t->add3x3(); break;
        case 20: _t->add4x4_data(); break;
        case 21: _t->add4x4(); break;
        case 22: _t->add4x3_data(); break;
        case 23: _t->add4x3(); break;
        case 24: _t->subtract2x2_data(); break;
        case 25: _t->subtract2x2(); break;
        case 26: _t->subtract3x3_data(); break;
        case 27: _t->subtract3x3(); break;
        case 28: _t->subtract4x4_data(); break;
        case 29: _t->subtract4x4(); break;
        case 30: _t->subtract4x3_data(); break;
        case 31: _t->subtract4x3(); break;
        case 32: _t->multiply2x2_data(); break;
        case 33: _t->multiply2x2(); break;
        case 34: _t->multiply3x3_data(); break;
        case 35: _t->multiply3x3(); break;
        case 36: _t->multiply4x4_data(); break;
        case 37: _t->multiply4x4(); break;
        case 38: _t->multiply4x3_data(); break;
        case 39: _t->multiply4x3(); break;
        case 40: _t->multiplyFactor2x2_data(); break;
        case 41: _t->multiplyFactor2x2(); break;
        case 42: _t->multiplyFactor3x3_data(); break;
        case 43: _t->multiplyFactor3x3(); break;
        case 44: _t->multiplyFactor4x4_data(); break;
        case 45: _t->multiplyFactor4x4(); break;
        case 46: _t->multiplyFactor4x3_data(); break;
        case 47: _t->multiplyFactor4x3(); break;
        case 48: _t->divideFactor2x2_data(); break;
        case 49: _t->divideFactor2x2(); break;
        case 50: _t->divideFactor3x3_data(); break;
        case 51: _t->divideFactor3x3(); break;
        case 52: _t->divideFactor4x4_data(); break;
        case 53: _t->divideFactor4x4(); break;
        case 54: _t->divideFactor4x3_data(); break;
        case 55: _t->divideFactor4x3(); break;
        case 56: _t->negate2x2_data(); break;
        case 57: _t->negate2x2(); break;
        case 58: _t->negate3x3_data(); break;
        case 59: _t->negate3x3(); break;
        case 60: _t->negate4x4_data(); break;
        case 61: _t->negate4x4(); break;
        case 62: _t->negate4x3_data(); break;
        case 63: _t->negate4x3(); break;
        case 64: _t->inverted4x4_data(); break;
        case 65: _t->inverted4x4(); break;
        case 66: _t->orthonormalInverse4x4(); break;
        case 67: _t->scale4x4_data(); break;
        case 68: _t->scale4x4(); break;
        case 69: _t->translate4x4_data(); break;
        case 70: _t->translate4x4(); break;
        case 71: _t->rotate4x4_data(); break;
        case 72: _t->rotate4x4(); break;
        case 73: _t->normalMatrix_data(); break;
        case 74: _t->normalMatrix(); break;
        case 75: _t->optimizedTransforms(); break;
        case 76: _t->ortho(); break;
        case 77: _t->frustum(); break;
        case 78: _t->perspective(); break;
        case 79: _t->viewport(); break;
        case 80: _t->flipCoordinates(); break;
        case 81: _t->convertGeneric(); break;
        case 82: _t->optimize_data(); break;
        case 83: _t->optimize(); break;
        case 84: _t->columnsAndRows(); break;
        case 85: _t->convertQMatrix(); break;
        case 86: _t->convertQTransform(); break;
        case 87: _t->fill(); break;
        case 88: _t->mapRect_data(); break;
        case 89: _t->mapRect(); break;
        case 90: _t->mapVector_data(); break;
        case 91: _t->mapVector(); break;
        case 92: _t->properties(); break;
        case 93: _t->metaTypes(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QMatrixNxN::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QMatrixNxN.data,
      qt_meta_data_tst_QMatrixNxN,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QMatrixNxN::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QMatrixNxN::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QMatrixNxN.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QMatrixNxN::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 94)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 94;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 94)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 94;
    }
    return _id;
}
struct qt_meta_stringdata_tst_QMatrixNxN4x4Properties_t {
    QByteArrayData data[2];
    char stringdata0[35];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QMatrixNxN4x4Properties_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QMatrixNxN4x4Properties_t qt_meta_stringdata_tst_QMatrixNxN4x4Properties = {
    {
QT_MOC_LITERAL(0, 0, 27), // "tst_QMatrixNxN4x4Properties"
QT_MOC_LITERAL(1, 28, 6) // "matrix"

    },
    "tst_QMatrixNxN4x4Properties\0matrix"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QMatrixNxN4x4Properties[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::QMatrix4x4, 0x00095103,

       0        // eod
};

void tst_QMatrixNxN4x4Properties::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        tst_QMatrixNxN4x4Properties *_t = static_cast<tst_QMatrixNxN4x4Properties *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QMatrix4x4*>(_v) = _t->matrix(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        tst_QMatrixNxN4x4Properties *_t = static_cast<tst_QMatrixNxN4x4Properties *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setMatrix(*reinterpret_cast< QMatrix4x4*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject tst_QMatrixNxN4x4Properties::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QMatrixNxN4x4Properties.data,
      qt_meta_data_tst_QMatrixNxN4x4Properties,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QMatrixNxN4x4Properties::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QMatrixNxN4x4Properties::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QMatrixNxN4x4Properties.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QMatrixNxN4x4Properties::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
   if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
