/****************************************************************************
** Meta object code from reading C++ file 'tst_qurl.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qurl.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QUrl_t {
    QByteArrayData data[136];
    char stringdata0[2214];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QUrl_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QUrl_t qt_meta_stringdata_tst_QUrl = {
    {
QT_MOC_LITERAL(0, 0, 8), // "tst_QUrl"
QT_MOC_LITERAL(1, 9, 12), // "initTestCase"
QT_MOC_LITERAL(2, 22, 0), // ""
QT_MOC_LITERAL(3, 23, 18), // "effectiveTLDs_data"
QT_MOC_LITERAL(4, 42, 13), // "effectiveTLDs"
QT_MOC_LITERAL(5, 56, 11), // "getSetCheck"
QT_MOC_LITERAL(6, 68, 12), // "constructing"
QT_MOC_LITERAL(7, 81, 10), // "hashInPath"
QT_MOC_LITERAL(8, 92, 3), // "unc"
QT_MOC_LITERAL(9, 96, 10), // "assignment"
QT_MOC_LITERAL(10, 107, 10), // "comparison"
QT_MOC_LITERAL(11, 118, 16), // "comparison2_data"
QT_MOC_LITERAL(12, 135, 11), // "comparison2"
QT_MOC_LITERAL(13, 147, 7), // "copying"
QT_MOC_LITERAL(14, 155, 6), // "setUrl"
QT_MOC_LITERAL(15, 162, 9), // "i18n_data"
QT_MOC_LITERAL(16, 172, 4), // "i18n"
QT_MOC_LITERAL(17, 177, 14), // "resolving_data"
QT_MOC_LITERAL(18, 192, 9), // "resolving"
QT_MOC_LITERAL(19, 202, 13), // "toString_data"
QT_MOC_LITERAL(20, 216, 8), // "toString"
QT_MOC_LITERAL(21, 225, 29), // "toString_PreferLocalFile_data"
QT_MOC_LITERAL(22, 255, 24), // "toString_PreferLocalFile"
QT_MOC_LITERAL(23, 280, 25), // "toString_constructed_data"
QT_MOC_LITERAL(24, 306, 20), // "toString_constructed"
QT_MOC_LITERAL(25, 327, 24), // "toAndFromStringList_data"
QT_MOC_LITERAL(26, 352, 19), // "toAndFromStringList"
QT_MOC_LITERAL(27, 372, 15), // "isParentOf_data"
QT_MOC_LITERAL(28, 388, 10), // "isParentOf"
QT_MOC_LITERAL(29, 399, 16), // "toLocalFile_data"
QT_MOC_LITERAL(30, 416, 11), // "toLocalFile"
QT_MOC_LITERAL(31, 428, 18), // "fromLocalFile_data"
QT_MOC_LITERAL(32, 447, 13), // "fromLocalFile"
QT_MOC_LITERAL(33, 461, 27), // "fromLocalFileNormalize_data"
QT_MOC_LITERAL(34, 489, 22), // "fromLocalFileNormalize"
QT_MOC_LITERAL(35, 512, 8), // "macTypes"
QT_MOC_LITERAL(36, 521, 8), // "relative"
QT_MOC_LITERAL(37, 530, 13), // "compat_legacy"
QT_MOC_LITERAL(38, 544, 26), // "compat_constructor_01_data"
QT_MOC_LITERAL(39, 571, 21), // "compat_constructor_01"
QT_MOC_LITERAL(40, 593, 26), // "compat_constructor_02_data"
QT_MOC_LITERAL(41, 620, 21), // "compat_constructor_02"
QT_MOC_LITERAL(42, 642, 26), // "compat_constructor_03_data"
QT_MOC_LITERAL(43, 669, 21), // "compat_constructor_03"
QT_MOC_LITERAL(44, 691, 22), // "compat_isValid_01_data"
QT_MOC_LITERAL(45, 714, 17), // "compat_isValid_01"
QT_MOC_LITERAL(46, 732, 22), // "compat_isValid_02_data"
QT_MOC_LITERAL(47, 755, 17), // "compat_isValid_02"
QT_MOC_LITERAL(48, 773, 16), // "compat_path_data"
QT_MOC_LITERAL(49, 790, 11), // "compat_path"
QT_MOC_LITERAL(50, 802, 20), // "compat_fileName_data"
QT_MOC_LITERAL(51, 823, 15), // "compat_fileName"
QT_MOC_LITERAL(52, 839, 18), // "compat_decode_data"
QT_MOC_LITERAL(53, 858, 13), // "compat_decode"
QT_MOC_LITERAL(54, 872, 18), // "compat_encode_data"
QT_MOC_LITERAL(55, 891, 13), // "compat_encode"
QT_MOC_LITERAL(56, 905, 20), // "percentEncoding_data"
QT_MOC_LITERAL(57, 926, 15), // "percentEncoding"
QT_MOC_LITERAL(58, 942, 4), // "swap"
QT_MOC_LITERAL(59, 947, 8), // "symmetry"
QT_MOC_LITERAL(60, 956, 14), // "ipvfuture_data"
QT_MOC_LITERAL(61, 971, 9), // "ipvfuture"
QT_MOC_LITERAL(62, 981, 9), // "ipv6_data"
QT_MOC_LITERAL(63, 991, 4), // "ipv6"
QT_MOC_LITERAL(64, 996, 11), // "ipv6_2_data"
QT_MOC_LITERAL(65, 1008, 6), // "ipv6_2"
QT_MOC_LITERAL(66, 1015, 8), // "moreIpv6"
QT_MOC_LITERAL(67, 1024, 22), // "toPercentEncoding_data"
QT_MOC_LITERAL(68, 1047, 17), // "toPercentEncoding"
QT_MOC_LITERAL(69, 1065, 15), // "isRelative_data"
QT_MOC_LITERAL(70, 1081, 10), // "isRelative"
QT_MOC_LITERAL(71, 1092, 13), // "hasQuery_data"
QT_MOC_LITERAL(72, 1106, 8), // "hasQuery"
QT_MOC_LITERAL(73, 1115, 8), // "nameprep"
QT_MOC_LITERAL(74, 1124, 7), // "isValid"
QT_MOC_LITERAL(75, 1132, 20), // "schemeValidator_data"
QT_MOC_LITERAL(76, 1153, 15), // "schemeValidator"
QT_MOC_LITERAL(77, 1169, 14), // "setScheme_data"
QT_MOC_LITERAL(78, 1184, 9), // "setScheme"
QT_MOC_LITERAL(79, 1194, 17), // "strictParser_data"
QT_MOC_LITERAL(80, 1212, 12), // "strictParser"
QT_MOC_LITERAL(81, 1225, 14), // "tolerantParser"
QT_MOC_LITERAL(82, 1240, 27), // "correctEncodedMistakes_data"
QT_MOC_LITERAL(83, 1268, 22), // "correctEncodedMistakes"
QT_MOC_LITERAL(84, 1291, 27), // "correctDecodedMistakes_data"
QT_MOC_LITERAL(85, 1319, 22), // "correctDecodedMistakes"
QT_MOC_LITERAL(86, 1342, 20), // "tldRestrictions_data"
QT_MOC_LITERAL(87, 1363, 15), // "tldRestrictions"
QT_MOC_LITERAL(88, 1379, 20), // "emptyQueryOrFragment"
QT_MOC_LITERAL(89, 1400, 16), // "hasFragment_data"
QT_MOC_LITERAL(90, 1417, 11), // "hasFragment"
QT_MOC_LITERAL(91, 1429, 23), // "setEncodedFragment_data"
QT_MOC_LITERAL(92, 1453, 18), // "setEncodedFragment"
QT_MOC_LITERAL(93, 1472, 11), // "fromEncoded"
QT_MOC_LITERAL(94, 1484, 23), // "stripTrailingSlash_data"
QT_MOC_LITERAL(95, 1508, 18), // "stripTrailingSlash"
QT_MOC_LITERAL(96, 1527, 10), // "hosts_data"
QT_MOC_LITERAL(97, 1538, 5), // "hosts"
QT_MOC_LITERAL(98, 1544, 14), // "hostFlags_data"
QT_MOC_LITERAL(99, 1559, 9), // "hostFlags"
QT_MOC_LITERAL(100, 1569, 7), // "setPort"
QT_MOC_LITERAL(101, 1577, 9), // "port_data"
QT_MOC_LITERAL(102, 1587, 4), // "port"
QT_MOC_LITERAL(103, 1592, 14), // "toEncoded_data"
QT_MOC_LITERAL(104, 1607, 9), // "toEncoded"
QT_MOC_LITERAL(105, 1617, 17), // "setAuthority_data"
QT_MOC_LITERAL(106, 1635, 12), // "setAuthority"
QT_MOC_LITERAL(107, 1648, 22), // "setEmptyAuthority_data"
QT_MOC_LITERAL(108, 1671, 17), // "setEmptyAuthority"
QT_MOC_LITERAL(109, 1689, 5), // "clear"
QT_MOC_LITERAL(110, 1695, 27), // "resolvedWithAbsoluteSchemes"
QT_MOC_LITERAL(111, 1723, 32), // "resolvedWithAbsoluteSchemes_data"
QT_MOC_LITERAL(112, 1756, 15), // "binaryData_data"
QT_MOC_LITERAL(113, 1772, 10), // "binaryData"
QT_MOC_LITERAL(114, 1783, 18), // "fromUserInput_data"
QT_MOC_LITERAL(115, 1802, 13), // "fromUserInput"
QT_MOC_LITERAL(116, 1816, 25), // "fromUserInputWithCwd_data"
QT_MOC_LITERAL(117, 1842, 20), // "fromUserInputWithCwd"
QT_MOC_LITERAL(118, 1863, 13), // "fileName_data"
QT_MOC_LITERAL(119, 1877, 8), // "fileName"
QT_MOC_LITERAL(120, 1886, 20), // "isEmptyForEncodedUrl"
QT_MOC_LITERAL(121, 1907, 34), // "toEncodedNotUsingUninitialize..."
QT_MOC_LITERAL(122, 1942, 43), // "emptyAuthorityRemovesExisting..."
QT_MOC_LITERAL(123, 1986, 38), // "emptyAuthorityRemovesExisting..."
QT_MOC_LITERAL(124, 2025, 28), // "acceptEmptyAuthoritySegments"
QT_MOC_LITERAL(125, 2054, 16), // "lowercasesScheme"
QT_MOC_LITERAL(126, 2071, 23), // "componentEncodings_data"
QT_MOC_LITERAL(127, 2095, 18), // "componentEncodings"
QT_MOC_LITERAL(128, 2114, 18), // "setComponents_data"
QT_MOC_LITERAL(129, 2133, 13), // "setComponents"
QT_MOC_LITERAL(130, 2147, 14), // "streaming_data"
QT_MOC_LITERAL(131, 2162, 9), // "streaming"
QT_MOC_LITERAL(132, 2172, 6), // "detach"
QT_MOC_LITERAL(133, 2179, 13), // "testThreading"
QT_MOC_LITERAL(134, 2193, 12), // "matches_data"
QT_MOC_LITERAL(135, 2206, 7) // "matches"

    },
    "tst_QUrl\0initTestCase\0\0effectiveTLDs_data\0"
    "effectiveTLDs\0getSetCheck\0constructing\0"
    "hashInPath\0unc\0assignment\0comparison\0"
    "comparison2_data\0comparison2\0copying\0"
    "setUrl\0i18n_data\0i18n\0resolving_data\0"
    "resolving\0toString_data\0toString\0"
    "toString_PreferLocalFile_data\0"
    "toString_PreferLocalFile\0"
    "toString_constructed_data\0"
    "toString_constructed\0toAndFromStringList_data\0"
    "toAndFromStringList\0isParentOf_data\0"
    "isParentOf\0toLocalFile_data\0toLocalFile\0"
    "fromLocalFile_data\0fromLocalFile\0"
    "fromLocalFileNormalize_data\0"
    "fromLocalFileNormalize\0macTypes\0"
    "relative\0compat_legacy\0"
    "compat_constructor_01_data\0"
    "compat_constructor_01\0compat_constructor_02_data\0"
    "compat_constructor_02\0compat_constructor_03_data\0"
    "compat_constructor_03\0compat_isValid_01_data\0"
    "compat_isValid_01\0compat_isValid_02_data\0"
    "compat_isValid_02\0compat_path_data\0"
    "compat_path\0compat_fileName_data\0"
    "compat_fileName\0compat_decode_data\0"
    "compat_decode\0compat_encode_data\0"
    "compat_encode\0percentEncoding_data\0"
    "percentEncoding\0swap\0symmetry\0"
    "ipvfuture_data\0ipvfuture\0ipv6_data\0"
    "ipv6\0ipv6_2_data\0ipv6_2\0moreIpv6\0"
    "toPercentEncoding_data\0toPercentEncoding\0"
    "isRelative_data\0isRelative\0hasQuery_data\0"
    "hasQuery\0nameprep\0isValid\0"
    "schemeValidator_data\0schemeValidator\0"
    "setScheme_data\0setScheme\0strictParser_data\0"
    "strictParser\0tolerantParser\0"
    "correctEncodedMistakes_data\0"
    "correctEncodedMistakes\0"
    "correctDecodedMistakes_data\0"
    "correctDecodedMistakes\0tldRestrictions_data\0"
    "tldRestrictions\0emptyQueryOrFragment\0"
    "hasFragment_data\0hasFragment\0"
    "setEncodedFragment_data\0setEncodedFragment\0"
    "fromEncoded\0stripTrailingSlash_data\0"
    "stripTrailingSlash\0hosts_data\0hosts\0"
    "hostFlags_data\0hostFlags\0setPort\0"
    "port_data\0port\0toEncoded_data\0toEncoded\0"
    "setAuthority_data\0setAuthority\0"
    "setEmptyAuthority_data\0setEmptyAuthority\0"
    "clear\0resolvedWithAbsoluteSchemes\0"
    "resolvedWithAbsoluteSchemes_data\0"
    "binaryData_data\0binaryData\0"
    "fromUserInput_data\0fromUserInput\0"
    "fromUserInputWithCwd_data\0"
    "fromUserInputWithCwd\0fileName_data\0"
    "fileName\0isEmptyForEncodedUrl\0"
    "toEncodedNotUsingUninitializedPath\0"
    "emptyAuthorityRemovesExistingAuthority_data\0"
    "emptyAuthorityRemovesExistingAuthority\0"
    "acceptEmptyAuthoritySegments\0"
    "lowercasesScheme\0componentEncodings_data\0"
    "componentEncodings\0setComponents_data\0"
    "setComponents\0streaming_data\0streaming\0"
    "detach\0testThreading\0matches_data\0"
    "matches"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QUrl[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
     134,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  684,    2, 0x08 /* Private */,
       3,    0,  685,    2, 0x08 /* Private */,
       4,    0,  686,    2, 0x08 /* Private */,
       5,    0,  687,    2, 0x08 /* Private */,
       6,    0,  688,    2, 0x08 /* Private */,
       7,    0,  689,    2, 0x08 /* Private */,
       8,    0,  690,    2, 0x08 /* Private */,
       9,    0,  691,    2, 0x08 /* Private */,
      10,    0,  692,    2, 0x08 /* Private */,
      11,    0,  693,    2, 0x08 /* Private */,
      12,    0,  694,    2, 0x08 /* Private */,
      13,    0,  695,    2, 0x08 /* Private */,
      14,    0,  696,    2, 0x08 /* Private */,
      15,    0,  697,    2, 0x08 /* Private */,
      16,    0,  698,    2, 0x08 /* Private */,
      17,    0,  699,    2, 0x08 /* Private */,
      18,    0,  700,    2, 0x08 /* Private */,
      19,    0,  701,    2, 0x08 /* Private */,
      20,    0,  702,    2, 0x08 /* Private */,
      21,    0,  703,    2, 0x08 /* Private */,
      22,    0,  704,    2, 0x08 /* Private */,
      23,    0,  705,    2, 0x08 /* Private */,
      24,    0,  706,    2, 0x08 /* Private */,
      25,    0,  707,    2, 0x08 /* Private */,
      26,    0,  708,    2, 0x08 /* Private */,
      27,    0,  709,    2, 0x08 /* Private */,
      28,    0,  710,    2, 0x08 /* Private */,
      29,    0,  711,    2, 0x08 /* Private */,
      30,    0,  712,    2, 0x08 /* Private */,
      31,    0,  713,    2, 0x08 /* Private */,
      32,    0,  714,    2, 0x08 /* Private */,
      33,    0,  715,    2, 0x08 /* Private */,
      34,    0,  716,    2, 0x08 /* Private */,
      35,    0,  717,    2, 0x08 /* Private */,
      36,    0,  718,    2, 0x08 /* Private */,
      37,    0,  719,    2, 0x08 /* Private */,
      38,    0,  720,    2, 0x08 /* Private */,
      39,    0,  721,    2, 0x08 /* Private */,
      40,    0,  722,    2, 0x08 /* Private */,
      41,    0,  723,    2, 0x08 /* Private */,
      42,    0,  724,    2, 0x08 /* Private */,
      43,    0,  725,    2, 0x08 /* Private */,
      44,    0,  726,    2, 0x08 /* Private */,
      45,    0,  727,    2, 0x08 /* Private */,
      46,    0,  728,    2, 0x08 /* Private */,
      47,    0,  729,    2, 0x08 /* Private */,
      48,    0,  730,    2, 0x08 /* Private */,
      49,    0,  731,    2, 0x08 /* Private */,
      50,    0,  732,    2, 0x08 /* Private */,
      51,    0,  733,    2, 0x08 /* Private */,
      52,    0,  734,    2, 0x08 /* Private */,
      53,    0,  735,    2, 0x08 /* Private */,
      54,    0,  736,    2, 0x08 /* Private */,
      55,    0,  737,    2, 0x08 /* Private */,
      56,    0,  738,    2, 0x08 /* Private */,
      57,    0,  739,    2, 0x08 /* Private */,
      58,    0,  740,    2, 0x08 /* Private */,
      59,    0,  741,    2, 0x08 /* Private */,
      60,    0,  742,    2, 0x08 /* Private */,
      61,    0,  743,    2, 0x08 /* Private */,
      62,    0,  744,    2, 0x08 /* Private */,
      63,    0,  745,    2, 0x08 /* Private */,
      64,    0,  746,    2, 0x08 /* Private */,
      65,    0,  747,    2, 0x08 /* Private */,
      66,    0,  748,    2, 0x08 /* Private */,
      67,    0,  749,    2, 0x08 /* Private */,
      68,    0,  750,    2, 0x08 /* Private */,
      69,    0,  751,    2, 0x08 /* Private */,
      70,    0,  752,    2, 0x08 /* Private */,
      71,    0,  753,    2, 0x08 /* Private */,
      72,    0,  754,    2, 0x08 /* Private */,
      73,    0,  755,    2, 0x08 /* Private */,
      74,    0,  756,    2, 0x08 /* Private */,
      75,    0,  757,    2, 0x08 /* Private */,
      76,    0,  758,    2, 0x08 /* Private */,
      77,    0,  759,    2, 0x08 /* Private */,
      78,    0,  760,    2, 0x08 /* Private */,
      79,    0,  761,    2, 0x08 /* Private */,
      80,    0,  762,    2, 0x08 /* Private */,
      81,    0,  763,    2, 0x08 /* Private */,
      82,    0,  764,    2, 0x08 /* Private */,
      83,    0,  765,    2, 0x08 /* Private */,
      84,    0,  766,    2, 0x08 /* Private */,
      85,    0,  767,    2, 0x08 /* Private */,
      86,    0,  768,    2, 0x08 /* Private */,
      87,    0,  769,    2, 0x08 /* Private */,
      88,    0,  770,    2, 0x08 /* Private */,
      89,    0,  771,    2, 0x08 /* Private */,
      90,    0,  772,    2, 0x08 /* Private */,
      91,    0,  773,    2, 0x08 /* Private */,
      92,    0,  774,    2, 0x08 /* Private */,
      93,    0,  775,    2, 0x08 /* Private */,
      94,    0,  776,    2, 0x08 /* Private */,
      95,    0,  777,    2, 0x08 /* Private */,
      96,    0,  778,    2, 0x08 /* Private */,
      97,    0,  779,    2, 0x08 /* Private */,
      98,    0,  780,    2, 0x08 /* Private */,
      99,    0,  781,    2, 0x08 /* Private */,
     100,    0,  782,    2, 0x08 /* Private */,
     101,    0,  783,    2, 0x08 /* Private */,
     102,    0,  784,    2, 0x08 /* Private */,
     103,    0,  785,    2, 0x08 /* Private */,
     104,    0,  786,    2, 0x08 /* Private */,
     105,    0,  787,    2, 0x08 /* Private */,
     106,    0,  788,    2, 0x08 /* Private */,
     107,    0,  789,    2, 0x08 /* Private */,
     108,    0,  790,    2, 0x08 /* Private */,
     109,    0,  791,    2, 0x08 /* Private */,
     110,    0,  792,    2, 0x08 /* Private */,
     111,    0,  793,    2, 0x08 /* Private */,
     112,    0,  794,    2, 0x08 /* Private */,
     113,    0,  795,    2, 0x08 /* Private */,
     114,    0,  796,    2, 0x08 /* Private */,
     115,    0,  797,    2, 0x08 /* Private */,
     116,    0,  798,    2, 0x08 /* Private */,
     117,    0,  799,    2, 0x08 /* Private */,
     118,    0,  800,    2, 0x08 /* Private */,
     119,    0,  801,    2, 0x08 /* Private */,
     120,    0,  802,    2, 0x08 /* Private */,
     121,    0,  803,    2, 0x08 /* Private */,
     122,    0,  804,    2, 0x08 /* Private */,
     123,    0,  805,    2, 0x08 /* Private */,
     124,    0,  806,    2, 0x08 /* Private */,
     125,    0,  807,    2, 0x08 /* Private */,
     126,    0,  808,    2, 0x08 /* Private */,
     127,    0,  809,    2, 0x08 /* Private */,
     128,    0,  810,    2, 0x08 /* Private */,
     129,    0,  811,    2, 0x08 /* Private */,
     130,    0,  812,    2, 0x08 /* Private */,
     131,    0,  813,    2, 0x08 /* Private */,
     132,    0,  814,    2, 0x08 /* Private */,
     133,    0,  815,    2, 0x08 /* Private */,
     134,    0,  816,    2, 0x08 /* Private */,
     135,    0,  817,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QUrl::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QUrl *_t = static_cast<tst_QUrl *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->effectiveTLDs_data(); break;
        case 2: _t->effectiveTLDs(); break;
        case 3: _t->getSetCheck(); break;
        case 4: _t->constructing(); break;
        case 5: _t->hashInPath(); break;
        case 6: _t->unc(); break;
        case 7: _t->assignment(); break;
        case 8: _t->comparison(); break;
        case 9: _t->comparison2_data(); break;
        case 10: _t->comparison2(); break;
        case 11: _t->copying(); break;
        case 12: _t->setUrl(); break;
        case 13: _t->i18n_data(); break;
        case 14: _t->i18n(); break;
        case 15: _t->resolving_data(); break;
        case 16: _t->resolving(); break;
        case 17: _t->toString_data(); break;
        case 18: _t->toString(); break;
        case 19: _t->toString_PreferLocalFile_data(); break;
        case 20: _t->toString_PreferLocalFile(); break;
        case 21: _t->toString_constructed_data(); break;
        case 22: _t->toString_constructed(); break;
        case 23: _t->toAndFromStringList_data(); break;
        case 24: _t->toAndFromStringList(); break;
        case 25: _t->isParentOf_data(); break;
        case 26: _t->isParentOf(); break;
        case 27: _t->toLocalFile_data(); break;
        case 28: _t->toLocalFile(); break;
        case 29: _t->fromLocalFile_data(); break;
        case 30: _t->fromLocalFile(); break;
        case 31: _t->fromLocalFileNormalize_data(); break;
        case 32: _t->fromLocalFileNormalize(); break;
        case 33: _t->macTypes(); break;
        case 34: _t->relative(); break;
        case 35: _t->compat_legacy(); break;
        case 36: _t->compat_constructor_01_data(); break;
        case 37: _t->compat_constructor_01(); break;
        case 38: _t->compat_constructor_02_data(); break;
        case 39: _t->compat_constructor_02(); break;
        case 40: _t->compat_constructor_03_data(); break;
        case 41: _t->compat_constructor_03(); break;
        case 42: _t->compat_isValid_01_data(); break;
        case 43: _t->compat_isValid_01(); break;
        case 44: _t->compat_isValid_02_data(); break;
        case 45: _t->compat_isValid_02(); break;
        case 46: _t->compat_path_data(); break;
        case 47: _t->compat_path(); break;
        case 48: _t->compat_fileName_data(); break;
        case 49: _t->compat_fileName(); break;
        case 50: _t->compat_decode_data(); break;
        case 51: _t->compat_decode(); break;
        case 52: _t->compat_encode_data(); break;
        case 53: _t->compat_encode(); break;
        case 54: _t->percentEncoding_data(); break;
        case 55: _t->percentEncoding(); break;
        case 56: _t->swap(); break;
        case 57: _t->symmetry(); break;
        case 58: _t->ipvfuture_data(); break;
        case 59: _t->ipvfuture(); break;
        case 60: _t->ipv6_data(); break;
        case 61: _t->ipv6(); break;
        case 62: _t->ipv6_2_data(); break;
        case 63: _t->ipv6_2(); break;
        case 64: _t->moreIpv6(); break;
        case 65: _t->toPercentEncoding_data(); break;
        case 66: _t->toPercentEncoding(); break;
        case 67: _t->isRelative_data(); break;
        case 68: _t->isRelative(); break;
        case 69: _t->hasQuery_data(); break;
        case 70: _t->hasQuery(); break;
        case 71: _t->nameprep(); break;
        case 72: _t->isValid(); break;
        case 73: _t->schemeValidator_data(); break;
        case 74: _t->schemeValidator(); break;
        case 75: _t->setScheme_data(); break;
        case 76: _t->setScheme(); break;
        case 77: _t->strictParser_data(); break;
        case 78: _t->strictParser(); break;
        case 79: _t->tolerantParser(); break;
        case 80: _t->correctEncodedMistakes_data(); break;
        case 81: _t->correctEncodedMistakes(); break;
        case 82: _t->correctDecodedMistakes_data(); break;
        case 83: _t->correctDecodedMistakes(); break;
        case 84: _t->tldRestrictions_data(); break;
        case 85: _t->tldRestrictions(); break;
        case 86: _t->emptyQueryOrFragment(); break;
        case 87: _t->hasFragment_data(); break;
        case 88: _t->hasFragment(); break;
        case 89: _t->setEncodedFragment_data(); break;
        case 90: _t->setEncodedFragment(); break;
        case 91: _t->fromEncoded(); break;
        case 92: _t->stripTrailingSlash_data(); break;
        case 93: _t->stripTrailingSlash(); break;
        case 94: _t->hosts_data(); break;
        case 95: _t->hosts(); break;
        case 96: _t->hostFlags_data(); break;
        case 97: _t->hostFlags(); break;
        case 98: _t->setPort(); break;
        case 99: _t->port_data(); break;
        case 100: _t->port(); break;
        case 101: _t->toEncoded_data(); break;
        case 102: _t->toEncoded(); break;
        case 103: _t->setAuthority_data(); break;
        case 104: _t->setAuthority(); break;
        case 105: _t->setEmptyAuthority_data(); break;
        case 106: _t->setEmptyAuthority(); break;
        case 107: _t->clear(); break;
        case 108: _t->resolvedWithAbsoluteSchemes(); break;
        case 109: _t->resolvedWithAbsoluteSchemes_data(); break;
        case 110: _t->binaryData_data(); break;
        case 111: _t->binaryData(); break;
        case 112: _t->fromUserInput_data(); break;
        case 113: _t->fromUserInput(); break;
        case 114: _t->fromUserInputWithCwd_data(); break;
        case 115: _t->fromUserInputWithCwd(); break;
        case 116: _t->fileName_data(); break;
        case 117: _t->fileName(); break;
        case 118: _t->isEmptyForEncodedUrl(); break;
        case 119: _t->toEncodedNotUsingUninitializedPath(); break;
        case 120: _t->emptyAuthorityRemovesExistingAuthority_data(); break;
        case 121: _t->emptyAuthorityRemovesExistingAuthority(); break;
        case 122: _t->acceptEmptyAuthoritySegments(); break;
        case 123: _t->lowercasesScheme(); break;
        case 124: _t->componentEncodings_data(); break;
        case 125: _t->componentEncodings(); break;
        case 126: _t->setComponents_data(); break;
        case 127: _t->setComponents(); break;
        case 128: _t->streaming_data(); break;
        case 129: _t->streaming(); break;
        case 130: _t->detach(); break;
        case 131: _t->testThreading(); break;
        case 132: _t->matches_data(); break;
        case 133: _t->matches(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QUrl::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QUrl.data,
      qt_meta_data_tst_QUrl,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QUrl::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QUrl::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QUrl.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QUrl::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 134)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 134;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 134)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 134;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
