/****************************************************************************
** Meta object code from reading C++ file 'tst_qprocess.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qprocess.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QProcess_t {
    QByteArrayData data[96];
    char stringdata0[1928];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QProcess_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QProcess_t qt_meta_stringdata_tst_QProcess = {
    {
QT_MOC_LITERAL(0, 0, 12), // "tst_QProcess"
QT_MOC_LITERAL(1, 13, 12), // "initTestCase"
QT_MOC_LITERAL(2, 26, 0), // ""
QT_MOC_LITERAL(3, 27, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 43, 4), // "init"
QT_MOC_LITERAL(5, 48, 11), // "getSetCheck"
QT_MOC_LITERAL(6, 60, 12), // "constructing"
QT_MOC_LITERAL(7, 73, 11), // "simpleStart"
QT_MOC_LITERAL(8, 85, 13), // "startWithOpen"
QT_MOC_LITERAL(9, 99, 16), // "startWithOldOpen"
QT_MOC_LITERAL(10, 116, 7), // "execute"
QT_MOC_LITERAL(11, 124, 13), // "startDetached"
QT_MOC_LITERAL(12, 138, 9), // "crashTest"
QT_MOC_LITERAL(13, 148, 10), // "crashTest2"
QT_MOC_LITERAL(14, 159, 13), // "echoTest_data"
QT_MOC_LITERAL(15, 173, 8), // "echoTest"
QT_MOC_LITERAL(16, 182, 9), // "echoTest2"
QT_MOC_LITERAL(17, 192, 11), // "echoTestGui"
QT_MOC_LITERAL(18, 204, 27), // "testSetNamedPipeHandleState"
QT_MOC_LITERAL(19, 232, 13), // "batFiles_data"
QT_MOC_LITERAL(20, 246, 8), // "batFiles"
QT_MOC_LITERAL(21, 255, 12), // "loopBackTest"
QT_MOC_LITERAL(22, 268, 23), // "readTimeoutAndThenCrash"
QT_MOC_LITERAL(23, 292, 16), // "deadWhileReading"
QT_MOC_LITERAL(24, 309, 22), // "restartProcessDeadlock"
QT_MOC_LITERAL(25, 332, 17), // "closeWriteChannel"
QT_MOC_LITERAL(26, 350, 16), // "closeReadChannel"
QT_MOC_LITERAL(27, 367, 9), // "openModes"
QT_MOC_LITERAL(28, 377, 35), // "emitReadyReadOnlyWhenNewDataA..."
QT_MOC_LITERAL(29, 413, 20), // "softExitInSlots_data"
QT_MOC_LITERAL(30, 434, 15), // "softExitInSlots"
QT_MOC_LITERAL(31, 450, 14), // "mergedChannels"
QT_MOC_LITERAL(32, 465, 22), // "forwardedChannels_data"
QT_MOC_LITERAL(33, 488, 17), // "forwardedChannels"
QT_MOC_LITERAL(34, 506, 5), // "atEnd"
QT_MOC_LITERAL(35, 512, 6), // "atEnd2"
QT_MOC_LITERAL(36, 519, 26), // "waitForFinishedWithTimeout"
QT_MOC_LITERAL(37, 546, 32), // "waitForReadyReadInAReadyReadSlot"
QT_MOC_LITERAL(38, 579, 38), // "waitForBytesWrittenInABytesWr..."
QT_MOC_LITERAL(39, 618, 19), // "setEnvironment_data"
QT_MOC_LITERAL(40, 638, 14), // "setEnvironment"
QT_MOC_LITERAL(41, 653, 26), // "setProcessEnvironment_data"
QT_MOC_LITERAL(42, 680, 21), // "setProcessEnvironment"
QT_MOC_LITERAL(43, 702, 19), // "environmentIsSorted"
QT_MOC_LITERAL(44, 722, 11), // "spaceInName"
QT_MOC_LITERAL(45, 734, 20), // "setStandardInputFile"
QT_MOC_LITERAL(46, 755, 26), // "setStandardOutputFile_data"
QT_MOC_LITERAL(47, 782, 21), // "setStandardOutputFile"
QT_MOC_LITERAL(48, 804, 31), // "setStandardOutputFileNullDevice"
QT_MOC_LITERAL(49, 836, 43), // "setStandardOutputFileAndWaitF..."
QT_MOC_LITERAL(50, 880, 29), // "setStandardOutputProcess_data"
QT_MOC_LITERAL(51, 910, 24), // "setStandardOutputProcess"
QT_MOC_LITERAL(52, 935, 31), // "removeFileWhileProcessIsRunning"
QT_MOC_LITERAL(53, 967, 17), // "fileWriterProcess"
QT_MOC_LITERAL(54, 985, 18), // "switchReadChannels"
QT_MOC_LITERAL(55, 1004, 21), // "discardUnwantedOutput"
QT_MOC_LITERAL(56, 1026, 19), // "setWorkingDirectory"
QT_MOC_LITERAL(57, 1046, 30), // "setNonExistentWorkingDirectory"
QT_MOC_LITERAL(58, 1077, 15), // "exitStatus_data"
QT_MOC_LITERAL(59, 1093, 10), // "exitStatus"
QT_MOC_LITERAL(60, 1104, 15), // "waitForFinished"
QT_MOC_LITERAL(61, 1120, 8), // "hardExit"
QT_MOC_LITERAL(62, 1129, 8), // "softExit"
QT_MOC_LITERAL(63, 1138, 16), // "processInAThread"
QT_MOC_LITERAL(64, 1155, 26), // "processesInMultipleThreads"
QT_MOC_LITERAL(65, 1182, 18), // "spaceArgsTest_data"
QT_MOC_LITERAL(66, 1201, 13), // "spaceArgsTest"
QT_MOC_LITERAL(67, 1215, 15), // "nativeArguments"
QT_MOC_LITERAL(68, 1231, 30), // "createProcessArgumentsModifier"
QT_MOC_LITERAL(69, 1262, 12), // "exitCodeTest"
QT_MOC_LITERAL(70, 1275, 17), // "systemEnvironment"
QT_MOC_LITERAL(71, 1293, 22), // "lockupsInStartDetached"
QT_MOC_LITERAL(72, 1316, 37), // "waitForReadyReadForNonexistan..."
QT_MOC_LITERAL(73, 1354, 30), // "detachedWorkingDirectoryAndPid"
QT_MOC_LITERAL(74, 1385, 22), // "startFinishStartFinish"
QT_MOC_LITERAL(75, 1408, 25), // "invalidProgramString_data"
QT_MOC_LITERAL(76, 1434, 20), // "invalidProgramString"
QT_MOC_LITERAL(77, 1455, 20), // "onlyOneStartedSignal"
QT_MOC_LITERAL(78, 1476, 30), // "finishProcessBeforeReadingDone"
QT_MOC_LITERAL(79, 1507, 26), // "waitForStartedWithoutStart"
QT_MOC_LITERAL(80, 1534, 18), // "startStopStartStop"
QT_MOC_LITERAL(81, 1553, 30), // "startStopStartStopBuffers_data"
QT_MOC_LITERAL(82, 1584, 25), // "startStopStartStopBuffers"
QT_MOC_LITERAL(83, 1610, 34), // "processEventsInAReadyReadSlot..."
QT_MOC_LITERAL(84, 1645, 29), // "processEventsInAReadyReadSlot"
QT_MOC_LITERAL(85, 1675, 11), // "failToStart"
QT_MOC_LITERAL(86, 1687, 19), // "failToStartWithWait"
QT_MOC_LITERAL(87, 1707, 24), // "failToStartWithEventLoop"
QT_MOC_LITERAL(88, 1732, 25), // "failToStartEmptyArgs_data"
QT_MOC_LITERAL(89, 1758, 20), // "failToStartEmptyArgs"
QT_MOC_LITERAL(90, 1779, 15), // "readFromProcess"
QT_MOC_LITERAL(91, 1795, 12), // "exitLoopSlot"
QT_MOC_LITERAL(92, 1808, 24), // "processApplicationEvents"
QT_MOC_LITERAL(93, 1833, 14), // "restartProcess"
QT_MOC_LITERAL(94, 1848, 36), // "waitForReadyReadInAReadyReadS..."
QT_MOC_LITERAL(95, 1885, 42) // "waitForBytesWrittenInABytesWr..."

    },
    "tst_QProcess\0initTestCase\0\0cleanupTestCase\0"
    "init\0getSetCheck\0constructing\0simpleStart\0"
    "startWithOpen\0startWithOldOpen\0execute\0"
    "startDetached\0crashTest\0crashTest2\0"
    "echoTest_data\0echoTest\0echoTest2\0"
    "echoTestGui\0testSetNamedPipeHandleState\0"
    "batFiles_data\0batFiles\0loopBackTest\0"
    "readTimeoutAndThenCrash\0deadWhileReading\0"
    "restartProcessDeadlock\0closeWriteChannel\0"
    "closeReadChannel\0openModes\0"
    "emitReadyReadOnlyWhenNewDataArrives\0"
    "softExitInSlots_data\0softExitInSlots\0"
    "mergedChannels\0forwardedChannels_data\0"
    "forwardedChannels\0atEnd\0atEnd2\0"
    "waitForFinishedWithTimeout\0"
    "waitForReadyReadInAReadyReadSlot\0"
    "waitForBytesWrittenInABytesWrittenSlot\0"
    "setEnvironment_data\0setEnvironment\0"
    "setProcessEnvironment_data\0"
    "setProcessEnvironment\0environmentIsSorted\0"
    "spaceInName\0setStandardInputFile\0"
    "setStandardOutputFile_data\0"
    "setStandardOutputFile\0"
    "setStandardOutputFileNullDevice\0"
    "setStandardOutputFileAndWaitForBytesWritten\0"
    "setStandardOutputProcess_data\0"
    "setStandardOutputProcess\0"
    "removeFileWhileProcessIsRunning\0"
    "fileWriterProcess\0switchReadChannels\0"
    "discardUnwantedOutput\0setWorkingDirectory\0"
    "setNonExistentWorkingDirectory\0"
    "exitStatus_data\0exitStatus\0waitForFinished\0"
    "hardExit\0softExit\0processInAThread\0"
    "processesInMultipleThreads\0"
    "spaceArgsTest_data\0spaceArgsTest\0"
    "nativeArguments\0createProcessArgumentsModifier\0"
    "exitCodeTest\0systemEnvironment\0"
    "lockupsInStartDetached\0"
    "waitForReadyReadForNonexistantProcess\0"
    "detachedWorkingDirectoryAndPid\0"
    "startFinishStartFinish\0invalidProgramString_data\0"
    "invalidProgramString\0onlyOneStartedSignal\0"
    "finishProcessBeforeReadingDone\0"
    "waitForStartedWithoutStart\0"
    "startStopStartStop\0startStopStartStopBuffers_data\0"
    "startStopStartStopBuffers\0"
    "processEventsInAReadyReadSlot_data\0"
    "processEventsInAReadyReadSlot\0failToStart\0"
    "failToStartWithWait\0failToStartWithEventLoop\0"
    "failToStartEmptyArgs_data\0"
    "failToStartEmptyArgs\0readFromProcess\0"
    "exitLoopSlot\0processApplicationEvents\0"
    "restartProcess\0waitForReadyReadInAReadyReadSlotSlot\0"
    "waitForBytesWrittenInABytesWrittenSlotSlot"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QProcess[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      94,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  484,    2, 0x0a /* Public */,
       3,    0,  485,    2, 0x0a /* Public */,
       4,    0,  486,    2, 0x0a /* Public */,
       5,    0,  487,    2, 0x08 /* Private */,
       6,    0,  488,    2, 0x08 /* Private */,
       7,    0,  489,    2, 0x08 /* Private */,
       8,    0,  490,    2, 0x08 /* Private */,
       9,    0,  491,    2, 0x08 /* Private */,
      10,    0,  492,    2, 0x08 /* Private */,
      11,    0,  493,    2, 0x08 /* Private */,
      12,    0,  494,    2, 0x08 /* Private */,
      13,    0,  495,    2, 0x08 /* Private */,
      14,    0,  496,    2, 0x08 /* Private */,
      15,    0,  497,    2, 0x08 /* Private */,
      16,    0,  498,    2, 0x08 /* Private */,
      17,    0,  499,    2, 0x08 /* Private */,
      18,    0,  500,    2, 0x08 /* Private */,
      19,    0,  501,    2, 0x08 /* Private */,
      20,    0,  502,    2, 0x08 /* Private */,
      21,    0,  503,    2, 0x08 /* Private */,
      22,    0,  504,    2, 0x08 /* Private */,
      23,    0,  505,    2, 0x08 /* Private */,
      24,    0,  506,    2, 0x08 /* Private */,
      25,    0,  507,    2, 0x08 /* Private */,
      26,    0,  508,    2, 0x08 /* Private */,
      27,    0,  509,    2, 0x08 /* Private */,
      28,    0,  510,    2, 0x08 /* Private */,
      29,    0,  511,    2, 0x08 /* Private */,
      30,    0,  512,    2, 0x08 /* Private */,
      31,    0,  513,    2, 0x08 /* Private */,
      32,    0,  514,    2, 0x08 /* Private */,
      33,    0,  515,    2, 0x08 /* Private */,
      34,    0,  516,    2, 0x08 /* Private */,
      35,    0,  517,    2, 0x08 /* Private */,
      36,    0,  518,    2, 0x08 /* Private */,
      37,    0,  519,    2, 0x08 /* Private */,
      38,    0,  520,    2, 0x08 /* Private */,
      39,    0,  521,    2, 0x08 /* Private */,
      40,    0,  522,    2, 0x08 /* Private */,
      41,    0,  523,    2, 0x08 /* Private */,
      42,    0,  524,    2, 0x08 /* Private */,
      43,    0,  525,    2, 0x08 /* Private */,
      44,    0,  526,    2, 0x08 /* Private */,
      45,    0,  527,    2, 0x08 /* Private */,
      46,    0,  528,    2, 0x08 /* Private */,
      47,    0,  529,    2, 0x08 /* Private */,
      48,    0,  530,    2, 0x08 /* Private */,
      49,    0,  531,    2, 0x08 /* Private */,
      50,    0,  532,    2, 0x08 /* Private */,
      51,    0,  533,    2, 0x08 /* Private */,
      52,    0,  534,    2, 0x08 /* Private */,
      53,    0,  535,    2, 0x08 /* Private */,
      54,    0,  536,    2, 0x08 /* Private */,
      55,    0,  537,    2, 0x08 /* Private */,
      56,    0,  538,    2, 0x08 /* Private */,
      57,    0,  539,    2, 0x08 /* Private */,
      58,    0,  540,    2, 0x08 /* Private */,
      59,    0,  541,    2, 0x08 /* Private */,
      60,    0,  542,    2, 0x08 /* Private */,
      61,    0,  543,    2, 0x08 /* Private */,
      62,    0,  544,    2, 0x08 /* Private */,
      63,    0,  545,    2, 0x08 /* Private */,
      64,    0,  546,    2, 0x08 /* Private */,
      65,    0,  547,    2, 0x08 /* Private */,
      66,    0,  548,    2, 0x08 /* Private */,
      67,    0,  549,    2, 0x08 /* Private */,
      68,    0,  550,    2, 0x08 /* Private */,
      69,    0,  551,    2, 0x08 /* Private */,
      70,    0,  552,    2, 0x08 /* Private */,
      71,    0,  553,    2, 0x08 /* Private */,
      72,    0,  554,    2, 0x08 /* Private */,
      73,    0,  555,    2, 0x08 /* Private */,
      74,    0,  556,    2, 0x08 /* Private */,
      75,    0,  557,    2, 0x08 /* Private */,
      76,    0,  558,    2, 0x08 /* Private */,
      77,    0,  559,    2, 0x08 /* Private */,
      78,    0,  560,    2, 0x08 /* Private */,
      79,    0,  561,    2, 0x08 /* Private */,
      80,    0,  562,    2, 0x08 /* Private */,
      81,    0,  563,    2, 0x08 /* Private */,
      82,    0,  564,    2, 0x08 /* Private */,
      83,    0,  565,    2, 0x08 /* Private */,
      84,    0,  566,    2, 0x08 /* Private */,
      85,    0,  567,    2, 0x08 /* Private */,
      86,    0,  568,    2, 0x08 /* Private */,
      87,    0,  569,    2, 0x08 /* Private */,
      88,    0,  570,    2, 0x08 /* Private */,
      89,    0,  571,    2, 0x08 /* Private */,
      90,    0,  572,    2, 0x09 /* Protected */,
      91,    0,  573,    2, 0x09 /* Protected */,
      92,    0,  574,    2, 0x09 /* Protected */,
      93,    0,  575,    2, 0x09 /* Protected */,
      94,    0,  576,    2, 0x09 /* Protected */,
      95,    0,  577,    2, 0x09 /* Protected */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QProcess::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QProcess *_t = static_cast<tst_QProcess *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->getSetCheck(); break;
        case 4: _t->constructing(); break;
        case 5: _t->simpleStart(); break;
        case 6: _t->startWithOpen(); break;
        case 7: _t->startWithOldOpen(); break;
        case 8: _t->execute(); break;
        case 9: _t->startDetached(); break;
        case 10: _t->crashTest(); break;
        case 11: _t->crashTest2(); break;
        case 12: _t->echoTest_data(); break;
        case 13: _t->echoTest(); break;
        case 14: _t->echoTest2(); break;
        case 15: _t->echoTestGui(); break;
        case 16: _t->testSetNamedPipeHandleState(); break;
        case 17: _t->batFiles_data(); break;
        case 18: _t->batFiles(); break;
        case 19: _t->loopBackTest(); break;
        case 20: _t->readTimeoutAndThenCrash(); break;
        case 21: _t->deadWhileReading(); break;
        case 22: _t->restartProcessDeadlock(); break;
        case 23: _t->closeWriteChannel(); break;
        case 24: _t->closeReadChannel(); break;
        case 25: _t->openModes(); break;
        case 26: _t->emitReadyReadOnlyWhenNewDataArrives(); break;
        case 27: _t->softExitInSlots_data(); break;
        case 28: _t->softExitInSlots(); break;
        case 29: _t->mergedChannels(); break;
        case 30: _t->forwardedChannels_data(); break;
        case 31: _t->forwardedChannels(); break;
        case 32: _t->atEnd(); break;
        case 33: _t->atEnd2(); break;
        case 34: _t->waitForFinishedWithTimeout(); break;
        case 35: _t->waitForReadyReadInAReadyReadSlot(); break;
        case 36: _t->waitForBytesWrittenInABytesWrittenSlot(); break;
        case 37: _t->setEnvironment_data(); break;
        case 38: _t->setEnvironment(); break;
        case 39: _t->setProcessEnvironment_data(); break;
        case 40: _t->setProcessEnvironment(); break;
        case 41: _t->environmentIsSorted(); break;
        case 42: _t->spaceInName(); break;
        case 43: _t->setStandardInputFile(); break;
        case 44: _t->setStandardOutputFile_data(); break;
        case 45: _t->setStandardOutputFile(); break;
        case 46: _t->setStandardOutputFileNullDevice(); break;
        case 47: _t->setStandardOutputFileAndWaitForBytesWritten(); break;
        case 48: _t->setStandardOutputProcess_data(); break;
        case 49: _t->setStandardOutputProcess(); break;
        case 50: _t->removeFileWhileProcessIsRunning(); break;
        case 51: _t->fileWriterProcess(); break;
        case 52: _t->switchReadChannels(); break;
        case 53: _t->discardUnwantedOutput(); break;
        case 54: _t->setWorkingDirectory(); break;
        case 55: _t->setNonExistentWorkingDirectory(); break;
        case 56: _t->exitStatus_data(); break;
        case 57: _t->exitStatus(); break;
        case 58: _t->waitForFinished(); break;
        case 59: _t->hardExit(); break;
        case 60: _t->softExit(); break;
        case 61: _t->processInAThread(); break;
        case 62: _t->processesInMultipleThreads(); break;
        case 63: _t->spaceArgsTest_data(); break;
        case 64: _t->spaceArgsTest(); break;
        case 65: _t->nativeArguments(); break;
        case 66: _t->createProcessArgumentsModifier(); break;
        case 67: _t->exitCodeTest(); break;
        case 68: _t->systemEnvironment(); break;
        case 69: _t->lockupsInStartDetached(); break;
        case 70: _t->waitForReadyReadForNonexistantProcess(); break;
        case 71: _t->detachedWorkingDirectoryAndPid(); break;
        case 72: _t->startFinishStartFinish(); break;
        case 73: _t->invalidProgramString_data(); break;
        case 74: _t->invalidProgramString(); break;
        case 75: _t->onlyOneStartedSignal(); break;
        case 76: _t->finishProcessBeforeReadingDone(); break;
        case 77: _t->waitForStartedWithoutStart(); break;
        case 78: _t->startStopStartStop(); break;
        case 79: _t->startStopStartStopBuffers_data(); break;
        case 80: _t->startStopStartStopBuffers(); break;
        case 81: _t->processEventsInAReadyReadSlot_data(); break;
        case 82: _t->processEventsInAReadyReadSlot(); break;
        case 83: _t->failToStart(); break;
        case 84: _t->failToStartWithWait(); break;
        case 85: _t->failToStartWithEventLoop(); break;
        case 86: _t->failToStartEmptyArgs_data(); break;
        case 87: _t->failToStartEmptyArgs(); break;
        case 88: _t->readFromProcess(); break;
        case 89: _t->exitLoopSlot(); break;
        case 90: _t->processApplicationEvents(); break;
        case 91: _t->restartProcess(); break;
        case 92: _t->waitForReadyReadInAReadyReadSlotSlot(); break;
        case 93: _t->waitForBytesWrittenInABytesWrittenSlotSlot(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QProcess::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QProcess.data,
      qt_meta_data_tst_QProcess,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QProcess::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QProcess::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QProcess.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QProcess::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 94)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 94;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 94)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 94;
    }
    return _id;
}
struct qt_meta_stringdata_SoftExitProcess_t {
    QByteArrayData data[5];
    char stringdata0[65];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_SoftExitProcess_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_SoftExitProcess_t qt_meta_stringdata_SoftExitProcess = {
    {
QT_MOC_LITERAL(0, 0, 15), // "SoftExitProcess"
QT_MOC_LITERAL(1, 16, 13), // "terminateSlot"
QT_MOC_LITERAL(2, 30, 0), // ""
QT_MOC_LITERAL(3, 31, 12), // "finishedSlot"
QT_MOC_LITERAL(4, 44, 20) // "QProcess::ExitStatus"

    },
    "SoftExitProcess\0terminateSlot\0\0"
    "finishedSlot\0QProcess::ExitStatus"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_SoftExitProcess[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       2,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   24,    2, 0x0a /* Public */,
       3,    2,   25,    2, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int, 0x80000000 | 4,    2,    2,

       0        // eod
};

void SoftExitProcess::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        SoftExitProcess *_t = static_cast<SoftExitProcess *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->terminateSlot(); break;
        case 1: _t->finishedSlot((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< QProcess::ExitStatus(*)>(_a[2]))); break;
        default: ;
        }
    }
}

const QMetaObject SoftExitProcess::staticMetaObject = {
    { &QProcess::staticMetaObject, qt_meta_stringdata_SoftExitProcess.data,
      qt_meta_data_SoftExitProcess,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *SoftExitProcess::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SoftExitProcess::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_SoftExitProcess.stringdata0))
        return static_cast<void*>(this);
    return QProcess::qt_metacast(_clname);
}

int SoftExitProcess::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QProcess::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 2)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 2;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 2)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 2;
    }
    return _id;
}
struct qt_meta_stringdata_TestThread_t {
    QByteArrayData data[4];
    char stringdata0[35];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestThread_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestThread_t qt_meta_stringdata_TestThread = {
    {
QT_MOC_LITERAL(0, 0, 10), // "TestThread"
QT_MOC_LITERAL(1, 11, 13), // "catchExitCode"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 8) // "exitCode"

    },
    "TestThread\0catchExitCode\0\0exitCode"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestThread[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       1,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    1,   19,    2, 0x09 /* Protected */,

 // slots: parameters
    QMetaType::Void, QMetaType::Int,    3,

       0        // eod
};

void TestThread::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestThread *_t = static_cast<TestThread *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->catchExitCode((*reinterpret_cast< int(*)>(_a[1]))); break;
        default: ;
        }
    }
}

const QMetaObject TestThread::staticMetaObject = {
    { &QThread::staticMetaObject, qt_meta_stringdata_TestThread.data,
      qt_meta_data_TestThread,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestThread::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestThread::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestThread.stringdata0))
        return static_cast<void*>(this);
    return QThread::qt_metacast(_clname);
}

int TestThread::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QThread::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 1;
    }
    return _id;
}
struct qt_meta_stringdata_BlockOnReadStdOut_t {
    QByteArrayData data[3];
    char stringdata0[25];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_BlockOnReadStdOut_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_BlockOnReadStdOut_t qt_meta_stringdata_BlockOnReadStdOut = {
    {
QT_MOC_LITERAL(0, 0, 17), // "BlockOnReadStdOut"
QT_MOC_LITERAL(1, 18, 5), // "block"
QT_MOC_LITERAL(2, 24, 0) // ""

    },
    "BlockOnReadStdOut\0block\0"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_BlockOnReadStdOut[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       1,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   19,    2, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Void,

       0        // eod
};

void BlockOnReadStdOut::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        BlockOnReadStdOut *_t = static_cast<BlockOnReadStdOut *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->block(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject BlockOnReadStdOut::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_BlockOnReadStdOut.data,
      qt_meta_data_BlockOnReadStdOut,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *BlockOnReadStdOut::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *BlockOnReadStdOut::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_BlockOnReadStdOut.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int BlockOnReadStdOut::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 1;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
