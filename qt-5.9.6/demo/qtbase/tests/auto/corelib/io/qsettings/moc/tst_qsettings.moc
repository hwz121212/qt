/****************************************************************************
** Meta object code from reading C++ file 'tst_qsettings.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qsettings.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QSettings_t {
    QByteArrayData data[50];
    char stringdata0[784];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QSettings_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QSettings_t qt_meta_stringdata_tst_QSettings = {
    {
QT_MOC_LITERAL(0, 0, 13), // "tst_QSettings"
QT_MOC_LITERAL(1, 14, 12), // "initTestCase"
QT_MOC_LITERAL(2, 27, 0), // ""
QT_MOC_LITERAL(3, 28, 7), // "cleanup"
QT_MOC_LITERAL(4, 36, 11), // "getSetCheck"
QT_MOC_LITERAL(5, 48, 9), // "ctor_data"
QT_MOC_LITERAL(6, 58, 4), // "ctor"
QT_MOC_LITERAL(7, 63, 10), // "beginGroup"
QT_MOC_LITERAL(8, 74, 8), // "setValue"
QT_MOC_LITERAL(9, 83, 6), // "remove"
QT_MOC_LITERAL(10, 90, 8), // "contains"
QT_MOC_LITERAL(11, 99, 4), // "sync"
QT_MOC_LITERAL(12, 104, 19), // "setFallbacksEnabled"
QT_MOC_LITERAL(13, 124, 24), // "setFallbacksEnabled_data"
QT_MOC_LITERAL(14, 149, 13), // "fromFile_data"
QT_MOC_LITERAL(15, 163, 8), // "fromFile"
QT_MOC_LITERAL(16, 172, 15), // "testArrays_data"
QT_MOC_LITERAL(17, 188, 10), // "testArrays"
QT_MOC_LITERAL(18, 199, 24), // "testCaseSensitivity_data"
QT_MOC_LITERAL(19, 224, 19), // "testCaseSensitivity"
QT_MOC_LITERAL(20, 244, 22), // "testErrorHandling_data"
QT_MOC_LITERAL(21, 267, 17), // "testErrorHandling"
QT_MOC_LITERAL(22, 285, 27), // "testChildKeysAndGroups_data"
QT_MOC_LITERAL(23, 313, 22), // "testChildKeysAndGroups"
QT_MOC_LITERAL(24, 336, 22), // "testUpdateRequestEvent"
QT_MOC_LITERAL(25, 359, 16), // "testThreadSafety"
QT_MOC_LITERAL(26, 376, 13), // "testEmptyData"
QT_MOC_LITERAL(27, 390, 12), // "testEmptyKey"
QT_MOC_LITERAL(28, 403, 17), // "testResourceFiles"
QT_MOC_LITERAL(29, 421, 26), // "testRegistryShortRootNames"
QT_MOC_LITERAL(30, 448, 22), // "testRegistry32And64Bit"
QT_MOC_LITERAL(31, 471, 18), // "trailingWhitespace"
QT_MOC_LITERAL(32, 490, 15), // "isWritable_data"
QT_MOC_LITERAL(33, 506, 10), // "isWritable"
QT_MOC_LITERAL(34, 517, 14), // "registerFormat"
QT_MOC_LITERAL(35, 532, 7), // "setPath"
QT_MOC_LITERAL(36, 540, 16), // "setDefaultFormat"
QT_MOC_LITERAL(37, 557, 23), // "dontCreateNeedlessPaths"
QT_MOC_LITERAL(38, 581, 25), // "consistentRegistryStorage"
QT_MOC_LITERAL(39, 607, 24), // "rainersSyncBugOnMac_data"
QT_MOC_LITERAL(40, 632, 19), // "rainersSyncBugOnMac"
QT_MOC_LITERAL(41, 652, 12), // "recursionBug"
QT_MOC_LITERAL(42, 665, 18), // "testByteArray_data"
QT_MOC_LITERAL(43, 684, 13), // "testByteArray"
QT_MOC_LITERAL(44, 698, 25), // "testByteArrayNativeFormat"
QT_MOC_LITERAL(45, 724, 8), // "iniCodec"
QT_MOC_LITERAL(46, 733, 3), // "bom"
QT_MOC_LITERAL(47, 737, 21), // "embeddedZeroByte_data"
QT_MOC_LITERAL(48, 759, 16), // "embeddedZeroByte"
QT_MOC_LITERAL(49, 776, 7) // "testXdg"

    },
    "tst_QSettings\0initTestCase\0\0cleanup\0"
    "getSetCheck\0ctor_data\0ctor\0beginGroup\0"
    "setValue\0remove\0contains\0sync\0"
    "setFallbacksEnabled\0setFallbacksEnabled_data\0"
    "fromFile_data\0fromFile\0testArrays_data\0"
    "testArrays\0testCaseSensitivity_data\0"
    "testCaseSensitivity\0testErrorHandling_data\0"
    "testErrorHandling\0testChildKeysAndGroups_data\0"
    "testChildKeysAndGroups\0testUpdateRequestEvent\0"
    "testThreadSafety\0testEmptyData\0"
    "testEmptyKey\0testResourceFiles\0"
    "testRegistryShortRootNames\0"
    "testRegistry32And64Bit\0trailingWhitespace\0"
    "isWritable_data\0isWritable\0registerFormat\0"
    "setPath\0setDefaultFormat\0"
    "dontCreateNeedlessPaths\0"
    "consistentRegistryStorage\0"
    "rainersSyncBugOnMac_data\0rainersSyncBugOnMac\0"
    "recursionBug\0testByteArray_data\0"
    "testByteArray\0testByteArrayNativeFormat\0"
    "iniCodec\0bom\0embeddedZeroByte_data\0"
    "embeddedZeroByte\0testXdg"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QSettings[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      48,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  254,    2, 0x0a /* Public */,
       3,    0,  255,    2, 0x0a /* Public */,
       4,    0,  256,    2, 0x08 /* Private */,
       5,    0,  257,    2, 0x08 /* Private */,
       6,    0,  258,    2, 0x08 /* Private */,
       7,    0,  259,    2, 0x08 /* Private */,
       8,    0,  260,    2, 0x08 /* Private */,
       9,    0,  261,    2, 0x08 /* Private */,
      10,    0,  262,    2, 0x08 /* Private */,
      11,    0,  263,    2, 0x08 /* Private */,
      12,    0,  264,    2, 0x08 /* Private */,
      13,    0,  265,    2, 0x08 /* Private */,
      14,    0,  266,    2, 0x08 /* Private */,
      15,    0,  267,    2, 0x08 /* Private */,
      16,    0,  268,    2, 0x08 /* Private */,
      17,    0,  269,    2, 0x08 /* Private */,
      18,    0,  270,    2, 0x08 /* Private */,
      19,    0,  271,    2, 0x08 /* Private */,
      20,    0,  272,    2, 0x08 /* Private */,
      21,    0,  273,    2, 0x08 /* Private */,
      22,    0,  274,    2, 0x08 /* Private */,
      23,    0,  275,    2, 0x08 /* Private */,
      24,    0,  276,    2, 0x08 /* Private */,
      25,    0,  277,    2, 0x08 /* Private */,
      26,    0,  278,    2, 0x08 /* Private */,
      27,    0,  279,    2, 0x08 /* Private */,
      28,    0,  280,    2, 0x08 /* Private */,
      29,    0,  281,    2, 0x08 /* Private */,
      30,    0,  282,    2, 0x08 /* Private */,
      31,    0,  283,    2, 0x08 /* Private */,
      32,    0,  284,    2, 0x08 /* Private */,
      33,    0,  285,    2, 0x08 /* Private */,
      34,    0,  286,    2, 0x08 /* Private */,
      35,    0,  287,    2, 0x08 /* Private */,
      36,    0,  288,    2, 0x08 /* Private */,
      37,    0,  289,    2, 0x08 /* Private */,
      38,    0,  290,    2, 0x08 /* Private */,
      39,    0,  291,    2, 0x08 /* Private */,
      40,    0,  292,    2, 0x08 /* Private */,
      41,    0,  293,    2, 0x08 /* Private */,
      42,    0,  294,    2, 0x08 /* Private */,
      43,    0,  295,    2, 0x08 /* Private */,
      44,    0,  296,    2, 0x08 /* Private */,
      45,    0,  297,    2, 0x08 /* Private */,
      46,    0,  298,    2, 0x08 /* Private */,
      47,    0,  299,    2, 0x08 /* Private */,
      48,    0,  300,    2, 0x08 /* Private */,
      49,    0,  301,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QSettings::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QSettings *_t = static_cast<tst_QSettings *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->getSetCheck(); break;
        case 3: _t->ctor_data(); break;
        case 4: _t->ctor(); break;
        case 5: _t->beginGroup(); break;
        case 6: _t->setValue(); break;
        case 7: _t->remove(); break;
        case 8: _t->contains(); break;
        case 9: _t->sync(); break;
        case 10: _t->setFallbacksEnabled(); break;
        case 11: _t->setFallbacksEnabled_data(); break;
        case 12: _t->fromFile_data(); break;
        case 13: _t->fromFile(); break;
        case 14: _t->testArrays_data(); break;
        case 15: _t->testArrays(); break;
        case 16: _t->testCaseSensitivity_data(); break;
        case 17: _t->testCaseSensitivity(); break;
        case 18: _t->testErrorHandling_data(); break;
        case 19: _t->testErrorHandling(); break;
        case 20: _t->testChildKeysAndGroups_data(); break;
        case 21: _t->testChildKeysAndGroups(); break;
        case 22: _t->testUpdateRequestEvent(); break;
        case 23: _t->testThreadSafety(); break;
        case 24: _t->testEmptyData(); break;
        case 25: _t->testEmptyKey(); break;
        case 26: _t->testResourceFiles(); break;
        case 27: _t->testRegistryShortRootNames(); break;
        case 28: _t->testRegistry32And64Bit(); break;
        case 29: _t->trailingWhitespace(); break;
        case 30: _t->isWritable_data(); break;
        case 31: _t->isWritable(); break;
        case 32: _t->registerFormat(); break;
        case 33: _t->setPath(); break;
        case 34: _t->setDefaultFormat(); break;
        case 35: _t->dontCreateNeedlessPaths(); break;
        case 36: _t->consistentRegistryStorage(); break;
        case 37: _t->rainersSyncBugOnMac_data(); break;
        case 38: _t->rainersSyncBugOnMac(); break;
        case 39: _t->recursionBug(); break;
        case 40: _t->testByteArray_data(); break;
        case 41: _t->testByteArray(); break;
        case 42: _t->testByteArrayNativeFormat(); break;
        case 43: _t->iniCodec(); break;
        case 44: _t->bom(); break;
        case 45: _t->embeddedZeroByte_data(); break;
        case 46: _t->embeddedZeroByte(); break;
        case 47: _t->testXdg(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QSettings::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QSettings.data,
      qt_meta_data_tst_QSettings,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QSettings::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QSettings::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QSettings.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QSettings::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 48)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 48;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 48)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 48;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
