/****************************************************************************
** Meta object code from reading C++ file 'tst_qbuffer.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qbuffer.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QBuffer_t {
    QByteArrayData data[28];
    char stringdata0[353];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QBuffer_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QBuffer_t qt_meta_stringdata_tst_QBuffer = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_QBuffer"
QT_MOC_LITERAL(1, 12, 4), // "open"
QT_MOC_LITERAL(2, 17, 0), // ""
QT_MOC_LITERAL(3, 18, 11), // "getSetCheck"
QT_MOC_LITERAL(4, 30, 9), // "readBlock"
QT_MOC_LITERAL(5, 40, 16), // "readBlockPastEnd"
QT_MOC_LITERAL(6, 57, 15), // "writeBlock_data"
QT_MOC_LITERAL(7, 73, 10), // "writeBlock"
QT_MOC_LITERAL(8, 84, 4), // "seek"
QT_MOC_LITERAL(9, 89, 13), // "seekTest_data"
QT_MOC_LITERAL(10, 103, 8), // "seekTest"
QT_MOC_LITERAL(11, 112, 12), // "read_rawdata"
QT_MOC_LITERAL(12, 125, 12), // "isSequential"
QT_MOC_LITERAL(13, 138, 15), // "signalTest_data"
QT_MOC_LITERAL(14, 154, 10), // "signalTest"
QT_MOC_LITERAL(15, 165, 18), // "isClosedAfterClose"
QT_MOC_LITERAL(16, 184, 13), // "readLine_data"
QT_MOC_LITERAL(17, 198, 8), // "readLine"
QT_MOC_LITERAL(18, 207, 16), // "canReadLine_data"
QT_MOC_LITERAL(19, 224, 11), // "canReadLine"
QT_MOC_LITERAL(20, 236, 5), // "atEnd"
QT_MOC_LITERAL(21, 242, 18), // "readLineBoundaries"
QT_MOC_LITERAL(22, 261, 15), // "getAndUngetChar"
QT_MOC_LITERAL(23, 277, 26), // "writeAfterQByteArrayResize"
QT_MOC_LITERAL(24, 304, 9), // "read_null"
QT_MOC_LITERAL(25, 314, 13), // "readyReadSlot"
QT_MOC_LITERAL(26, 328, 16), // "bytesWrittenSlot"
QT_MOC_LITERAL(27, 345, 7) // "written"

    },
    "tst_QBuffer\0open\0\0getSetCheck\0readBlock\0"
    "readBlockPastEnd\0writeBlock_data\0"
    "writeBlock\0seek\0seekTest_data\0seekTest\0"
    "read_rawdata\0isSequential\0signalTest_data\0"
    "signalTest\0isClosedAfterClose\0"
    "readLine_data\0readLine\0canReadLine_data\0"
    "canReadLine\0atEnd\0readLineBoundaries\0"
    "getAndUngetChar\0writeAfterQByteArrayResize\0"
    "read_null\0readyReadSlot\0bytesWrittenSlot\0"
    "written"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QBuffer[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      25,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  139,    2, 0x08 /* Private */,
       3,    0,  140,    2, 0x08 /* Private */,
       4,    0,  141,    2, 0x08 /* Private */,
       5,    0,  142,    2, 0x08 /* Private */,
       6,    0,  143,    2, 0x08 /* Private */,
       7,    0,  144,    2, 0x08 /* Private */,
       8,    0,  145,    2, 0x08 /* Private */,
       9,    0,  146,    2, 0x08 /* Private */,
      10,    0,  147,    2, 0x08 /* Private */,
      11,    0,  148,    2, 0x08 /* Private */,
      12,    0,  149,    2, 0x08 /* Private */,
      13,    0,  150,    2, 0x08 /* Private */,
      14,    0,  151,    2, 0x08 /* Private */,
      15,    0,  152,    2, 0x08 /* Private */,
      16,    0,  153,    2, 0x08 /* Private */,
      17,    0,  154,    2, 0x08 /* Private */,
      18,    0,  155,    2, 0x08 /* Private */,
      19,    0,  156,    2, 0x08 /* Private */,
      20,    0,  157,    2, 0x08 /* Private */,
      21,    0,  158,    2, 0x08 /* Private */,
      22,    0,  159,    2, 0x08 /* Private */,
      23,    0,  160,    2, 0x08 /* Private */,
      24,    0,  161,    2, 0x08 /* Private */,
      25,    0,  162,    2, 0x09 /* Protected */,
      26,    1,  163,    2, 0x09 /* Protected */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::LongLong,   27,

       0        // eod
};

void tst_QBuffer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QBuffer *_t = static_cast<tst_QBuffer *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->open(); break;
        case 1: _t->getSetCheck(); break;
        case 2: _t->readBlock(); break;
        case 3: _t->readBlockPastEnd(); break;
        case 4: _t->writeBlock_data(); break;
        case 5: _t->writeBlock(); break;
        case 6: _t->seek(); break;
        case 7: _t->seekTest_data(); break;
        case 8: _t->seekTest(); break;
        case 9: _t->read_rawdata(); break;
        case 10: _t->isSequential(); break;
        case 11: _t->signalTest_data(); break;
        case 12: _t->signalTest(); break;
        case 13: _t->isClosedAfterClose(); break;
        case 14: _t->readLine_data(); break;
        case 15: _t->readLine(); break;
        case 16: _t->canReadLine_data(); break;
        case 17: _t->canReadLine(); break;
        case 18: _t->atEnd(); break;
        case 19: _t->readLineBoundaries(); break;
        case 20: _t->getAndUngetChar(); break;
        case 21: _t->writeAfterQByteArrayResize(); break;
        case 22: _t->read_null(); break;
        case 23: _t->readyReadSlot(); break;
        case 24: _t->bytesWrittenSlot((*reinterpret_cast< qint64(*)>(_a[1]))); break;
        default: ;
        }
    }
}

const QMetaObject tst_QBuffer::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QBuffer.data,
      qt_meta_data_tst_QBuffer,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QBuffer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QBuffer::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QBuffer.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QBuffer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 25)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 25;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 25)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 25;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
