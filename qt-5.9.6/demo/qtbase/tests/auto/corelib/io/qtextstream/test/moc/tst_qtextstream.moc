/****************************************************************************
** Meta object code from reading C++ file 'tst_qtextstream.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qtextstream.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QTextStream_t {
    QByteArrayData data[126];
    char stringdata0[2999];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QTextStream_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QTextStream_t qt_meta_stringdata_tst_QTextStream = {
    {
QT_MOC_LITERAL(0, 0, 15), // "tst_QTextStream"
QT_MOC_LITERAL(1, 16, 12), // "initTestCase"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 7), // "cleanup"
QT_MOC_LITERAL(4, 38, 15), // "cleanupTestCase"
QT_MOC_LITERAL(5, 54, 11), // "getSetCheck"
QT_MOC_LITERAL(6, 66, 12), // "construction"
QT_MOC_LITERAL(7, 79, 23), // "readLineFromDevice_data"
QT_MOC_LITERAL(8, 103, 18), // "readLineFromDevice"
QT_MOC_LITERAL(9, 122, 23), // "readLineFromString_data"
QT_MOC_LITERAL(10, 146, 18), // "readLineFromString"
QT_MOC_LITERAL(11, 165, 27), // "readLineFromTextDevice_data"
QT_MOC_LITERAL(12, 193, 22), // "readLineFromTextDevice"
QT_MOC_LITERAL(13, 216, 17), // "readLineUntilNull"
QT_MOC_LITERAL(14, 234, 19), // "readLineMaxlen_data"
QT_MOC_LITERAL(15, 254, 14), // "readLineMaxlen"
QT_MOC_LITERAL(16, 269, 23), // "readLinesFromBufferCRCR"
QT_MOC_LITERAL(17, 293, 12), // "readLineInto"
QT_MOC_LITERAL(18, 306, 22), // "readAllFromDevice_data"
QT_MOC_LITERAL(19, 329, 17), // "readAllFromDevice"
QT_MOC_LITERAL(20, 347, 22), // "readAllFromString_data"
QT_MOC_LITERAL(21, 370, 17), // "readAllFromString"
QT_MOC_LITERAL(22, 388, 34), // "readLineFromStringThenChangeS..."
QT_MOC_LITERAL(23, 423, 9), // "setDevice"
QT_MOC_LITERAL(24, 433, 31), // "QChar_operators_FromDevice_data"
QT_MOC_LITERAL(25, 465, 26), // "QChar_operators_FromDevice"
QT_MOC_LITERAL(26, 492, 30), // "char_operators_FromDevice_data"
QT_MOC_LITERAL(27, 523, 25), // "char_operators_FromDevice"
QT_MOC_LITERAL(28, 549, 41), // "signedShort_read_operator_Fro..."
QT_MOC_LITERAL(29, 591, 36), // "signedShort_read_operator_Fro..."
QT_MOC_LITERAL(30, 628, 43), // "unsignedShort_read_operator_F..."
QT_MOC_LITERAL(31, 672, 38), // "unsignedShort_read_operator_F..."
QT_MOC_LITERAL(32, 711, 39), // "signedInt_read_operator_FromD..."
QT_MOC_LITERAL(33, 751, 34), // "signedInt_read_operator_FromD..."
QT_MOC_LITERAL(34, 786, 41), // "unsignedInt_read_operator_Fro..."
QT_MOC_LITERAL(35, 828, 36), // "unsignedInt_read_operator_Fro..."
QT_MOC_LITERAL(36, 865, 39), // "qlonglong_read_operator_FromD..."
QT_MOC_LITERAL(37, 905, 34), // "qlonglong_read_operator_FromD..."
QT_MOC_LITERAL(38, 940, 40), // "qulonglong_read_operator_From..."
QT_MOC_LITERAL(39, 981, 35), // "qulonglong_read_operator_From..."
QT_MOC_LITERAL(40, 1017, 40), // "signedShort_write_operator_To..."
QT_MOC_LITERAL(41, 1058, 35), // "signedShort_write_operator_To..."
QT_MOC_LITERAL(42, 1094, 42), // "unsignedShort_write_operator_..."
QT_MOC_LITERAL(43, 1137, 37), // "unsignedShort_write_operator_..."
QT_MOC_LITERAL(44, 1175, 38), // "signedInt_write_operator_ToDe..."
QT_MOC_LITERAL(45, 1214, 33), // "signedInt_write_operator_ToDe..."
QT_MOC_LITERAL(46, 1248, 40), // "unsignedInt_write_operator_To..."
QT_MOC_LITERAL(47, 1289, 35), // "unsignedInt_write_operator_To..."
QT_MOC_LITERAL(48, 1325, 38), // "qlonglong_write_operator_ToDe..."
QT_MOC_LITERAL(49, 1364, 33), // "qlonglong_write_operator_ToDe..."
QT_MOC_LITERAL(50, 1398, 39), // "qulonglong_write_operator_ToD..."
QT_MOC_LITERAL(51, 1438, 34), // "qulonglong_write_operator_ToD..."
QT_MOC_LITERAL(52, 1473, 25), // "int_read_with_locale_data"
QT_MOC_LITERAL(53, 1499, 20), // "int_read_with_locale"
QT_MOC_LITERAL(54, 1520, 26), // "int_write_with_locale_data"
QT_MOC_LITERAL(55, 1547, 21), // "int_write_with_locale"
QT_MOC_LITERAL(56, 1569, 35), // "float_read_operator_FromDevic..."
QT_MOC_LITERAL(57, 1605, 30), // "float_read_operator_FromDevice"
QT_MOC_LITERAL(58, 1636, 36), // "double_read_operator_FromDevi..."
QT_MOC_LITERAL(59, 1673, 31), // "double_read_operator_FromDevice"
QT_MOC_LITERAL(60, 1705, 34), // "float_write_operator_ToDevice..."
QT_MOC_LITERAL(61, 1740, 29), // "float_write_operator_ToDevice"
QT_MOC_LITERAL(62, 1770, 35), // "double_write_operator_ToDevic..."
QT_MOC_LITERAL(63, 1806, 30), // "double_write_operator_ToDevice"
QT_MOC_LITERAL(64, 1837, 28), // "double_write_with_flags_data"
QT_MOC_LITERAL(65, 1866, 23), // "double_write_with_flags"
QT_MOC_LITERAL(66, 1890, 32), // "double_write_with_precision_data"
QT_MOC_LITERAL(67, 1923, 27), // "double_write_with_precision"
QT_MOC_LITERAL(68, 1951, 37), // "charPtr_read_operator_FromDev..."
QT_MOC_LITERAL(69, 1989, 32), // "charPtr_read_operator_FromDevice"
QT_MOC_LITERAL(70, 2022, 39), // "stringRef_read_operator_FromD..."
QT_MOC_LITERAL(71, 2062, 34), // "stringRef_read_operator_FromD..."
QT_MOC_LITERAL(72, 2097, 39), // "byteArray_read_operator_FromD..."
QT_MOC_LITERAL(73, 2137, 34), // "byteArray_read_operator_FromD..."
QT_MOC_LITERAL(74, 2172, 35), // "string_write_operator_ToDevic..."
QT_MOC_LITERAL(75, 2208, 30), // "string_write_operator_ToDevice"
QT_MOC_LITERAL(76, 2239, 36), // "latin1String_write_operator_T..."
QT_MOC_LITERAL(77, 2276, 33), // "stringref_write_operator_ToDe..."
QT_MOC_LITERAL(78, 2310, 19), // "skipWhiteSpace_data"
QT_MOC_LITERAL(79, 2330, 14), // "skipWhiteSpace"
QT_MOC_LITERAL(80, 2345, 14), // "lineCount_data"
QT_MOC_LITERAL(81, 2360, 9), // "lineCount"
QT_MOC_LITERAL(82, 2370, 11), // "performance"
QT_MOC_LITERAL(83, 2382, 12), // "hexTest_data"
QT_MOC_LITERAL(84, 2395, 7), // "hexTest"
QT_MOC_LITERAL(85, 2403, 12), // "binTest_data"
QT_MOC_LITERAL(86, 2416, 7), // "binTest"
QT_MOC_LITERAL(87, 2424, 12), // "octTest_data"
QT_MOC_LITERAL(88, 2437, 7), // "octTest"
QT_MOC_LITERAL(89, 2445, 15), // "zeroTermination"
QT_MOC_LITERAL(90, 2461, 14), // "ws_manipulator"
QT_MOC_LITERAL(91, 2476, 18), // "stillOpenWhenAtEnd"
QT_MOC_LITERAL(92, 2495, 17), // "readNewlines_data"
QT_MOC_LITERAL(93, 2513, 12), // "readNewlines"
QT_MOC_LITERAL(94, 2526, 4), // "seek"
QT_MOC_LITERAL(95, 2531, 3), // "pos"
QT_MOC_LITERAL(96, 2535, 4), // "pos2"
QT_MOC_LITERAL(97, 2540, 13), // "pos3LargeFile"
QT_MOC_LITERAL(98, 2554, 9), // "readStdin"
QT_MOC_LITERAL(99, 2564, 16), // "readAllFromStdin"
QT_MOC_LITERAL(100, 2581, 17), // "readLineFromStdin"
QT_MOC_LITERAL(101, 2599, 4), // "read"
QT_MOC_LITERAL(102, 2604, 5), // "qbool"
QT_MOC_LITERAL(103, 2610, 10), // "forcePoint"
QT_MOC_LITERAL(104, 2621, 9), // "forceSign"
QT_MOC_LITERAL(105, 2631, 10), // "read0d0d0a"
QT_MOC_LITERAL(106, 2642, 16), // "numeralCase_data"
QT_MOC_LITERAL(107, 2659, 11), // "numeralCase"
QT_MOC_LITERAL(108, 2671, 6), // "nanInf"
QT_MOC_LITERAL(109, 2678, 35), // "utf8IncompleteAtBufferBoundar..."
QT_MOC_LITERAL(110, 2714, 30), // "utf8IncompleteAtBufferBoundary"
QT_MOC_LITERAL(111, 2745, 19), // "writeSeekWriteNoBOM"
QT_MOC_LITERAL(112, 2765, 21), // "status_real_read_data"
QT_MOC_LITERAL(113, 2787, 16), // "status_real_read"
QT_MOC_LITERAL(114, 2804, 19), // "status_integer_read"
QT_MOC_LITERAL(115, 2824, 16), // "status_word_read"
QT_MOC_LITERAL(116, 2841, 18), // "status_write_error"
QT_MOC_LITERAL(117, 2860, 8), // "useCase1"
QT_MOC_LITERAL(118, 2869, 8), // "useCase2"
QT_MOC_LITERAL(119, 2878, 17), // "manipulators_data"
QT_MOC_LITERAL(120, 2896, 12), // "manipulators"
QT_MOC_LITERAL(121, 2909, 11), // "generateBOM"
QT_MOC_LITERAL(122, 2921, 27), // "readBomSeekBackReadBomAgain"
QT_MOC_LITERAL(123, 2949, 20), // "alignAccountingStyle"
QT_MOC_LITERAL(124, 2970, 8), // "setCodec"
QT_MOC_LITERAL(125, 2979, 19) // "textModeOnEmptyRead"

    },
    "tst_QTextStream\0initTestCase\0\0cleanup\0"
    "cleanupTestCase\0getSetCheck\0construction\0"
    "readLineFromDevice_data\0readLineFromDevice\0"
    "readLineFromString_data\0readLineFromString\0"
    "readLineFromTextDevice_data\0"
    "readLineFromTextDevice\0readLineUntilNull\0"
    "readLineMaxlen_data\0readLineMaxlen\0"
    "readLinesFromBufferCRCR\0readLineInto\0"
    "readAllFromDevice_data\0readAllFromDevice\0"
    "readAllFromString_data\0readAllFromString\0"
    "readLineFromStringThenChangeString\0"
    "setDevice\0QChar_operators_FromDevice_data\0"
    "QChar_operators_FromDevice\0"
    "char_operators_FromDevice_data\0"
    "char_operators_FromDevice\0"
    "signedShort_read_operator_FromDevice_data\0"
    "signedShort_read_operator_FromDevice\0"
    "unsignedShort_read_operator_FromDevice_data\0"
    "unsignedShort_read_operator_FromDevice\0"
    "signedInt_read_operator_FromDevice_data\0"
    "signedInt_read_operator_FromDevice\0"
    "unsignedInt_read_operator_FromDevice_data\0"
    "unsignedInt_read_operator_FromDevice\0"
    "qlonglong_read_operator_FromDevice_data\0"
    "qlonglong_read_operator_FromDevice\0"
    "qulonglong_read_operator_FromDevice_data\0"
    "qulonglong_read_operator_FromDevice\0"
    "signedShort_write_operator_ToDevice_data\0"
    "signedShort_write_operator_ToDevice\0"
    "unsignedShort_write_operator_ToDevice_data\0"
    "unsignedShort_write_operator_ToDevice\0"
    "signedInt_write_operator_ToDevice_data\0"
    "signedInt_write_operator_ToDevice\0"
    "unsignedInt_write_operator_ToDevice_data\0"
    "unsignedInt_write_operator_ToDevice\0"
    "qlonglong_write_operator_ToDevice_data\0"
    "qlonglong_write_operator_ToDevice\0"
    "qulonglong_write_operator_ToDevice_data\0"
    "qulonglong_write_operator_ToDevice\0"
    "int_read_with_locale_data\0"
    "int_read_with_locale\0int_write_with_locale_data\0"
    "int_write_with_locale\0"
    "float_read_operator_FromDevice_data\0"
    "float_read_operator_FromDevice\0"
    "double_read_operator_FromDevice_data\0"
    "double_read_operator_FromDevice\0"
    "float_write_operator_ToDevice_data\0"
    "float_write_operator_ToDevice\0"
    "double_write_operator_ToDevice_data\0"
    "double_write_operator_ToDevice\0"
    "double_write_with_flags_data\0"
    "double_write_with_flags\0"
    "double_write_with_precision_data\0"
    "double_write_with_precision\0"
    "charPtr_read_operator_FromDevice_data\0"
    "charPtr_read_operator_FromDevice\0"
    "stringRef_read_operator_FromDevice_data\0"
    "stringRef_read_operator_FromDevice\0"
    "byteArray_read_operator_FromDevice_data\0"
    "byteArray_read_operator_FromDevice\0"
    "string_write_operator_ToDevice_data\0"
    "string_write_operator_ToDevice\0"
    "latin1String_write_operator_ToDevice\0"
    "stringref_write_operator_ToDevice\0"
    "skipWhiteSpace_data\0skipWhiteSpace\0"
    "lineCount_data\0lineCount\0performance\0"
    "hexTest_data\0hexTest\0binTest_data\0"
    "binTest\0octTest_data\0octTest\0"
    "zeroTermination\0ws_manipulator\0"
    "stillOpenWhenAtEnd\0readNewlines_data\0"
    "readNewlines\0seek\0pos\0pos2\0pos3LargeFile\0"
    "readStdin\0readAllFromStdin\0readLineFromStdin\0"
    "read\0qbool\0forcePoint\0forceSign\0"
    "read0d0d0a\0numeralCase_data\0numeralCase\0"
    "nanInf\0utf8IncompleteAtBufferBoundary_data\0"
    "utf8IncompleteAtBufferBoundary\0"
    "writeSeekWriteNoBOM\0status_real_read_data\0"
    "status_real_read\0status_integer_read\0"
    "status_word_read\0status_write_error\0"
    "useCase1\0useCase2\0manipulators_data\0"
    "manipulators\0generateBOM\0"
    "readBomSeekBackReadBomAgain\0"
    "alignAccountingStyle\0setCodec\0"
    "textModeOnEmptyRead"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QTextStream[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
     124,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  634,    2, 0x0a /* Public */,
       3,    0,  635,    2, 0x0a /* Public */,
       4,    0,  636,    2, 0x0a /* Public */,
       5,    0,  637,    2, 0x08 /* Private */,
       6,    0,  638,    2, 0x08 /* Private */,
       7,    0,  639,    2, 0x08 /* Private */,
       8,    0,  640,    2, 0x08 /* Private */,
       9,    0,  641,    2, 0x08 /* Private */,
      10,    0,  642,    2, 0x08 /* Private */,
      11,    0,  643,    2, 0x08 /* Private */,
      12,    0,  644,    2, 0x08 /* Private */,
      13,    0,  645,    2, 0x08 /* Private */,
      14,    0,  646,    2, 0x08 /* Private */,
      15,    0,  647,    2, 0x08 /* Private */,
      16,    0,  648,    2, 0x08 /* Private */,
      17,    0,  649,    2, 0x08 /* Private */,
      18,    0,  650,    2, 0x08 /* Private */,
      19,    0,  651,    2, 0x08 /* Private */,
      20,    0,  652,    2, 0x08 /* Private */,
      21,    0,  653,    2, 0x08 /* Private */,
      22,    0,  654,    2, 0x08 /* Private */,
      23,    0,  655,    2, 0x08 /* Private */,
      24,    0,  656,    2, 0x08 /* Private */,
      25,    0,  657,    2, 0x08 /* Private */,
      26,    0,  658,    2, 0x08 /* Private */,
      27,    0,  659,    2, 0x08 /* Private */,
      28,    0,  660,    2, 0x08 /* Private */,
      29,    0,  661,    2, 0x08 /* Private */,
      30,    0,  662,    2, 0x08 /* Private */,
      31,    0,  663,    2, 0x08 /* Private */,
      32,    0,  664,    2, 0x08 /* Private */,
      33,    0,  665,    2, 0x08 /* Private */,
      34,    0,  666,    2, 0x08 /* Private */,
      35,    0,  667,    2, 0x08 /* Private */,
      36,    0,  668,    2, 0x08 /* Private */,
      37,    0,  669,    2, 0x08 /* Private */,
      38,    0,  670,    2, 0x08 /* Private */,
      39,    0,  671,    2, 0x08 /* Private */,
      40,    0,  672,    2, 0x08 /* Private */,
      41,    0,  673,    2, 0x08 /* Private */,
      42,    0,  674,    2, 0x08 /* Private */,
      43,    0,  675,    2, 0x08 /* Private */,
      44,    0,  676,    2, 0x08 /* Private */,
      45,    0,  677,    2, 0x08 /* Private */,
      46,    0,  678,    2, 0x08 /* Private */,
      47,    0,  679,    2, 0x08 /* Private */,
      48,    0,  680,    2, 0x08 /* Private */,
      49,    0,  681,    2, 0x08 /* Private */,
      50,    0,  682,    2, 0x08 /* Private */,
      51,    0,  683,    2, 0x08 /* Private */,
      52,    0,  684,    2, 0x08 /* Private */,
      53,    0,  685,    2, 0x08 /* Private */,
      54,    0,  686,    2, 0x08 /* Private */,
      55,    0,  687,    2, 0x08 /* Private */,
      56,    0,  688,    2, 0x08 /* Private */,
      57,    0,  689,    2, 0x08 /* Private */,
      58,    0,  690,    2, 0x08 /* Private */,
      59,    0,  691,    2, 0x08 /* Private */,
      60,    0,  692,    2, 0x08 /* Private */,
      61,    0,  693,    2, 0x08 /* Private */,
      62,    0,  694,    2, 0x08 /* Private */,
      63,    0,  695,    2, 0x08 /* Private */,
      64,    0,  696,    2, 0x08 /* Private */,
      65,    0,  697,    2, 0x08 /* Private */,
      66,    0,  698,    2, 0x08 /* Private */,
      67,    0,  699,    2, 0x08 /* Private */,
      68,    0,  700,    2, 0x08 /* Private */,
      69,    0,  701,    2, 0x08 /* Private */,
      70,    0,  702,    2, 0x08 /* Private */,
      71,    0,  703,    2, 0x08 /* Private */,
      72,    0,  704,    2, 0x08 /* Private */,
      73,    0,  705,    2, 0x08 /* Private */,
      74,    0,  706,    2, 0x08 /* Private */,
      75,    0,  707,    2, 0x08 /* Private */,
      76,    0,  708,    2, 0x08 /* Private */,
      77,    0,  709,    2, 0x08 /* Private */,
      78,    0,  710,    2, 0x08 /* Private */,
      79,    0,  711,    2, 0x08 /* Private */,
      80,    0,  712,    2, 0x08 /* Private */,
      81,    0,  713,    2, 0x08 /* Private */,
      82,    0,  714,    2, 0x08 /* Private */,
      83,    0,  715,    2, 0x08 /* Private */,
      84,    0,  716,    2, 0x08 /* Private */,
      85,    0,  717,    2, 0x08 /* Private */,
      86,    0,  718,    2, 0x08 /* Private */,
      87,    0,  719,    2, 0x08 /* Private */,
      88,    0,  720,    2, 0x08 /* Private */,
      89,    0,  721,    2, 0x08 /* Private */,
      90,    0,  722,    2, 0x08 /* Private */,
      91,    0,  723,    2, 0x08 /* Private */,
      92,    0,  724,    2, 0x08 /* Private */,
      93,    0,  725,    2, 0x08 /* Private */,
      94,    0,  726,    2, 0x08 /* Private */,
      95,    0,  727,    2, 0x08 /* Private */,
      96,    0,  728,    2, 0x08 /* Private */,
      97,    0,  729,    2, 0x08 /* Private */,
      98,    0,  730,    2, 0x08 /* Private */,
      99,    0,  731,    2, 0x08 /* Private */,
     100,    0,  732,    2, 0x08 /* Private */,
     101,    0,  733,    2, 0x08 /* Private */,
     102,    0,  734,    2, 0x08 /* Private */,
     103,    0,  735,    2, 0x08 /* Private */,
     104,    0,  736,    2, 0x08 /* Private */,
     105,    0,  737,    2, 0x08 /* Private */,
     106,    0,  738,    2, 0x08 /* Private */,
     107,    0,  739,    2, 0x08 /* Private */,
     108,    0,  740,    2, 0x08 /* Private */,
     109,    0,  741,    2, 0x08 /* Private */,
     110,    0,  742,    2, 0x08 /* Private */,
     111,    0,  743,    2, 0x08 /* Private */,
     112,    0,  744,    2, 0x08 /* Private */,
     113,    0,  745,    2, 0x08 /* Private */,
     114,    0,  746,    2, 0x08 /* Private */,
     115,    0,  747,    2, 0x08 /* Private */,
     116,    0,  748,    2, 0x08 /* Private */,
     117,    0,  749,    2, 0x08 /* Private */,
     118,    0,  750,    2, 0x08 /* Private */,
     119,    0,  751,    2, 0x08 /* Private */,
     120,    0,  752,    2, 0x08 /* Private */,
     121,    0,  753,    2, 0x08 /* Private */,
     122,    0,  754,    2, 0x08 /* Private */,
     123,    0,  755,    2, 0x08 /* Private */,
     124,    0,  756,    2, 0x08 /* Private */,
     125,    0,  757,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QTextStream::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QTextStream *_t = static_cast<tst_QTextStream *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->cleanupTestCase(); break;
        case 3: _t->getSetCheck(); break;
        case 4: _t->construction(); break;
        case 5: _t->readLineFromDevice_data(); break;
        case 6: _t->readLineFromDevice(); break;
        case 7: _t->readLineFromString_data(); break;
        case 8: _t->readLineFromString(); break;
        case 9: _t->readLineFromTextDevice_data(); break;
        case 10: _t->readLineFromTextDevice(); break;
        case 11: _t->readLineUntilNull(); break;
        case 12: _t->readLineMaxlen_data(); break;
        case 13: _t->readLineMaxlen(); break;
        case 14: _t->readLinesFromBufferCRCR(); break;
        case 15: _t->readLineInto(); break;
        case 16: _t->readAllFromDevice_data(); break;
        case 17: _t->readAllFromDevice(); break;
        case 18: _t->readAllFromString_data(); break;
        case 19: _t->readAllFromString(); break;
        case 20: _t->readLineFromStringThenChangeString(); break;
        case 21: _t->setDevice(); break;
        case 22: _t->QChar_operators_FromDevice_data(); break;
        case 23: _t->QChar_operators_FromDevice(); break;
        case 24: _t->char_operators_FromDevice_data(); break;
        case 25: _t->char_operators_FromDevice(); break;
        case 26: _t->signedShort_read_operator_FromDevice_data(); break;
        case 27: _t->signedShort_read_operator_FromDevice(); break;
        case 28: _t->unsignedShort_read_operator_FromDevice_data(); break;
        case 29: _t->unsignedShort_read_operator_FromDevice(); break;
        case 30: _t->signedInt_read_operator_FromDevice_data(); break;
        case 31: _t->signedInt_read_operator_FromDevice(); break;
        case 32: _t->unsignedInt_read_operator_FromDevice_data(); break;
        case 33: _t->unsignedInt_read_operator_FromDevice(); break;
        case 34: _t->qlonglong_read_operator_FromDevice_data(); break;
        case 35: _t->qlonglong_read_operator_FromDevice(); break;
        case 36: _t->qulonglong_read_operator_FromDevice_data(); break;
        case 37: _t->qulonglong_read_operator_FromDevice(); break;
        case 38: _t->signedShort_write_operator_ToDevice_data(); break;
        case 39: _t->signedShort_write_operator_ToDevice(); break;
        case 40: _t->unsignedShort_write_operator_ToDevice_data(); break;
        case 41: _t->unsignedShort_write_operator_ToDevice(); break;
        case 42: _t->signedInt_write_operator_ToDevice_data(); break;
        case 43: _t->signedInt_write_operator_ToDevice(); break;
        case 44: _t->unsignedInt_write_operator_ToDevice_data(); break;
        case 45: _t->unsignedInt_write_operator_ToDevice(); break;
        case 46: _t->qlonglong_write_operator_ToDevice_data(); break;
        case 47: _t->qlonglong_write_operator_ToDevice(); break;
        case 48: _t->qulonglong_write_operator_ToDevice_data(); break;
        case 49: _t->qulonglong_write_operator_ToDevice(); break;
        case 50: _t->int_read_with_locale_data(); break;
        case 51: _t->int_read_with_locale(); break;
        case 52: _t->int_write_with_locale_data(); break;
        case 53: _t->int_write_with_locale(); break;
        case 54: _t->float_read_operator_FromDevice_data(); break;
        case 55: _t->float_read_operator_FromDevice(); break;
        case 56: _t->double_read_operator_FromDevice_data(); break;
        case 57: _t->double_read_operator_FromDevice(); break;
        case 58: _t->float_write_operator_ToDevice_data(); break;
        case 59: _t->float_write_operator_ToDevice(); break;
        case 60: _t->double_write_operator_ToDevice_data(); break;
        case 61: _t->double_write_operator_ToDevice(); break;
        case 62: _t->double_write_with_flags_data(); break;
        case 63: _t->double_write_with_flags(); break;
        case 64: _t->double_write_with_precision_data(); break;
        case 65: _t->double_write_with_precision(); break;
        case 66: _t->charPtr_read_operator_FromDevice_data(); break;
        case 67: _t->charPtr_read_operator_FromDevice(); break;
        case 68: _t->stringRef_read_operator_FromDevice_data(); break;
        case 69: _t->stringRef_read_operator_FromDevice(); break;
        case 70: _t->byteArray_read_operator_FromDevice_data(); break;
        case 71: _t->byteArray_read_operator_FromDevice(); break;
        case 72: _t->string_write_operator_ToDevice_data(); break;
        case 73: _t->string_write_operator_ToDevice(); break;
        case 74: _t->latin1String_write_operator_ToDevice(); break;
        case 75: _t->stringref_write_operator_ToDevice(); break;
        case 76: _t->skipWhiteSpace_data(); break;
        case 77: _t->skipWhiteSpace(); break;
        case 78: _t->lineCount_data(); break;
        case 79: _t->lineCount(); break;
        case 80: _t->performance(); break;
        case 81: _t->hexTest_data(); break;
        case 82: _t->hexTest(); break;
        case 83: _t->binTest_data(); break;
        case 84: _t->binTest(); break;
        case 85: _t->octTest_data(); break;
        case 86: _t->octTest(); break;
        case 87: _t->zeroTermination(); break;
        case 88: _t->ws_manipulator(); break;
        case 89: _t->stillOpenWhenAtEnd(); break;
        case 90: _t->readNewlines_data(); break;
        case 91: _t->readNewlines(); break;
        case 92: _t->seek(); break;
        case 93: _t->pos(); break;
        case 94: _t->pos2(); break;
        case 95: _t->pos3LargeFile(); break;
        case 96: _t->readStdin(); break;
        case 97: _t->readAllFromStdin(); break;
        case 98: _t->readLineFromStdin(); break;
        case 99: _t->read(); break;
        case 100: _t->qbool(); break;
        case 101: _t->forcePoint(); break;
        case 102: _t->forceSign(); break;
        case 103: _t->read0d0d0a(); break;
        case 104: _t->numeralCase_data(); break;
        case 105: _t->numeralCase(); break;
        case 106: _t->nanInf(); break;
        case 107: _t->utf8IncompleteAtBufferBoundary_data(); break;
        case 108: _t->utf8IncompleteAtBufferBoundary(); break;
        case 109: _t->writeSeekWriteNoBOM(); break;
        case 110: _t->status_real_read_data(); break;
        case 111: _t->status_real_read(); break;
        case 112: _t->status_integer_read(); break;
        case 113: _t->status_word_read(); break;
        case 114: _t->status_write_error(); break;
        case 115: _t->useCase1(); break;
        case 116: _t->useCase2(); break;
        case 117: _t->manipulators_data(); break;
        case 118: _t->manipulators(); break;
        case 119: _t->generateBOM(); break;
        case 120: _t->readBomSeekBackReadBomAgain(); break;
        case 121: _t->alignAccountingStyle(); break;
        case 122: _t->setCodec(); break;
        case 123: _t->textModeOnEmptyRead(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QTextStream::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QTextStream.data,
      qt_meta_data_tst_QTextStream,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QTextStream::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QTextStream::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QTextStream.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QTextStream::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 124)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 124;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 124)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 124;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
