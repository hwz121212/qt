/****************************************************************************
** Meta object code from reading C++ file 'tst_qreadwritelock.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qreadwritelock.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QReadWriteLock_t {
    QByteArrayData data[24];
    char stringdata0[419];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QReadWriteLock_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QReadWriteLock_t qt_meta_stringdata_tst_QReadWriteLock = {
    {
QT_MOC_LITERAL(0, 0, 18), // "tst_QReadWriteLock"
QT_MOC_LITERAL(1, 19, 17), // "constructDestruct"
QT_MOC_LITERAL(2, 37, 0), // ""
QT_MOC_LITERAL(3, 38, 14), // "readLockUnlock"
QT_MOC_LITERAL(4, 53, 15), // "writeLockUnlock"
QT_MOC_LITERAL(5, 69, 18), // "readLockUnlockLoop"
QT_MOC_LITERAL(6, 88, 19), // "writeLockUnlockLoop"
QT_MOC_LITERAL(7, 108, 12), // "readLockLoop"
QT_MOC_LITERAL(8, 121, 13), // "writeLockLoop"
QT_MOC_LITERAL(9, 135, 23), // "readWriteLockUnlockLoop"
QT_MOC_LITERAL(10, 159, 11), // "tryReadLock"
QT_MOC_LITERAL(11, 171, 12), // "tryWriteLock"
QT_MOC_LITERAL(12, 184, 20), // "readLockBlockRelease"
QT_MOC_LITERAL(13, 205, 21), // "writeLockBlockRelease"
QT_MOC_LITERAL(14, 227, 27), // "multipleReadersBlockRelease"
QT_MOC_LITERAL(15, 255, 19), // "multipleReadersLoop"
QT_MOC_LITERAL(16, 275, 19), // "multipleWritersLoop"
QT_MOC_LITERAL(17, 295, 26), // "multipleReadersWritersLoop"
QT_MOC_LITERAL(18, 322, 12), // "countingTest"
QT_MOC_LITERAL(19, 335, 14), // "limitedReaders"
QT_MOC_LITERAL(20, 350, 14), // "deleteOnUnlock"
QT_MOC_LITERAL(21, 365, 16), // "uncontendedLocks"
QT_MOC_LITERAL(22, 382, 17), // "recursiveReadLock"
QT_MOC_LITERAL(23, 400, 18) // "recursiveWriteLock"

    },
    "tst_QReadWriteLock\0constructDestruct\0"
    "\0readLockUnlock\0writeLockUnlock\0"
    "readLockUnlockLoop\0writeLockUnlockLoop\0"
    "readLockLoop\0writeLockLoop\0"
    "readWriteLockUnlockLoop\0tryReadLock\0"
    "tryWriteLock\0readLockBlockRelease\0"
    "writeLockBlockRelease\0multipleReadersBlockRelease\0"
    "multipleReadersLoop\0multipleWritersLoop\0"
    "multipleReadersWritersLoop\0countingTest\0"
    "limitedReaders\0deleteOnUnlock\0"
    "uncontendedLocks\0recursiveReadLock\0"
    "recursiveWriteLock"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QReadWriteLock[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      22,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  124,    2, 0x08 /* Private */,
       3,    0,  125,    2, 0x08 /* Private */,
       4,    0,  126,    2, 0x08 /* Private */,
       5,    0,  127,    2, 0x08 /* Private */,
       6,    0,  128,    2, 0x08 /* Private */,
       7,    0,  129,    2, 0x08 /* Private */,
       8,    0,  130,    2, 0x08 /* Private */,
       9,    0,  131,    2, 0x08 /* Private */,
      10,    0,  132,    2, 0x08 /* Private */,
      11,    0,  133,    2, 0x08 /* Private */,
      12,    0,  134,    2, 0x08 /* Private */,
      13,    0,  135,    2, 0x08 /* Private */,
      14,    0,  136,    2, 0x08 /* Private */,
      15,    0,  137,    2, 0x08 /* Private */,
      16,    0,  138,    2, 0x08 /* Private */,
      17,    0,  139,    2, 0x08 /* Private */,
      18,    0,  140,    2, 0x08 /* Private */,
      19,    0,  141,    2, 0x08 /* Private */,
      20,    0,  142,    2, 0x08 /* Private */,
      21,    0,  143,    2, 0x08 /* Private */,
      22,    0,  144,    2, 0x08 /* Private */,
      23,    0,  145,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QReadWriteLock::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QReadWriteLock *_t = static_cast<tst_QReadWriteLock *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->constructDestruct(); break;
        case 1: _t->readLockUnlock(); break;
        case 2: _t->writeLockUnlock(); break;
        case 3: _t->readLockUnlockLoop(); break;
        case 4: _t->writeLockUnlockLoop(); break;
        case 5: _t->readLockLoop(); break;
        case 6: _t->writeLockLoop(); break;
        case 7: _t->readWriteLockUnlockLoop(); break;
        case 8: _t->tryReadLock(); break;
        case 9: _t->tryWriteLock(); break;
        case 10: _t->readLockBlockRelease(); break;
        case 11: _t->writeLockBlockRelease(); break;
        case 12: _t->multipleReadersBlockRelease(); break;
        case 13: _t->multipleReadersLoop(); break;
        case 14: _t->multipleWritersLoop(); break;
        case 15: _t->multipleReadersWritersLoop(); break;
        case 16: _t->countingTest(); break;
        case 17: _t->limitedReaders(); break;
        case 18: _t->deleteOnUnlock(); break;
        case 19: _t->uncontendedLocks(); break;
        case 20: _t->recursiveReadLock(); break;
        case 21: _t->recursiveWriteLock(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QReadWriteLock::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QReadWriteLock.data,
      qt_meta_data_tst_QReadWriteLock,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QReadWriteLock::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QReadWriteLock::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QReadWriteLock.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QReadWriteLock::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 22)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 22;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 22)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 22;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
