/****************************************************************************
** Meta object code from reading C++ file 'tst_qatomicint.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qatomicint.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QAtomicInt_t {
    QByteArrayData data[32];
    char stringdata0[520];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QAtomicInt_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QAtomicInt_t qt_meta_stringdata_tst_QAtomicInt = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QAtomicInt"
QT_MOC_LITERAL(1, 15, 11), // "warningFree"
QT_MOC_LITERAL(2, 27, 0), // ""
QT_MOC_LITERAL(3, 28, 9), // "alignment"
QT_MOC_LITERAL(4, 38, 16), // "constructor_data"
QT_MOC_LITERAL(5, 55, 11), // "constructor"
QT_MOC_LITERAL(6, 67, 21), // "copy_constructor_data"
QT_MOC_LITERAL(7, 89, 16), // "copy_constructor"
QT_MOC_LITERAL(8, 106, 24), // "assignment_operator_data"
QT_MOC_LITERAL(9, 131, 19), // "assignment_operator"
QT_MOC_LITERAL(10, 151, 25), // "isReferenceCountingNative"
QT_MOC_LITERAL(11, 177, 27), // "isReferenceCountingWaitFree"
QT_MOC_LITERAL(12, 205, 8), // "ref_data"
QT_MOC_LITERAL(13, 214, 3), // "ref"
QT_MOC_LITERAL(14, 218, 10), // "deref_data"
QT_MOC_LITERAL(15, 229, 5), // "deref"
QT_MOC_LITERAL(16, 235, 18), // "isTestAndSetNative"
QT_MOC_LITERAL(17, 254, 20), // "isTestAndSetWaitFree"
QT_MOC_LITERAL(18, 275, 15), // "testAndSet_data"
QT_MOC_LITERAL(19, 291, 10), // "testAndSet"
QT_MOC_LITERAL(20, 302, 21), // "isFetchAndStoreNative"
QT_MOC_LITERAL(21, 324, 23), // "isFetchAndStoreWaitFree"
QT_MOC_LITERAL(22, 348, 18), // "fetchAndStore_data"
QT_MOC_LITERAL(23, 367, 13), // "fetchAndStore"
QT_MOC_LITERAL(24, 381, 19), // "isFetchAndAddNative"
QT_MOC_LITERAL(25, 401, 21), // "isFetchAndAddWaitFree"
QT_MOC_LITERAL(26, 423, 16), // "fetchAndAdd_data"
QT_MOC_LITERAL(27, 440, 11), // "fetchAndAdd"
QT_MOC_LITERAL(28, 452, 9), // "operators"
QT_MOC_LITERAL(29, 462, 15), // "testAndSet_loop"
QT_MOC_LITERAL(30, 478, 16), // "fetchAndAdd_loop"
QT_MOC_LITERAL(31, 495, 24) // "fetchAndAdd_threadedLoop"

    },
    "tst_QAtomicInt\0warningFree\0\0alignment\0"
    "constructor_data\0constructor\0"
    "copy_constructor_data\0copy_constructor\0"
    "assignment_operator_data\0assignment_operator\0"
    "isReferenceCountingNative\0"
    "isReferenceCountingWaitFree\0ref_data\0"
    "ref\0deref_data\0deref\0isTestAndSetNative\0"
    "isTestAndSetWaitFree\0testAndSet_data\0"
    "testAndSet\0isFetchAndStoreNative\0"
    "isFetchAndStoreWaitFree\0fetchAndStore_data\0"
    "fetchAndStore\0isFetchAndAddNative\0"
    "isFetchAndAddWaitFree\0fetchAndAdd_data\0"
    "fetchAndAdd\0operators\0testAndSet_loop\0"
    "fetchAndAdd_loop\0fetchAndAdd_threadedLoop"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QAtomicInt[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      30,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  164,    2, 0x08 /* Private */,
       3,    0,  165,    2, 0x08 /* Private */,
       4,    0,  166,    2, 0x08 /* Private */,
       5,    0,  167,    2, 0x08 /* Private */,
       6,    0,  168,    2, 0x08 /* Private */,
       7,    0,  169,    2, 0x08 /* Private */,
       8,    0,  170,    2, 0x08 /* Private */,
       9,    0,  171,    2, 0x08 /* Private */,
      10,    0,  172,    2, 0x08 /* Private */,
      11,    0,  173,    2, 0x08 /* Private */,
      12,    0,  174,    2, 0x08 /* Private */,
      13,    0,  175,    2, 0x08 /* Private */,
      14,    0,  176,    2, 0x08 /* Private */,
      15,    0,  177,    2, 0x08 /* Private */,
      16,    0,  178,    2, 0x08 /* Private */,
      17,    0,  179,    2, 0x08 /* Private */,
      18,    0,  180,    2, 0x08 /* Private */,
      19,    0,  181,    2, 0x08 /* Private */,
      20,    0,  182,    2, 0x08 /* Private */,
      21,    0,  183,    2, 0x08 /* Private */,
      22,    0,  184,    2, 0x08 /* Private */,
      23,    0,  185,    2, 0x08 /* Private */,
      24,    0,  186,    2, 0x08 /* Private */,
      25,    0,  187,    2, 0x08 /* Private */,
      26,    0,  188,    2, 0x08 /* Private */,
      27,    0,  189,    2, 0x08 /* Private */,
      28,    0,  190,    2, 0x08 /* Private */,
      29,    0,  191,    2, 0x08 /* Private */,
      30,    0,  192,    2, 0x08 /* Private */,
      31,    0,  193,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QAtomicInt::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QAtomicInt *_t = static_cast<tst_QAtomicInt *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->warningFree(); break;
        case 1: _t->alignment(); break;
        case 2: _t->constructor_data(); break;
        case 3: _t->constructor(); break;
        case 4: _t->copy_constructor_data(); break;
        case 5: _t->copy_constructor(); break;
        case 6: _t->assignment_operator_data(); break;
        case 7: _t->assignment_operator(); break;
        case 8: _t->isReferenceCountingNative(); break;
        case 9: _t->isReferenceCountingWaitFree(); break;
        case 10: _t->ref_data(); break;
        case 11: _t->ref(); break;
        case 12: _t->deref_data(); break;
        case 13: _t->deref(); break;
        case 14: _t->isTestAndSetNative(); break;
        case 15: _t->isTestAndSetWaitFree(); break;
        case 16: _t->testAndSet_data(); break;
        case 17: _t->testAndSet(); break;
        case 18: _t->isFetchAndStoreNative(); break;
        case 19: _t->isFetchAndStoreWaitFree(); break;
        case 20: _t->fetchAndStore_data(); break;
        case 21: _t->fetchAndStore(); break;
        case 22: _t->isFetchAndAddNative(); break;
        case 23: _t->isFetchAndAddWaitFree(); break;
        case 24: _t->fetchAndAdd_data(); break;
        case 25: _t->fetchAndAdd(); break;
        case 26: _t->operators(); break;
        case 27: _t->testAndSet_loop(); break;
        case 28: _t->fetchAndAdd_loop(); break;
        case 29: _t->fetchAndAdd_threadedLoop(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QAtomicInt::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QAtomicInt.data,
      qt_meta_data_tst_QAtomicInt,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QAtomicInt::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QAtomicInt::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QAtomicInt.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QAtomicInt::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 30)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 30;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 30)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 30;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
