/****************************************************************************
** Meta object code from reading C++ file 'tst_qthreadpool.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qthreadpool.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QThreadPool_t {
    QByteArrayData data[36];
    char stringdata0[564];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QThreadPool_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QThreadPool_t qt_meta_stringdata_tst_QThreadPool = {
    {
QT_MOC_LITERAL(0, 0, 15), // "tst_QThreadPool"
QT_MOC_LITERAL(1, 16, 11), // "runFunction"
QT_MOC_LITERAL(2, 28, 0), // ""
QT_MOC_LITERAL(3, 29, 23), // "createThreadRunFunction"
QT_MOC_LITERAL(4, 53, 11), // "runMultiple"
QT_MOC_LITERAL(5, 65, 12), // "waitcomplete"
QT_MOC_LITERAL(6, 78, 7), // "runTask"
QT_MOC_LITERAL(7, 86, 9), // "singleton"
QT_MOC_LITERAL(8, 96, 11), // "destruction"
QT_MOC_LITERAL(9, 108, 15), // "threadRecycling"
QT_MOC_LITERAL(10, 124, 13), // "expiryTimeout"
QT_MOC_LITERAL(11, 138, 17), // "expiryTimeoutRace"
QT_MOC_LITERAL(12, 156, 10), // "exceptions"
QT_MOC_LITERAL(13, 167, 22), // "setMaxThreadCount_data"
QT_MOC_LITERAL(14, 190, 17), // "setMaxThreadCount"
QT_MOC_LITERAL(15, 208, 38), // "setMaxThreadCountStartsAndSto..."
QT_MOC_LITERAL(16, 247, 18), // "reserveThread_data"
QT_MOC_LITERAL(17, 266, 13), // "reserveThread"
QT_MOC_LITERAL(18, 280, 18), // "releaseThread_data"
QT_MOC_LITERAL(19, 299, 13), // "releaseThread"
QT_MOC_LITERAL(20, 313, 15), // "reserveAndStart"
QT_MOC_LITERAL(21, 329, 5), // "start"
QT_MOC_LITERAL(22, 335, 8), // "tryStart"
QT_MOC_LITERAL(23, 344, 23), // "tryStartPeakThreadCount"
QT_MOC_LITERAL(24, 368, 13), // "tryStartCount"
QT_MOC_LITERAL(25, 382, 18), // "priorityStart_data"
QT_MOC_LITERAL(26, 401, 13), // "priorityStart"
QT_MOC_LITERAL(27, 415, 11), // "waitForDone"
QT_MOC_LITERAL(28, 427, 5), // "clear"
QT_MOC_LITERAL(29, 433, 6), // "cancel"
QT_MOC_LITERAL(30, 440, 7), // "tryTake"
QT_MOC_LITERAL(31, 448, 18), // "waitForDoneTimeout"
QT_MOC_LITERAL(32, 467, 31), // "destroyingWaitsForTasksToFinish"
QT_MOC_LITERAL(33, 499, 10), // "stressTest"
QT_MOC_LITERAL(34, 510, 32), // "takeAllAndIncreaseMaxThreadCount"
QT_MOC_LITERAL(35, 543, 20) // "waitForDoneAfterTake"

    },
    "tst_QThreadPool\0runFunction\0\0"
    "createThreadRunFunction\0runMultiple\0"
    "waitcomplete\0runTask\0singleton\0"
    "destruction\0threadRecycling\0expiryTimeout\0"
    "expiryTimeoutRace\0exceptions\0"
    "setMaxThreadCount_data\0setMaxThreadCount\0"
    "setMaxThreadCountStartsAndStopsThreads\0"
    "reserveThread_data\0reserveThread\0"
    "releaseThread_data\0releaseThread\0"
    "reserveAndStart\0start\0tryStart\0"
    "tryStartPeakThreadCount\0tryStartCount\0"
    "priorityStart_data\0priorityStart\0"
    "waitForDone\0clear\0cancel\0tryTake\0"
    "waitForDoneTimeout\0destroyingWaitsForTasksToFinish\0"
    "stressTest\0takeAllAndIncreaseMaxThreadCount\0"
    "waitForDoneAfterTake"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QThreadPool[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      34,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  184,    2, 0x08 /* Private */,
       3,    0,  185,    2, 0x08 /* Private */,
       4,    0,  186,    2, 0x08 /* Private */,
       5,    0,  187,    2, 0x08 /* Private */,
       6,    0,  188,    2, 0x08 /* Private */,
       7,    0,  189,    2, 0x08 /* Private */,
       8,    0,  190,    2, 0x08 /* Private */,
       9,    0,  191,    2, 0x08 /* Private */,
      10,    0,  192,    2, 0x08 /* Private */,
      11,    0,  193,    2, 0x08 /* Private */,
      12,    0,  194,    2, 0x08 /* Private */,
      13,    0,  195,    2, 0x08 /* Private */,
      14,    0,  196,    2, 0x08 /* Private */,
      15,    0,  197,    2, 0x08 /* Private */,
      16,    0,  198,    2, 0x08 /* Private */,
      17,    0,  199,    2, 0x08 /* Private */,
      18,    0,  200,    2, 0x08 /* Private */,
      19,    0,  201,    2, 0x08 /* Private */,
      20,    0,  202,    2, 0x08 /* Private */,
      21,    0,  203,    2, 0x08 /* Private */,
      22,    0,  204,    2, 0x08 /* Private */,
      23,    0,  205,    2, 0x08 /* Private */,
      24,    0,  206,    2, 0x08 /* Private */,
      25,    0,  207,    2, 0x08 /* Private */,
      26,    0,  208,    2, 0x08 /* Private */,
      27,    0,  209,    2, 0x08 /* Private */,
      28,    0,  210,    2, 0x08 /* Private */,
      29,    0,  211,    2, 0x08 /* Private */,
      30,    0,  212,    2, 0x08 /* Private */,
      31,    0,  213,    2, 0x08 /* Private */,
      32,    0,  214,    2, 0x08 /* Private */,
      33,    0,  215,    2, 0x08 /* Private */,
      34,    0,  216,    2, 0x08 /* Private */,
      35,    0,  217,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QThreadPool::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QThreadPool *_t = static_cast<tst_QThreadPool *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->runFunction(); break;
        case 1: _t->createThreadRunFunction(); break;
        case 2: _t->runMultiple(); break;
        case 3: _t->waitcomplete(); break;
        case 4: _t->runTask(); break;
        case 5: _t->singleton(); break;
        case 6: _t->destruction(); break;
        case 7: _t->threadRecycling(); break;
        case 8: _t->expiryTimeout(); break;
        case 9: _t->expiryTimeoutRace(); break;
        case 10: _t->exceptions(); break;
        case 11: _t->setMaxThreadCount_data(); break;
        case 12: _t->setMaxThreadCount(); break;
        case 13: _t->setMaxThreadCountStartsAndStopsThreads(); break;
        case 14: _t->reserveThread_data(); break;
        case 15: _t->reserveThread(); break;
        case 16: _t->releaseThread_data(); break;
        case 17: _t->releaseThread(); break;
        case 18: _t->reserveAndStart(); break;
        case 19: _t->start(); break;
        case 20: _t->tryStart(); break;
        case 21: _t->tryStartPeakThreadCount(); break;
        case 22: _t->tryStartCount(); break;
        case 23: _t->priorityStart_data(); break;
        case 24: _t->priorityStart(); break;
        case 25: _t->waitForDone(); break;
        case 26: _t->clear(); break;
        case 27: _t->cancel(); break;
        case 28: _t->tryTake(); break;
        case 29: _t->waitForDoneTimeout(); break;
        case 30: _t->destroyingWaitsForTasksToFinish(); break;
        case 31: _t->stressTest(); break;
        case 32: _t->takeAllAndIncreaseMaxThreadCount(); break;
        case 33: _t->waitForDoneAfterTake(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QThreadPool::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QThreadPool.data,
      qt_meta_data_tst_QThreadPool,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QThreadPool::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QThreadPool::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QThreadPool.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QThreadPool::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 34)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 34;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 34)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 34;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
