/****************************************************************************
** Meta object code from reading C++ file 'tst_qvariant.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qvariant.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QVariant_t {
    QByteArrayData data[161];
    char stringdata0[2623];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QVariant_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QVariant_t qt_meta_stringdata_tst_QVariant = {
    {
QT_MOC_LITERAL(0, 0, 12), // "tst_QVariant"
QT_MOC_LITERAL(1, 13, 15), // "cleanupTestCase"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 11), // "constructor"
QT_MOC_LITERAL(4, 42, 16), // "copy_constructor"
QT_MOC_LITERAL(5, 59, 24), // "constructor_invalid_data"
QT_MOC_LITERAL(6, 84, 19), // "constructor_invalid"
QT_MOC_LITERAL(7, 104, 6), // "isNull"
QT_MOC_LITERAL(8, 111, 4), // "swap"
QT_MOC_LITERAL(9, 116, 15), // "canConvert_data"
QT_MOC_LITERAL(10, 132, 10), // "canConvert"
QT_MOC_LITERAL(11, 143, 11), // "toSize_data"
QT_MOC_LITERAL(12, 155, 6), // "toSize"
QT_MOC_LITERAL(13, 162, 12), // "toSizeF_data"
QT_MOC_LITERAL(14, 175, 7), // "toSizeF"
QT_MOC_LITERAL(15, 183, 12), // "toPoint_data"
QT_MOC_LITERAL(16, 196, 7), // "toPoint"
QT_MOC_LITERAL(17, 204, 11), // "toRect_data"
QT_MOC_LITERAL(18, 216, 6), // "toRect"
QT_MOC_LITERAL(19, 223, 11), // "toChar_data"
QT_MOC_LITERAL(20, 235, 6), // "toChar"
QT_MOC_LITERAL(21, 242, 11), // "toLine_data"
QT_MOC_LITERAL(22, 254, 6), // "toLine"
QT_MOC_LITERAL(23, 261, 12), // "toLineF_data"
QT_MOC_LITERAL(24, 274, 7), // "toLineF"
QT_MOC_LITERAL(25, 282, 10), // "toInt_data"
QT_MOC_LITERAL(26, 293, 5), // "toInt"
QT_MOC_LITERAL(27, 299, 11), // "toUInt_data"
QT_MOC_LITERAL(28, 311, 6), // "toUInt"
QT_MOC_LITERAL(29, 318, 11), // "toBool_data"
QT_MOC_LITERAL(30, 330, 6), // "toBool"
QT_MOC_LITERAL(31, 337, 15), // "toLongLong_data"
QT_MOC_LITERAL(32, 353, 10), // "toLongLong"
QT_MOC_LITERAL(33, 364, 16), // "toULongLong_data"
QT_MOC_LITERAL(34, 381, 11), // "toULongLong"
QT_MOC_LITERAL(35, 393, 16), // "toByteArray_data"
QT_MOC_LITERAL(36, 410, 11), // "toByteArray"
QT_MOC_LITERAL(37, 422, 13), // "toString_data"
QT_MOC_LITERAL(38, 436, 8), // "toString"
QT_MOC_LITERAL(39, 445, 11), // "toDate_data"
QT_MOC_LITERAL(40, 457, 6), // "toDate"
QT_MOC_LITERAL(41, 464, 11), // "toTime_data"
QT_MOC_LITERAL(42, 476, 6), // "toTime"
QT_MOC_LITERAL(43, 483, 15), // "toDateTime_data"
QT_MOC_LITERAL(44, 499, 10), // "toDateTime"
QT_MOC_LITERAL(45, 510, 13), // "toDouble_data"
QT_MOC_LITERAL(46, 524, 8), // "toDouble"
QT_MOC_LITERAL(47, 533, 12), // "toFloat_data"
QT_MOC_LITERAL(48, 546, 7), // "toFloat"
QT_MOC_LITERAL(49, 554, 13), // "toPointF_data"
QT_MOC_LITERAL(50, 568, 8), // "toPointF"
QT_MOC_LITERAL(51, 577, 12), // "toRectF_data"
QT_MOC_LITERAL(52, 590, 7), // "toRectF"
QT_MOC_LITERAL(53, 598, 26), // "qvariant_cast_QObject_data"
QT_MOC_LITERAL(54, 625, 21), // "qvariant_cast_QObject"
QT_MOC_LITERAL(55, 647, 29), // "qvariant_cast_QObject_derived"
QT_MOC_LITERAL(56, 677, 29), // "qvariant_cast_QObject_wrapper"
QT_MOC_LITERAL(57, 707, 35), // "qvariant_cast_QSharedPointerQ..."
QT_MOC_LITERAL(58, 743, 8), // "toLocale"
QT_MOC_LITERAL(59, 752, 8), // "toRegExp"
QT_MOC_LITERAL(60, 761, 19), // "toRegularExpression"
QT_MOC_LITERAL(61, 781, 3), // "url"
QT_MOC_LITERAL(62, 785, 8), // "userType"
QT_MOC_LITERAL(63, 794, 13), // "basicUserType"
QT_MOC_LITERAL(64, 808, 10), // "variant_to"
QT_MOC_LITERAL(65, 819, 30), // "writeToReadFromDataStream_data"
QT_MOC_LITERAL(66, 850, 25), // "writeToReadFromDataStream"
QT_MOC_LITERAL(67, 876, 28), // "writeToReadFromOldDataStream"
QT_MOC_LITERAL(68, 905, 15), // "checkDataStream"
QT_MOC_LITERAL(69, 921, 19), // "operator_eq_eq_data"
QT_MOC_LITERAL(70, 941, 14), // "operator_eq_eq"
QT_MOC_LITERAL(71, 956, 18), // "operator_eq_eq_rhs"
QT_MOC_LITERAL(72, 975, 19), // "compareNumbers_data"
QT_MOC_LITERAL(73, 995, 14), // "compareNumbers"
QT_MOC_LITERAL(74, 1010, 13), // "typeName_data"
QT_MOC_LITERAL(75, 1024, 8), // "typeName"
QT_MOC_LITERAL(76, 1033, 10), // "typeToName"
QT_MOC_LITERAL(77, 1044, 20), // "streamInvalidVariant"
QT_MOC_LITERAL(78, 1065, 11), // "podUserType"
QT_MOC_LITERAL(79, 1077, 4), // "data"
QT_MOC_LITERAL(80, 1082, 9), // "constData"
QT_MOC_LITERAL(81, 1092, 19), // "saveLoadCustomTypes"
QT_MOC_LITERAL(82, 1112, 10), // "variantMap"
QT_MOC_LITERAL(83, 1123, 11), // "variantHash"
QT_MOC_LITERAL(84, 1135, 15), // "convertToQUint8"
QT_MOC_LITERAL(85, 1151, 15), // "comparePointers"
QT_MOC_LITERAL(86, 1167, 8), // "voidStar"
QT_MOC_LITERAL(87, 1176, 8), // "dataStar"
QT_MOC_LITERAL(88, 1185, 21), // "canConvertQStringList"
QT_MOC_LITERAL(89, 1207, 26), // "canConvertQStringList_data"
QT_MOC_LITERAL(90, 1234, 23), // "canConvertMetaTypeToInt"
QT_MOC_LITERAL(91, 1258, 32), // "variantToDateTimeWithoutWarnings"
QT_MOC_LITERAL(92, 1291, 15), // "invalidDateTime"
QT_MOC_LITERAL(93, 1307, 19), // "loadUnknownUserType"
QT_MOC_LITERAL(94, 1327, 18), // "loadBrokenUserType"
QT_MOC_LITERAL(95, 1346, 11), // "invalidDate"
QT_MOC_LITERAL(96, 1358, 18), // "compareCustomTypes"
QT_MOC_LITERAL(97, 1377, 14), // "timeToDateTime"
QT_MOC_LITERAL(98, 1392, 16), // "copyingUserTypes"
QT_MOC_LITERAL(99, 1409, 22), // "convertBoolToByteArray"
QT_MOC_LITERAL(100, 1432, 27), // "convertBoolToByteArray_data"
QT_MOC_LITERAL(101, 1460, 22), // "convertByteArrayToBool"
QT_MOC_LITERAL(102, 1483, 27), // "convertByteArrayToBool_data"
QT_MOC_LITERAL(103, 1511, 16), // "convertIterables"
QT_MOC_LITERAL(104, 1528, 16), // "toIntFromQString"
QT_MOC_LITERAL(105, 1545, 15), // "toIntFromDouble"
QT_MOC_LITERAL(106, 1561, 8), // "setValue"
QT_MOC_LITERAL(107, 1570, 22), // "fpStringRoundtrip_data"
QT_MOC_LITERAL(108, 1593, 17), // "fpStringRoundtrip"
QT_MOC_LITERAL(109, 1611, 21), // "numericalConvert_data"
QT_MOC_LITERAL(110, 1633, 16), // "numericalConvert"
QT_MOC_LITERAL(111, 1650, 15), // "moreCustomTypes"
QT_MOC_LITERAL(112, 1666, 14), // "movabilityTest"
QT_MOC_LITERAL(113, 1681, 16), // "variantInVariant"
QT_MOC_LITERAL(114, 1698, 14), // "userConversion"
QT_MOC_LITERAL(115, 1713, 20), // "modelIndexConversion"
QT_MOC_LITERAL(116, 1734, 14), // "forwardDeclare"
QT_MOC_LITERAL(117, 1749, 16), // "debugStream_data"
QT_MOC_LITERAL(118, 1766, 11), // "debugStream"
QT_MOC_LITERAL(119, 1778, 20), // "debugStreamType_data"
QT_MOC_LITERAL(120, 1799, 15), // "debugStreamType"
QT_MOC_LITERAL(121, 1815, 18), // "loadQt4Stream_data"
QT_MOC_LITERAL(122, 1834, 13), // "loadQt4Stream"
QT_MOC_LITERAL(123, 1848, 18), // "saveQt4Stream_data"
QT_MOC_LITERAL(124, 1867, 13), // "saveQt4Stream"
QT_MOC_LITERAL(125, 1881, 18), // "loadQt5Stream_data"
QT_MOC_LITERAL(126, 1900, 13), // "loadQt5Stream"
QT_MOC_LITERAL(127, 1914, 18), // "saveQt5Stream_data"
QT_MOC_LITERAL(128, 1933, 13), // "saveQt5Stream"
QT_MOC_LITERAL(129, 1947, 16), // "saveInvalid_data"
QT_MOC_LITERAL(130, 1964, 11), // "saveInvalid"
QT_MOC_LITERAL(131, 1976, 27), // "saveNewBuiltinWithOldStream"
QT_MOC_LITERAL(132, 2004, 20), // "implicitConstruction"
QT_MOC_LITERAL(133, 2025, 24), // "iterateContainerElements"
QT_MOC_LITERAL(134, 2050, 12), // "pairElements"
QT_MOC_LITERAL(135, 2063, 5), // "enums"
QT_MOC_LITERAL(136, 2069, 9), // "metaEnums"
QT_MOC_LITERAL(137, 2079, 18), // "compareSanity_data"
QT_MOC_LITERAL(138, 2098, 13), // "compareSanity"
QT_MOC_LITERAL(139, 2112, 11), // "compareRich"
QT_MOC_LITERAL(140, 2124, 28), // "accessSequentialContainerKey"
QT_MOC_LITERAL(141, 2153, 18), // "MetaEnumTest_Enum0"
QT_MOC_LITERAL(142, 2172, 24), // "MetaEnumTest_Enum0_dummy"
QT_MOC_LITERAL(143, 2197, 24), // "MetaEnumTest_Enum0_value"
QT_MOC_LITERAL(144, 2222, 21), // "MetaEnsureSignedEnum0"
QT_MOC_LITERAL(145, 2244, 18), // "MetaEnumTest_Enum1"
QT_MOC_LITERAL(146, 2263, 24), // "MetaEnumTest_Enum1_value"
QT_MOC_LITERAL(147, 2288, 27), // "MetaEnumTest_Enum1_bigValue"
QT_MOC_LITERAL(148, 2316, 18), // "MetaEnumTest_Enum3"
QT_MOC_LITERAL(149, 2335, 24), // "MetaEnumTest_Enum3_value"
QT_MOC_LITERAL(150, 2360, 27), // "MetaEnumTest_Enum3_bigValue"
QT_MOC_LITERAL(151, 2388, 30), // "MetaEnumTest_Enum3_bigNegValue"
QT_MOC_LITERAL(152, 2419, 18), // "MetaEnumTest_Enum4"
QT_MOC_LITERAL(153, 2438, 24), // "MetaEnumTest_Enum4_value"
QT_MOC_LITERAL(154, 2463, 27), // "MetaEnumTest_Enum4_bigValue"
QT_MOC_LITERAL(155, 2491, 18), // "MetaEnumTest_Enum5"
QT_MOC_LITERAL(156, 2510, 24), // "MetaEnumTest_Enum5_value"
QT_MOC_LITERAL(157, 2535, 18), // "MetaEnumTest_Enum6"
QT_MOC_LITERAL(158, 2554, 24), // "MetaEnumTest_Enum6_value"
QT_MOC_LITERAL(159, 2579, 18), // "MetaEnumTest_Enum8"
QT_MOC_LITERAL(160, 2598, 24) // "MetaEnumTest_Enum8_value"

    },
    "tst_QVariant\0cleanupTestCase\0\0constructor\0"
    "copy_constructor\0constructor_invalid_data\0"
    "constructor_invalid\0isNull\0swap\0"
    "canConvert_data\0canConvert\0toSize_data\0"
    "toSize\0toSizeF_data\0toSizeF\0toPoint_data\0"
    "toPoint\0toRect_data\0toRect\0toChar_data\0"
    "toChar\0toLine_data\0toLine\0toLineF_data\0"
    "toLineF\0toInt_data\0toInt\0toUInt_data\0"
    "toUInt\0toBool_data\0toBool\0toLongLong_data\0"
    "toLongLong\0toULongLong_data\0toULongLong\0"
    "toByteArray_data\0toByteArray\0toString_data\0"
    "toString\0toDate_data\0toDate\0toTime_data\0"
    "toTime\0toDateTime_data\0toDateTime\0"
    "toDouble_data\0toDouble\0toFloat_data\0"
    "toFloat\0toPointF_data\0toPointF\0"
    "toRectF_data\0toRectF\0qvariant_cast_QObject_data\0"
    "qvariant_cast_QObject\0"
    "qvariant_cast_QObject_derived\0"
    "qvariant_cast_QObject_wrapper\0"
    "qvariant_cast_QSharedPointerQObject\0"
    "toLocale\0toRegExp\0toRegularExpression\0"
    "url\0userType\0basicUserType\0variant_to\0"
    "writeToReadFromDataStream_data\0"
    "writeToReadFromDataStream\0"
    "writeToReadFromOldDataStream\0"
    "checkDataStream\0operator_eq_eq_data\0"
    "operator_eq_eq\0operator_eq_eq_rhs\0"
    "compareNumbers_data\0compareNumbers\0"
    "typeName_data\0typeName\0typeToName\0"
    "streamInvalidVariant\0podUserType\0data\0"
    "constData\0saveLoadCustomTypes\0variantMap\0"
    "variantHash\0convertToQUint8\0comparePointers\0"
    "voidStar\0dataStar\0canConvertQStringList\0"
    "canConvertQStringList_data\0"
    "canConvertMetaTypeToInt\0"
    "variantToDateTimeWithoutWarnings\0"
    "invalidDateTime\0loadUnknownUserType\0"
    "loadBrokenUserType\0invalidDate\0"
    "compareCustomTypes\0timeToDateTime\0"
    "copyingUserTypes\0convertBoolToByteArray\0"
    "convertBoolToByteArray_data\0"
    "convertByteArrayToBool\0"
    "convertByteArrayToBool_data\0"
    "convertIterables\0toIntFromQString\0"
    "toIntFromDouble\0setValue\0"
    "fpStringRoundtrip_data\0fpStringRoundtrip\0"
    "numericalConvert_data\0numericalConvert\0"
    "moreCustomTypes\0movabilityTest\0"
    "variantInVariant\0userConversion\0"
    "modelIndexConversion\0forwardDeclare\0"
    "debugStream_data\0debugStream\0"
    "debugStreamType_data\0debugStreamType\0"
    "loadQt4Stream_data\0loadQt4Stream\0"
    "saveQt4Stream_data\0saveQt4Stream\0"
    "loadQt5Stream_data\0loadQt5Stream\0"
    "saveQt5Stream_data\0saveQt5Stream\0"
    "saveInvalid_data\0saveInvalid\0"
    "saveNewBuiltinWithOldStream\0"
    "implicitConstruction\0iterateContainerElements\0"
    "pairElements\0enums\0metaEnums\0"
    "compareSanity_data\0compareSanity\0"
    "compareRich\0accessSequentialContainerKey\0"
    "MetaEnumTest_Enum0\0MetaEnumTest_Enum0_dummy\0"
    "MetaEnumTest_Enum0_value\0MetaEnsureSignedEnum0\0"
    "MetaEnumTest_Enum1\0MetaEnumTest_Enum1_value\0"
    "MetaEnumTest_Enum1_bigValue\0"
    "MetaEnumTest_Enum3\0MetaEnumTest_Enum3_value\0"
    "MetaEnumTest_Enum3_bigValue\0"
    "MetaEnumTest_Enum3_bigNegValue\0"
    "MetaEnumTest_Enum4\0MetaEnumTest_Enum4_value\0"
    "MetaEnumTest_Enum4_bigValue\0"
    "MetaEnumTest_Enum5\0MetaEnumTest_Enum5_value\0"
    "MetaEnumTest_Enum6\0MetaEnumTest_Enum6_value\0"
    "MetaEnumTest_Enum8\0MetaEnumTest_Enum8_value"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QVariant[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
     139,   14, // methods
       0,    0, // properties
       7,  848, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  709,    2, 0x08 /* Private */,
       3,    0,  710,    2, 0x08 /* Private */,
       4,    0,  711,    2, 0x08 /* Private */,
       5,    0,  712,    2, 0x08 /* Private */,
       6,    0,  713,    2, 0x08 /* Private */,
       7,    0,  714,    2, 0x08 /* Private */,
       8,    0,  715,    2, 0x08 /* Private */,
       9,    0,  716,    2, 0x08 /* Private */,
      10,    0,  717,    2, 0x08 /* Private */,
      11,    0,  718,    2, 0x08 /* Private */,
      12,    0,  719,    2, 0x08 /* Private */,
      13,    0,  720,    2, 0x08 /* Private */,
      14,    0,  721,    2, 0x08 /* Private */,
      15,    0,  722,    2, 0x08 /* Private */,
      16,    0,  723,    2, 0x08 /* Private */,
      17,    0,  724,    2, 0x08 /* Private */,
      18,    0,  725,    2, 0x08 /* Private */,
      19,    0,  726,    2, 0x08 /* Private */,
      20,    0,  727,    2, 0x08 /* Private */,
      21,    0,  728,    2, 0x08 /* Private */,
      22,    0,  729,    2, 0x08 /* Private */,
      23,    0,  730,    2, 0x08 /* Private */,
      24,    0,  731,    2, 0x08 /* Private */,
      25,    0,  732,    2, 0x08 /* Private */,
      26,    0,  733,    2, 0x08 /* Private */,
      27,    0,  734,    2, 0x08 /* Private */,
      28,    0,  735,    2, 0x08 /* Private */,
      29,    0,  736,    2, 0x08 /* Private */,
      30,    0,  737,    2, 0x08 /* Private */,
      31,    0,  738,    2, 0x08 /* Private */,
      32,    0,  739,    2, 0x08 /* Private */,
      33,    0,  740,    2, 0x08 /* Private */,
      34,    0,  741,    2, 0x08 /* Private */,
      35,    0,  742,    2, 0x08 /* Private */,
      36,    0,  743,    2, 0x08 /* Private */,
      37,    0,  744,    2, 0x08 /* Private */,
      38,    0,  745,    2, 0x08 /* Private */,
      39,    0,  746,    2, 0x08 /* Private */,
      40,    0,  747,    2, 0x08 /* Private */,
      41,    0,  748,    2, 0x08 /* Private */,
      42,    0,  749,    2, 0x08 /* Private */,
      43,    0,  750,    2, 0x08 /* Private */,
      44,    0,  751,    2, 0x08 /* Private */,
      45,    0,  752,    2, 0x08 /* Private */,
      46,    0,  753,    2, 0x08 /* Private */,
      47,    0,  754,    2, 0x08 /* Private */,
      48,    0,  755,    2, 0x08 /* Private */,
      49,    0,  756,    2, 0x08 /* Private */,
      50,    0,  757,    2, 0x08 /* Private */,
      51,    0,  758,    2, 0x08 /* Private */,
      52,    0,  759,    2, 0x08 /* Private */,
      53,    0,  760,    2, 0x08 /* Private */,
      54,    0,  761,    2, 0x08 /* Private */,
      55,    0,  762,    2, 0x08 /* Private */,
      56,    0,  763,    2, 0x08 /* Private */,
      57,    0,  764,    2, 0x08 /* Private */,
      58,    0,  765,    2, 0x08 /* Private */,
      59,    0,  766,    2, 0x08 /* Private */,
      60,    0,  767,    2, 0x08 /* Private */,
      61,    0,  768,    2, 0x08 /* Private */,
      62,    0,  769,    2, 0x08 /* Private */,
      63,    0,  770,    2, 0x08 /* Private */,
      64,    0,  771,    2, 0x08 /* Private */,
      65,    0,  772,    2, 0x08 /* Private */,
      66,    0,  773,    2, 0x08 /* Private */,
      67,    0,  774,    2, 0x08 /* Private */,
      68,    0,  775,    2, 0x08 /* Private */,
      69,    0,  776,    2, 0x08 /* Private */,
      70,    0,  777,    2, 0x08 /* Private */,
      71,    0,  778,    2, 0x08 /* Private */,
      72,    0,  779,    2, 0x08 /* Private */,
      73,    0,  780,    2, 0x08 /* Private */,
      74,    0,  781,    2, 0x08 /* Private */,
      75,    0,  782,    2, 0x08 /* Private */,
      76,    0,  783,    2, 0x08 /* Private */,
      77,    0,  784,    2, 0x08 /* Private */,
      78,    0,  785,    2, 0x08 /* Private */,
      79,    0,  786,    2, 0x08 /* Private */,
      80,    0,  787,    2, 0x08 /* Private */,
      81,    0,  788,    2, 0x08 /* Private */,
      82,    0,  789,    2, 0x08 /* Private */,
      83,    0,  790,    2, 0x08 /* Private */,
      84,    0,  791,    2, 0x08 /* Private */,
      85,    0,  792,    2, 0x08 /* Private */,
      86,    0,  793,    2, 0x08 /* Private */,
      87,    0,  794,    2, 0x08 /* Private */,
      88,    0,  795,    2, 0x08 /* Private */,
      89,    0,  796,    2, 0x08 /* Private */,
      90,    0,  797,    2, 0x08 /* Private */,
      91,    0,  798,    2, 0x08 /* Private */,
      92,    0,  799,    2, 0x08 /* Private */,
      93,    0,  800,    2, 0x08 /* Private */,
      94,    0,  801,    2, 0x08 /* Private */,
      95,    0,  802,    2, 0x08 /* Private */,
      96,    0,  803,    2, 0x08 /* Private */,
      97,    0,  804,    2, 0x08 /* Private */,
      98,    0,  805,    2, 0x08 /* Private */,
      99,    0,  806,    2, 0x08 /* Private */,
     100,    0,  807,    2, 0x08 /* Private */,
     101,    0,  808,    2, 0x08 /* Private */,
     102,    0,  809,    2, 0x08 /* Private */,
     103,    0,  810,    2, 0x08 /* Private */,
     104,    0,  811,    2, 0x08 /* Private */,
     105,    0,  812,    2, 0x08 /* Private */,
     106,    0,  813,    2, 0x08 /* Private */,
     107,    0,  814,    2, 0x08 /* Private */,
     108,    0,  815,    2, 0x08 /* Private */,
     109,    0,  816,    2, 0x08 /* Private */,
     110,    0,  817,    2, 0x08 /* Private */,
     111,    0,  818,    2, 0x08 /* Private */,
     112,    0,  819,    2, 0x08 /* Private */,
     113,    0,  820,    2, 0x08 /* Private */,
     114,    0,  821,    2, 0x08 /* Private */,
     115,    0,  822,    2, 0x08 /* Private */,
     116,    0,  823,    2, 0x08 /* Private */,
     117,    0,  824,    2, 0x08 /* Private */,
     118,    0,  825,    2, 0x08 /* Private */,
     119,    0,  826,    2, 0x08 /* Private */,
     120,    0,  827,    2, 0x08 /* Private */,
     121,    0,  828,    2, 0x08 /* Private */,
     122,    0,  829,    2, 0x08 /* Private */,
     123,    0,  830,    2, 0x08 /* Private */,
     124,    0,  831,    2, 0x08 /* Private */,
     125,    0,  832,    2, 0x08 /* Private */,
     126,    0,  833,    2, 0x08 /* Private */,
     127,    0,  834,    2, 0x08 /* Private */,
     128,    0,  835,    2, 0x08 /* Private */,
     129,    0,  836,    2, 0x08 /* Private */,
     130,    0,  837,    2, 0x08 /* Private */,
     131,    0,  838,    2, 0x08 /* Private */,
     132,    0,  839,    2, 0x08 /* Private */,
     133,    0,  840,    2, 0x08 /* Private */,
     134,    0,  841,    2, 0x08 /* Private */,
     135,    0,  842,    2, 0x08 /* Private */,
     136,    0,  843,    2, 0x08 /* Private */,
     137,    0,  844,    2, 0x08 /* Private */,
     138,    0,  845,    2, 0x08 /* Private */,
     139,    0,  846,    2, 0x08 /* Private */,
     140,    0,  847,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // enums: name, flags, count, data
     141, 0x0,    3,  876,
     145, 0x0,    2,  882,
     148, 0x0,    3,  886,
     152, 0x0,    2,  892,
     155, 0x0,    1,  896,
     157, 0x0,    1,  898,
     159, 0x0,    1,  900,

 // enum data: key, value
     142, uint(tst_QVariant::MetaEnumTest_Enum0_dummy),
     143, uint(tst_QVariant::MetaEnumTest_Enum0_value),
     144, uint(tst_QVariant::MetaEnsureSignedEnum0),
     146, uint(tst_QVariant::MetaEnumTest_Enum1_value),
     147, uint(tst_QVariant::MetaEnumTest_Enum1_bigValue),
     149, uint(tst_QVariant::MetaEnumTest_Enum3_value),
     150, uint(tst_QVariant::MetaEnumTest_Enum3_bigValue),
     151, uint(tst_QVariant::MetaEnumTest_Enum3_bigNegValue),
     153, uint(tst_QVariant::MetaEnumTest_Enum4_value),
     154, uint(tst_QVariant::MetaEnumTest_Enum4_bigValue),
     156, uint(tst_QVariant::MetaEnumTest_Enum5_value),
     158, uint(tst_QVariant::MetaEnumTest_Enum6_value),
     160, uint(tst_QVariant::MetaEnumTest_Enum8_value),

       0        // eod
};

void tst_QVariant::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QVariant *_t = static_cast<tst_QVariant *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->cleanupTestCase(); break;
        case 1: _t->constructor(); break;
        case 2: _t->copy_constructor(); break;
        case 3: _t->constructor_invalid_data(); break;
        case 4: _t->constructor_invalid(); break;
        case 5: _t->isNull(); break;
        case 6: _t->swap(); break;
        case 7: _t->canConvert_data(); break;
        case 8: _t->canConvert(); break;
        case 9: _t->toSize_data(); break;
        case 10: _t->toSize(); break;
        case 11: _t->toSizeF_data(); break;
        case 12: _t->toSizeF(); break;
        case 13: _t->toPoint_data(); break;
        case 14: _t->toPoint(); break;
        case 15: _t->toRect_data(); break;
        case 16: _t->toRect(); break;
        case 17: _t->toChar_data(); break;
        case 18: _t->toChar(); break;
        case 19: _t->toLine_data(); break;
        case 20: _t->toLine(); break;
        case 21: _t->toLineF_data(); break;
        case 22: _t->toLineF(); break;
        case 23: _t->toInt_data(); break;
        case 24: _t->toInt(); break;
        case 25: _t->toUInt_data(); break;
        case 26: _t->toUInt(); break;
        case 27: _t->toBool_data(); break;
        case 28: _t->toBool(); break;
        case 29: _t->toLongLong_data(); break;
        case 30: _t->toLongLong(); break;
        case 31: _t->toULongLong_data(); break;
        case 32: _t->toULongLong(); break;
        case 33: _t->toByteArray_data(); break;
        case 34: _t->toByteArray(); break;
        case 35: _t->toString_data(); break;
        case 36: _t->toString(); break;
        case 37: _t->toDate_data(); break;
        case 38: _t->toDate(); break;
        case 39: _t->toTime_data(); break;
        case 40: _t->toTime(); break;
        case 41: _t->toDateTime_data(); break;
        case 42: _t->toDateTime(); break;
        case 43: _t->toDouble_data(); break;
        case 44: _t->toDouble(); break;
        case 45: _t->toFloat_data(); break;
        case 46: _t->toFloat(); break;
        case 47: _t->toPointF_data(); break;
        case 48: _t->toPointF(); break;
        case 49: _t->toRectF_data(); break;
        case 50: _t->toRectF(); break;
        case 51: _t->qvariant_cast_QObject_data(); break;
        case 52: _t->qvariant_cast_QObject(); break;
        case 53: _t->qvariant_cast_QObject_derived(); break;
        case 54: _t->qvariant_cast_QObject_wrapper(); break;
        case 55: _t->qvariant_cast_QSharedPointerQObject(); break;
        case 56: _t->toLocale(); break;
        case 57: _t->toRegExp(); break;
        case 58: _t->toRegularExpression(); break;
        case 59: _t->url(); break;
        case 60: _t->userType(); break;
        case 61: _t->basicUserType(); break;
        case 62: _t->variant_to(); break;
        case 63: _t->writeToReadFromDataStream_data(); break;
        case 64: _t->writeToReadFromDataStream(); break;
        case 65: _t->writeToReadFromOldDataStream(); break;
        case 66: _t->checkDataStream(); break;
        case 67: _t->operator_eq_eq_data(); break;
        case 68: _t->operator_eq_eq(); break;
        case 69: _t->operator_eq_eq_rhs(); break;
        case 70: _t->compareNumbers_data(); break;
        case 71: _t->compareNumbers(); break;
        case 72: _t->typeName_data(); break;
        case 73: _t->typeName(); break;
        case 74: _t->typeToName(); break;
        case 75: _t->streamInvalidVariant(); break;
        case 76: _t->podUserType(); break;
        case 77: _t->data(); break;
        case 78: _t->constData(); break;
        case 79: _t->saveLoadCustomTypes(); break;
        case 80: _t->variantMap(); break;
        case 81: _t->variantHash(); break;
        case 82: _t->convertToQUint8(); break;
        case 83: _t->comparePointers(); break;
        case 84: _t->voidStar(); break;
        case 85: _t->dataStar(); break;
        case 86: _t->canConvertQStringList(); break;
        case 87: _t->canConvertQStringList_data(); break;
        case 88: _t->canConvertMetaTypeToInt(); break;
        case 89: _t->variantToDateTimeWithoutWarnings(); break;
        case 90: _t->invalidDateTime(); break;
        case 91: _t->loadUnknownUserType(); break;
        case 92: _t->loadBrokenUserType(); break;
        case 93: _t->invalidDate(); break;
        case 94: _t->compareCustomTypes(); break;
        case 95: _t->timeToDateTime(); break;
        case 96: _t->copyingUserTypes(); break;
        case 97: _t->convertBoolToByteArray(); break;
        case 98: _t->convertBoolToByteArray_data(); break;
        case 99: _t->convertByteArrayToBool(); break;
        case 100: _t->convertByteArrayToBool_data(); break;
        case 101: _t->convertIterables(); break;
        case 102: _t->toIntFromQString(); break;
        case 103: _t->toIntFromDouble(); break;
        case 104: _t->setValue(); break;
        case 105: _t->fpStringRoundtrip_data(); break;
        case 106: _t->fpStringRoundtrip(); break;
        case 107: _t->numericalConvert_data(); break;
        case 108: _t->numericalConvert(); break;
        case 109: _t->moreCustomTypes(); break;
        case 110: _t->movabilityTest(); break;
        case 111: _t->variantInVariant(); break;
        case 112: _t->userConversion(); break;
        case 113: _t->modelIndexConversion(); break;
        case 114: _t->forwardDeclare(); break;
        case 115: _t->debugStream_data(); break;
        case 116: _t->debugStream(); break;
        case 117: _t->debugStreamType_data(); break;
        case 118: _t->debugStreamType(); break;
        case 119: _t->loadQt4Stream_data(); break;
        case 120: _t->loadQt4Stream(); break;
        case 121: _t->saveQt4Stream_data(); break;
        case 122: _t->saveQt4Stream(); break;
        case 123: _t->loadQt5Stream_data(); break;
        case 124: _t->loadQt5Stream(); break;
        case 125: _t->saveQt5Stream_data(); break;
        case 126: _t->saveQt5Stream(); break;
        case 127: _t->saveInvalid_data(); break;
        case 128: _t->saveInvalid(); break;
        case 129: _t->saveNewBuiltinWithOldStream(); break;
        case 130: _t->implicitConstruction(); break;
        case 131: _t->iterateContainerElements(); break;
        case 132: _t->pairElements(); break;
        case 133: _t->enums(); break;
        case 134: _t->metaEnums(); break;
        case 135: _t->compareSanity_data(); break;
        case 136: _t->compareSanity(); break;
        case 137: _t->compareRich(); break;
        case 138: _t->accessSequentialContainerKey(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QVariant::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QVariant.data,
      qt_meta_data_tst_QVariant,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QVariant::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QVariant::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QVariant.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QVariant::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 139)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 139;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 139)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 139;
    }
    return _id;
}
struct qt_meta_stringdata_CustomQObject_t {
    QByteArrayData data[1];
    char stringdata0[14];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_CustomQObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_CustomQObject_t qt_meta_stringdata_CustomQObject = {
    {
QT_MOC_LITERAL(0, 0, 13) // "CustomQObject"

    },
    "CustomQObject"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_CustomQObject[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

       0        // eod
};

void CustomQObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject CustomQObject::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_CustomQObject.data,
      qt_meta_data_CustomQObject,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *CustomQObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *CustomQObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CustomQObject.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int CustomQObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    return _id;
}
struct qt_meta_stringdata_CustomQObjectDerived_t {
    QByteArrayData data[1];
    char stringdata0[21];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_CustomQObjectDerived_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_CustomQObjectDerived_t qt_meta_stringdata_CustomQObjectDerived = {
    {
QT_MOC_LITERAL(0, 0, 20) // "CustomQObjectDerived"

    },
    "CustomQObjectDerived"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_CustomQObjectDerived[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

       0        // eod
};

void CustomQObjectDerived::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject CustomQObjectDerived::staticMetaObject = {
    { &CustomQObject::staticMetaObject, qt_meta_stringdata_CustomQObjectDerived.data,
      qt_meta_data_CustomQObjectDerived,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *CustomQObjectDerived::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *CustomQObjectDerived::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CustomQObjectDerived.stringdata0))
        return static_cast<void*>(this);
    return CustomQObject::qt_metacast(_clname);
}

int CustomQObjectDerived::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = CustomQObject::qt_metacall(_c, _id, _a);
    return _id;
}
struct qt_meta_stringdata_CustomQObjectDerivedNoMetaType_t {
    QByteArrayData data[1];
    char stringdata0[31];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_CustomQObjectDerivedNoMetaType_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_CustomQObjectDerivedNoMetaType_t qt_meta_stringdata_CustomQObjectDerivedNoMetaType = {
    {
QT_MOC_LITERAL(0, 0, 30) // "CustomQObjectDerivedNoMetaType"

    },
    "CustomQObjectDerivedNoMetaType"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_CustomQObjectDerivedNoMetaType[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

       0        // eod
};

void CustomQObjectDerivedNoMetaType::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject CustomQObjectDerivedNoMetaType::staticMetaObject = {
    { &CustomQObject::staticMetaObject, qt_meta_stringdata_CustomQObjectDerivedNoMetaType.data,
      qt_meta_data_CustomQObjectDerivedNoMetaType,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *CustomQObjectDerivedNoMetaType::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *CustomQObjectDerivedNoMetaType::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CustomQObjectDerivedNoMetaType.stringdata0))
        return static_cast<void*>(this);
    return CustomQObject::qt_metacast(_clname);
}

int CustomQObjectDerivedNoMetaType::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = CustomQObject::qt_metacall(_c, _id, _a);
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
