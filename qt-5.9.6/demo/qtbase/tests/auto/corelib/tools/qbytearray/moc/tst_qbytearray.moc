/****************************************************************************
** Meta object code from reading C++ file 'tst_qbytearray.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qbytearray.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QByteArray_t {
    QByteArrayData data[92];
    char stringdata0[1295];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QByteArray_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QByteArray_t qt_meta_stringdata_tst_QByteArray = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QByteArray"
QT_MOC_LITERAL(1, 15, 4), // "swap"
QT_MOC_LITERAL(2, 20, 0), // ""
QT_MOC_LITERAL(3, 21, 14), // "qChecksum_data"
QT_MOC_LITERAL(4, 36, 9), // "qChecksum"
QT_MOC_LITERAL(5, 46, 14), // "qCompress_data"
QT_MOC_LITERAL(6, 61, 9), // "qCompress"
QT_MOC_LITERAL(7, 71, 29), // "qUncompressCorruptedData_data"
QT_MOC_LITERAL(8, 101, 24), // "qUncompressCorruptedData"
QT_MOC_LITERAL(9, 126, 27), // "qCompressionZeroTermination"
QT_MOC_LITERAL(10, 154, 14), // "constByteArray"
QT_MOC_LITERAL(11, 169, 13), // "leftJustified"
QT_MOC_LITERAL(12, 183, 14), // "rightJustified"
QT_MOC_LITERAL(13, 198, 6), // "setNum"
QT_MOC_LITERAL(14, 205, 15), // "startsWith_data"
QT_MOC_LITERAL(15, 221, 10), // "startsWith"
QT_MOC_LITERAL(16, 232, 15), // "startsWith_char"
QT_MOC_LITERAL(17, 248, 13), // "endsWith_data"
QT_MOC_LITERAL(18, 262, 8), // "endsWith"
QT_MOC_LITERAL(19, 271, 13), // "endsWith_char"
QT_MOC_LITERAL(20, 285, 16), // "reverseIterators"
QT_MOC_LITERAL(21, 302, 10), // "split_data"
QT_MOC_LITERAL(22, 313, 5), // "split"
QT_MOC_LITERAL(23, 319, 11), // "base64_data"
QT_MOC_LITERAL(24, 331, 6), // "base64"
QT_MOC_LITERAL(25, 338, 15), // "fromBase64_data"
QT_MOC_LITERAL(26, 354, 10), // "fromBase64"
QT_MOC_LITERAL(27, 365, 10), // "qvsnprintf"
QT_MOC_LITERAL(28, 376, 7), // "qstrlen"
QT_MOC_LITERAL(29, 384, 8), // "qstrnlen"
QT_MOC_LITERAL(30, 393, 7), // "qstrcpy"
QT_MOC_LITERAL(31, 401, 8), // "qstrncpy"
QT_MOC_LITERAL(32, 410, 13), // "qstricmp_data"
QT_MOC_LITERAL(33, 424, 8), // "qstricmp"
QT_MOC_LITERAL(34, 433, 22), // "qstricmp_singularities"
QT_MOC_LITERAL(35, 456, 23), // "qstrnicmp_singularities"
QT_MOC_LITERAL(36, 480, 9), // "chop_data"
QT_MOC_LITERAL(37, 490, 4), // "chop"
QT_MOC_LITERAL(38, 495, 7), // "prepend"
QT_MOC_LITERAL(39, 503, 20), // "prependExtended_data"
QT_MOC_LITERAL(40, 524, 15), // "prependExtended"
QT_MOC_LITERAL(41, 540, 6), // "append"
QT_MOC_LITERAL(42, 547, 19), // "appendExtended_data"
QT_MOC_LITERAL(43, 567, 14), // "appendExtended"
QT_MOC_LITERAL(44, 582, 6), // "insert"
QT_MOC_LITERAL(45, 589, 19), // "insertExtended_data"
QT_MOC_LITERAL(46, 609, 14), // "insertExtended"
QT_MOC_LITERAL(47, 624, 11), // "remove_data"
QT_MOC_LITERAL(48, 636, 6), // "remove"
QT_MOC_LITERAL(49, 643, 12), // "replace_data"
QT_MOC_LITERAL(50, 656, 7), // "replace"
QT_MOC_LITERAL(51, 664, 26), // "replaceWithSpecifiedLength"
QT_MOC_LITERAL(52, 691, 12), // "indexOf_data"
QT_MOC_LITERAL(53, 704, 7), // "indexOf"
QT_MOC_LITERAL(54, 712, 16), // "lastIndexOf_data"
QT_MOC_LITERAL(55, 729, 11), // "lastIndexOf"
QT_MOC_LITERAL(56, 741, 12), // "toULong_data"
QT_MOC_LITERAL(57, 754, 7), // "toULong"
QT_MOC_LITERAL(58, 762, 16), // "toULongLong_data"
QT_MOC_LITERAL(59, 779, 11), // "toULongLong"
QT_MOC_LITERAL(60, 791, 6), // "number"
QT_MOC_LITERAL(61, 798, 10), // "toInt_data"
QT_MOC_LITERAL(62, 809, 5), // "toInt"
QT_MOC_LITERAL(63, 815, 21), // "blockSizeCalculations"
QT_MOC_LITERAL(64, 837, 22), // "resizeAfterFromRawData"
QT_MOC_LITERAL(65, 860, 22), // "appendAfterFromRawData"
QT_MOC_LITERAL(66, 883, 14), // "toFromHex_data"
QT_MOC_LITERAL(67, 898, 9), // "toFromHex"
QT_MOC_LITERAL(68, 908, 21), // "toFromPercentEncoding"
QT_MOC_LITERAL(69, 930, 24), // "fromPercentEncoding_data"
QT_MOC_LITERAL(70, 955, 19), // "fromPercentEncoding"
QT_MOC_LITERAL(71, 975, 22), // "toPercentEncoding_data"
QT_MOC_LITERAL(72, 998, 17), // "toPercentEncoding"
QT_MOC_LITERAL(73, 1016, 23), // "toPercentEncoding2_data"
QT_MOC_LITERAL(74, 1040, 18), // "toPercentEncoding2"
QT_MOC_LITERAL(75, 1059, 12), // "compare_data"
QT_MOC_LITERAL(76, 1072, 7), // "compare"
QT_MOC_LITERAL(77, 1080, 20), // "compareCharStar_data"
QT_MOC_LITERAL(78, 1101, 15), // "compareCharStar"
QT_MOC_LITERAL(79, 1117, 17), // "repeatedSignature"
QT_MOC_LITERAL(80, 1135, 8), // "repeated"
QT_MOC_LITERAL(81, 1144, 13), // "repeated_data"
QT_MOC_LITERAL(82, 1158, 16), // "byteRefDetaching"
QT_MOC_LITERAL(83, 1175, 7), // "reserve"
QT_MOC_LITERAL(84, 1183, 20), // "reserveExtended_data"
QT_MOC_LITERAL(85, 1204, 15), // "reserveExtended"
QT_MOC_LITERAL(86, 1220, 14), // "movablity_data"
QT_MOC_LITERAL(87, 1235, 9), // "movablity"
QT_MOC_LITERAL(88, 1245, 17), // "toUpperLower_data"
QT_MOC_LITERAL(89, 1263, 12), // "toUpperLower"
QT_MOC_LITERAL(90, 1276, 8), // "macTypes"
QT_MOC_LITERAL(91, 1285, 9) // "stdString"

    },
    "tst_QByteArray\0swap\0\0qChecksum_data\0"
    "qChecksum\0qCompress_data\0qCompress\0"
    "qUncompressCorruptedData_data\0"
    "qUncompressCorruptedData\0"
    "qCompressionZeroTermination\0constByteArray\0"
    "leftJustified\0rightJustified\0setNum\0"
    "startsWith_data\0startsWith\0startsWith_char\0"
    "endsWith_data\0endsWith\0endsWith_char\0"
    "reverseIterators\0split_data\0split\0"
    "base64_data\0base64\0fromBase64_data\0"
    "fromBase64\0qvsnprintf\0qstrlen\0qstrnlen\0"
    "qstrcpy\0qstrncpy\0qstricmp_data\0qstricmp\0"
    "qstricmp_singularities\0qstrnicmp_singularities\0"
    "chop_data\0chop\0prepend\0prependExtended_data\0"
    "prependExtended\0append\0appendExtended_data\0"
    "appendExtended\0insert\0insertExtended_data\0"
    "insertExtended\0remove_data\0remove\0"
    "replace_data\0replace\0replaceWithSpecifiedLength\0"
    "indexOf_data\0indexOf\0lastIndexOf_data\0"
    "lastIndexOf\0toULong_data\0toULong\0"
    "toULongLong_data\0toULongLong\0number\0"
    "toInt_data\0toInt\0blockSizeCalculations\0"
    "resizeAfterFromRawData\0appendAfterFromRawData\0"
    "toFromHex_data\0toFromHex\0toFromPercentEncoding\0"
    "fromPercentEncoding_data\0fromPercentEncoding\0"
    "toPercentEncoding_data\0toPercentEncoding\0"
    "toPercentEncoding2_data\0toPercentEncoding2\0"
    "compare_data\0compare\0compareCharStar_data\0"
    "compareCharStar\0repeatedSignature\0"
    "repeated\0repeated_data\0byteRefDetaching\0"
    "reserve\0reserveExtended_data\0"
    "reserveExtended\0movablity_data\0movablity\0"
    "toUpperLower_data\0toUpperLower\0macTypes\0"
    "stdString"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QByteArray[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      90,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  464,    2, 0x08 /* Private */,
       3,    0,  465,    2, 0x08 /* Private */,
       4,    0,  466,    2, 0x08 /* Private */,
       5,    0,  467,    2, 0x08 /* Private */,
       6,    0,  468,    2, 0x08 /* Private */,
       7,    0,  469,    2, 0x08 /* Private */,
       8,    0,  470,    2, 0x08 /* Private */,
       9,    0,  471,    2, 0x08 /* Private */,
      10,    0,  472,    2, 0x08 /* Private */,
      11,    0,  473,    2, 0x08 /* Private */,
      12,    0,  474,    2, 0x08 /* Private */,
      13,    0,  475,    2, 0x08 /* Private */,
      14,    0,  476,    2, 0x08 /* Private */,
      15,    0,  477,    2, 0x08 /* Private */,
      16,    0,  478,    2, 0x08 /* Private */,
      17,    0,  479,    2, 0x08 /* Private */,
      18,    0,  480,    2, 0x08 /* Private */,
      19,    0,  481,    2, 0x08 /* Private */,
      20,    0,  482,    2, 0x08 /* Private */,
      21,    0,  483,    2, 0x08 /* Private */,
      22,    0,  484,    2, 0x08 /* Private */,
      23,    0,  485,    2, 0x08 /* Private */,
      24,    0,  486,    2, 0x08 /* Private */,
      25,    0,  487,    2, 0x08 /* Private */,
      26,    0,  488,    2, 0x08 /* Private */,
      27,    0,  489,    2, 0x08 /* Private */,
      28,    0,  490,    2, 0x08 /* Private */,
      29,    0,  491,    2, 0x08 /* Private */,
      30,    0,  492,    2, 0x08 /* Private */,
      31,    0,  493,    2, 0x08 /* Private */,
      32,    0,  494,    2, 0x08 /* Private */,
      33,    0,  495,    2, 0x08 /* Private */,
      34,    0,  496,    2, 0x08 /* Private */,
      35,    0,  497,    2, 0x08 /* Private */,
      36,    0,  498,    2, 0x08 /* Private */,
      37,    0,  499,    2, 0x08 /* Private */,
      38,    0,  500,    2, 0x08 /* Private */,
      39,    0,  501,    2, 0x08 /* Private */,
      40,    0,  502,    2, 0x08 /* Private */,
      41,    0,  503,    2, 0x08 /* Private */,
      42,    0,  504,    2, 0x08 /* Private */,
      43,    0,  505,    2, 0x08 /* Private */,
      44,    0,  506,    2, 0x08 /* Private */,
      45,    0,  507,    2, 0x08 /* Private */,
      46,    0,  508,    2, 0x08 /* Private */,
      47,    0,  509,    2, 0x08 /* Private */,
      48,    0,  510,    2, 0x08 /* Private */,
      49,    0,  511,    2, 0x08 /* Private */,
      50,    0,  512,    2, 0x08 /* Private */,
      51,    0,  513,    2, 0x08 /* Private */,
      52,    0,  514,    2, 0x08 /* Private */,
      53,    0,  515,    2, 0x08 /* Private */,
      54,    0,  516,    2, 0x08 /* Private */,
      55,    0,  517,    2, 0x08 /* Private */,
      56,    0,  518,    2, 0x08 /* Private */,
      57,    0,  519,    2, 0x08 /* Private */,
      58,    0,  520,    2, 0x08 /* Private */,
      59,    0,  521,    2, 0x08 /* Private */,
      60,    0,  522,    2, 0x08 /* Private */,
      61,    0,  523,    2, 0x08 /* Private */,
      62,    0,  524,    2, 0x08 /* Private */,
      63,    0,  525,    2, 0x08 /* Private */,
      64,    0,  526,    2, 0x08 /* Private */,
      65,    0,  527,    2, 0x08 /* Private */,
      66,    0,  528,    2, 0x08 /* Private */,
      67,    0,  529,    2, 0x08 /* Private */,
      68,    0,  530,    2, 0x08 /* Private */,
      69,    0,  531,    2, 0x08 /* Private */,
      70,    0,  532,    2, 0x08 /* Private */,
      71,    0,  533,    2, 0x08 /* Private */,
      72,    0,  534,    2, 0x08 /* Private */,
      73,    0,  535,    2, 0x08 /* Private */,
      74,    0,  536,    2, 0x08 /* Private */,
      75,    0,  537,    2, 0x08 /* Private */,
      76,    0,  538,    2, 0x08 /* Private */,
      77,    0,  539,    2, 0x08 /* Private */,
      78,    0,  540,    2, 0x08 /* Private */,
      79,    0,  541,    2, 0x08 /* Private */,
      80,    0,  542,    2, 0x08 /* Private */,
      81,    0,  543,    2, 0x08 /* Private */,
      82,    0,  544,    2, 0x08 /* Private */,
      83,    0,  545,    2, 0x08 /* Private */,
      84,    0,  546,    2, 0x08 /* Private */,
      85,    0,  547,    2, 0x08 /* Private */,
      86,    0,  548,    2, 0x08 /* Private */,
      87,    0,  549,    2, 0x08 /* Private */,
      88,    0,  550,    2, 0x08 /* Private */,
      89,    0,  551,    2, 0x08 /* Private */,
      90,    0,  552,    2, 0x08 /* Private */,
      91,    0,  553,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QByteArray::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QByteArray *_t = static_cast<tst_QByteArray *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->swap(); break;
        case 1: _t->qChecksum_data(); break;
        case 2: _t->qChecksum(); break;
        case 3: _t->qCompress_data(); break;
        case 4: _t->qCompress(); break;
        case 5: _t->qUncompressCorruptedData_data(); break;
        case 6: _t->qUncompressCorruptedData(); break;
        case 7: _t->qCompressionZeroTermination(); break;
        case 8: _t->constByteArray(); break;
        case 9: _t->leftJustified(); break;
        case 10: _t->rightJustified(); break;
        case 11: _t->setNum(); break;
        case 12: _t->startsWith_data(); break;
        case 13: _t->startsWith(); break;
        case 14: _t->startsWith_char(); break;
        case 15: _t->endsWith_data(); break;
        case 16: _t->endsWith(); break;
        case 17: _t->endsWith_char(); break;
        case 18: _t->reverseIterators(); break;
        case 19: _t->split_data(); break;
        case 20: _t->split(); break;
        case 21: _t->base64_data(); break;
        case 22: _t->base64(); break;
        case 23: _t->fromBase64_data(); break;
        case 24: _t->fromBase64(); break;
        case 25: _t->qvsnprintf(); break;
        case 26: _t->qstrlen(); break;
        case 27: _t->qstrnlen(); break;
        case 28: _t->qstrcpy(); break;
        case 29: _t->qstrncpy(); break;
        case 30: _t->qstricmp_data(); break;
        case 31: _t->qstricmp(); break;
        case 32: _t->qstricmp_singularities(); break;
        case 33: _t->qstrnicmp_singularities(); break;
        case 34: _t->chop_data(); break;
        case 35: _t->chop(); break;
        case 36: _t->prepend(); break;
        case 37: _t->prependExtended_data(); break;
        case 38: _t->prependExtended(); break;
        case 39: _t->append(); break;
        case 40: _t->appendExtended_data(); break;
        case 41: _t->appendExtended(); break;
        case 42: _t->insert(); break;
        case 43: _t->insertExtended_data(); break;
        case 44: _t->insertExtended(); break;
        case 45: _t->remove_data(); break;
        case 46: _t->remove(); break;
        case 47: _t->replace_data(); break;
        case 48: _t->replace(); break;
        case 49: _t->replaceWithSpecifiedLength(); break;
        case 50: _t->indexOf_data(); break;
        case 51: _t->indexOf(); break;
        case 52: _t->lastIndexOf_data(); break;
        case 53: _t->lastIndexOf(); break;
        case 54: _t->toULong_data(); break;
        case 55: _t->toULong(); break;
        case 56: _t->toULongLong_data(); break;
        case 57: _t->toULongLong(); break;
        case 58: _t->number(); break;
        case 59: _t->toInt_data(); break;
        case 60: _t->toInt(); break;
        case 61: _t->blockSizeCalculations(); break;
        case 62: _t->resizeAfterFromRawData(); break;
        case 63: _t->appendAfterFromRawData(); break;
        case 64: _t->toFromHex_data(); break;
        case 65: _t->toFromHex(); break;
        case 66: _t->toFromPercentEncoding(); break;
        case 67: _t->fromPercentEncoding_data(); break;
        case 68: _t->fromPercentEncoding(); break;
        case 69: _t->toPercentEncoding_data(); break;
        case 70: _t->toPercentEncoding(); break;
        case 71: _t->toPercentEncoding2_data(); break;
        case 72: _t->toPercentEncoding2(); break;
        case 73: _t->compare_data(); break;
        case 74: _t->compare(); break;
        case 75: _t->compareCharStar_data(); break;
        case 76: _t->compareCharStar(); break;
        case 77: _t->repeatedSignature(); break;
        case 78: _t->repeated(); break;
        case 79: _t->repeated_data(); break;
        case 80: _t->byteRefDetaching(); break;
        case 81: _t->reserve(); break;
        case 82: _t->reserveExtended_data(); break;
        case 83: _t->reserveExtended(); break;
        case 84: _t->movablity_data(); break;
        case 85: _t->movablity(); break;
        case 86: _t->toUpperLower_data(); break;
        case 87: _t->toUpperLower(); break;
        case 88: _t->macTypes(); break;
        case 89: _t->stdString(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QByteArray::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QByteArray.data,
      qt_meta_data_tst_QByteArray,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QByteArray::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QByteArray::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QByteArray.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QByteArray::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 90)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 90;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 90)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 90;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
