/****************************************************************************
** Meta object code from reading C++ file 'tst_qlinkedlist.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qlinkedlist.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QLinkedList_t {
    QByteArrayData data[62];
    char stringdata0[945];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QLinkedList_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QLinkedList_t qt_meta_stringdata_tst_QLinkedList = {
    {
QT_MOC_LITERAL(0, 0, 15), // "tst_QLinkedList"
QT_MOC_LITERAL(1, 16, 31), // "eraseValidIteratorsOnSharedList"
QT_MOC_LITERAL(2, 48, 0), // ""
QT_MOC_LITERAL(3, 49, 31), // "insertWithIteratorsOnSharedList"
QT_MOC_LITERAL(4, 81, 9), // "lengthInt"
QT_MOC_LITERAL(5, 91, 13), // "lengthMovable"
QT_MOC_LITERAL(6, 105, 13), // "lengthComplex"
QT_MOC_LITERAL(7, 119, 15), // "lengthSignature"
QT_MOC_LITERAL(8, 135, 8), // "firstInt"
QT_MOC_LITERAL(9, 144, 12), // "firstMovable"
QT_MOC_LITERAL(10, 157, 12), // "firstComplex"
QT_MOC_LITERAL(11, 170, 7), // "lastInt"
QT_MOC_LITERAL(12, 178, 11), // "lastMovable"
QT_MOC_LITERAL(13, 190, 11), // "lastComplex"
QT_MOC_LITERAL(14, 202, 8), // "beginInt"
QT_MOC_LITERAL(15, 211, 12), // "beginMovable"
QT_MOC_LITERAL(16, 224, 12), // "beginComplex"
QT_MOC_LITERAL(17, 237, 6), // "endInt"
QT_MOC_LITERAL(18, 244, 10), // "endMovable"
QT_MOC_LITERAL(19, 255, 10), // "endComplex"
QT_MOC_LITERAL(20, 266, 11), // "containsInt"
QT_MOC_LITERAL(21, 278, 15), // "containsMovable"
QT_MOC_LITERAL(22, 294, 15), // "containsComplex"
QT_MOC_LITERAL(23, 310, 8), // "countInt"
QT_MOC_LITERAL(24, 319, 12), // "countMovable"
QT_MOC_LITERAL(25, 332, 12), // "countComplex"
QT_MOC_LITERAL(26, 345, 8), // "emptyInt"
QT_MOC_LITERAL(27, 354, 12), // "emptyMovable"
QT_MOC_LITERAL(28, 367, 12), // "emptyComplex"
QT_MOC_LITERAL(29, 380, 11), // "endsWithInt"
QT_MOC_LITERAL(30, 392, 15), // "endsWithMovable"
QT_MOC_LITERAL(31, 408, 15), // "endsWithComplex"
QT_MOC_LITERAL(32, 424, 12), // "removeAllInt"
QT_MOC_LITERAL(33, 437, 16), // "removeAllMovable"
QT_MOC_LITERAL(34, 454, 16), // "removeAllComplex"
QT_MOC_LITERAL(35, 471, 12), // "removeOneInt"
QT_MOC_LITERAL(36, 484, 16), // "removeOneMovable"
QT_MOC_LITERAL(37, 501, 16), // "removeOneComplex"
QT_MOC_LITERAL(38, 518, 16), // "reverseIterators"
QT_MOC_LITERAL(39, 535, 13), // "startsWithInt"
QT_MOC_LITERAL(40, 549, 17), // "startsWithMovable"
QT_MOC_LITERAL(41, 567, 17), // "startsWithComplex"
QT_MOC_LITERAL(42, 585, 12), // "takeFirstInt"
QT_MOC_LITERAL(43, 598, 16), // "takeFirstMovable"
QT_MOC_LITERAL(44, 615, 16), // "takeFirstComplex"
QT_MOC_LITERAL(45, 632, 11), // "takeLastInt"
QT_MOC_LITERAL(46, 644, 15), // "takeLastMovable"
QT_MOC_LITERAL(47, 660, 15), // "takeLastComplex"
QT_MOC_LITERAL(48, 676, 12), // "toStdListInt"
QT_MOC_LITERAL(49, 689, 16), // "toStdListMovable"
QT_MOC_LITERAL(50, 706, 16), // "toStdListComplex"
QT_MOC_LITERAL(51, 723, 16), // "testOperatorsInt"
QT_MOC_LITERAL(52, 740, 20), // "testOperatorsMovable"
QT_MOC_LITERAL(53, 761, 20), // "testOperatorsComplex"
QT_MOC_LITERAL(54, 782, 19), // "testSTLIteratorsInt"
QT_MOC_LITERAL(55, 802, 23), // "testSTLIteratorsMovable"
QT_MOC_LITERAL(56, 826, 23), // "testSTLIteratorsComplex"
QT_MOC_LITERAL(57, 850, 14), // "initializeList"
QT_MOC_LITERAL(58, 865, 18), // "constSharedNullInt"
QT_MOC_LITERAL(59, 884, 22), // "constSharedNullMovable"
QT_MOC_LITERAL(60, 907, 22), // "constSharedNullComplex"
QT_MOC_LITERAL(61, 930, 14) // "setSharableInt"

    },
    "tst_QLinkedList\0eraseValidIteratorsOnSharedList\0"
    "\0insertWithIteratorsOnSharedList\0"
    "lengthInt\0lengthMovable\0lengthComplex\0"
    "lengthSignature\0firstInt\0firstMovable\0"
    "firstComplex\0lastInt\0lastMovable\0"
    "lastComplex\0beginInt\0beginMovable\0"
    "beginComplex\0endInt\0endMovable\0"
    "endComplex\0containsInt\0containsMovable\0"
    "containsComplex\0countInt\0countMovable\0"
    "countComplex\0emptyInt\0emptyMovable\0"
    "emptyComplex\0endsWithInt\0endsWithMovable\0"
    "endsWithComplex\0removeAllInt\0"
    "removeAllMovable\0removeAllComplex\0"
    "removeOneInt\0removeOneMovable\0"
    "removeOneComplex\0reverseIterators\0"
    "startsWithInt\0startsWithMovable\0"
    "startsWithComplex\0takeFirstInt\0"
    "takeFirstMovable\0takeFirstComplex\0"
    "takeLastInt\0takeLastMovable\0takeLastComplex\0"
    "toStdListInt\0toStdListMovable\0"
    "toStdListComplex\0testOperatorsInt\0"
    "testOperatorsMovable\0testOperatorsComplex\0"
    "testSTLIteratorsInt\0testSTLIteratorsMovable\0"
    "testSTLIteratorsComplex\0initializeList\0"
    "constSharedNullInt\0constSharedNullMovable\0"
    "constSharedNullComplex\0setSharableInt"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QLinkedList[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      60,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  314,    2, 0x08 /* Private */,
       3,    0,  315,    2, 0x08 /* Private */,
       4,    0,  316,    2, 0x08 /* Private */,
       5,    0,  317,    2, 0x08 /* Private */,
       6,    0,  318,    2, 0x08 /* Private */,
       7,    0,  319,    2, 0x08 /* Private */,
       8,    0,  320,    2, 0x08 /* Private */,
       9,    0,  321,    2, 0x08 /* Private */,
      10,    0,  322,    2, 0x08 /* Private */,
      11,    0,  323,    2, 0x08 /* Private */,
      12,    0,  324,    2, 0x08 /* Private */,
      13,    0,  325,    2, 0x08 /* Private */,
      14,    0,  326,    2, 0x08 /* Private */,
      15,    0,  327,    2, 0x08 /* Private */,
      16,    0,  328,    2, 0x08 /* Private */,
      17,    0,  329,    2, 0x08 /* Private */,
      18,    0,  330,    2, 0x08 /* Private */,
      19,    0,  331,    2, 0x08 /* Private */,
      20,    0,  332,    2, 0x08 /* Private */,
      21,    0,  333,    2, 0x08 /* Private */,
      22,    0,  334,    2, 0x08 /* Private */,
      23,    0,  335,    2, 0x08 /* Private */,
      24,    0,  336,    2, 0x08 /* Private */,
      25,    0,  337,    2, 0x08 /* Private */,
      26,    0,  338,    2, 0x08 /* Private */,
      27,    0,  339,    2, 0x08 /* Private */,
      28,    0,  340,    2, 0x08 /* Private */,
      29,    0,  341,    2, 0x08 /* Private */,
      30,    0,  342,    2, 0x08 /* Private */,
      31,    0,  343,    2, 0x08 /* Private */,
      32,    0,  344,    2, 0x08 /* Private */,
      33,    0,  345,    2, 0x08 /* Private */,
      34,    0,  346,    2, 0x08 /* Private */,
      35,    0,  347,    2, 0x08 /* Private */,
      36,    0,  348,    2, 0x08 /* Private */,
      37,    0,  349,    2, 0x08 /* Private */,
      38,    0,  350,    2, 0x08 /* Private */,
      39,    0,  351,    2, 0x08 /* Private */,
      40,    0,  352,    2, 0x08 /* Private */,
      41,    0,  353,    2, 0x08 /* Private */,
      42,    0,  354,    2, 0x08 /* Private */,
      43,    0,  355,    2, 0x08 /* Private */,
      44,    0,  356,    2, 0x08 /* Private */,
      45,    0,  357,    2, 0x08 /* Private */,
      46,    0,  358,    2, 0x08 /* Private */,
      47,    0,  359,    2, 0x08 /* Private */,
      48,    0,  360,    2, 0x08 /* Private */,
      49,    0,  361,    2, 0x08 /* Private */,
      50,    0,  362,    2, 0x08 /* Private */,
      51,    0,  363,    2, 0x08 /* Private */,
      52,    0,  364,    2, 0x08 /* Private */,
      53,    0,  365,    2, 0x08 /* Private */,
      54,    0,  366,    2, 0x08 /* Private */,
      55,    0,  367,    2, 0x08 /* Private */,
      56,    0,  368,    2, 0x08 /* Private */,
      57,    0,  369,    2, 0x08 /* Private */,
      58,    0,  370,    2, 0x08 /* Private */,
      59,    0,  371,    2, 0x08 /* Private */,
      60,    0,  372,    2, 0x08 /* Private */,
      61,    0,  373,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QLinkedList::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QLinkedList *_t = static_cast<tst_QLinkedList *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->eraseValidIteratorsOnSharedList(); break;
        case 1: _t->insertWithIteratorsOnSharedList(); break;
        case 2: _t->lengthInt(); break;
        case 3: _t->lengthMovable(); break;
        case 4: _t->lengthComplex(); break;
        case 5: _t->lengthSignature(); break;
        case 6: _t->firstInt(); break;
        case 7: _t->firstMovable(); break;
        case 8: _t->firstComplex(); break;
        case 9: _t->lastInt(); break;
        case 10: _t->lastMovable(); break;
        case 11: _t->lastComplex(); break;
        case 12: _t->beginInt(); break;
        case 13: _t->beginMovable(); break;
        case 14: _t->beginComplex(); break;
        case 15: _t->endInt(); break;
        case 16: _t->endMovable(); break;
        case 17: _t->endComplex(); break;
        case 18: _t->containsInt(); break;
        case 19: _t->containsMovable(); break;
        case 20: _t->containsComplex(); break;
        case 21: _t->countInt(); break;
        case 22: _t->countMovable(); break;
        case 23: _t->countComplex(); break;
        case 24: _t->emptyInt(); break;
        case 25: _t->emptyMovable(); break;
        case 26: _t->emptyComplex(); break;
        case 27: _t->endsWithInt(); break;
        case 28: _t->endsWithMovable(); break;
        case 29: _t->endsWithComplex(); break;
        case 30: _t->removeAllInt(); break;
        case 31: _t->removeAllMovable(); break;
        case 32: _t->removeAllComplex(); break;
        case 33: _t->removeOneInt(); break;
        case 34: _t->removeOneMovable(); break;
        case 35: _t->removeOneComplex(); break;
        case 36: _t->reverseIterators(); break;
        case 37: _t->startsWithInt(); break;
        case 38: _t->startsWithMovable(); break;
        case 39: _t->startsWithComplex(); break;
        case 40: _t->takeFirstInt(); break;
        case 41: _t->takeFirstMovable(); break;
        case 42: _t->takeFirstComplex(); break;
        case 43: _t->takeLastInt(); break;
        case 44: _t->takeLastMovable(); break;
        case 45: _t->takeLastComplex(); break;
        case 46: _t->toStdListInt(); break;
        case 47: _t->toStdListMovable(); break;
        case 48: _t->toStdListComplex(); break;
        case 49: _t->testOperatorsInt(); break;
        case 50: _t->testOperatorsMovable(); break;
        case 51: _t->testOperatorsComplex(); break;
        case 52: _t->testSTLIteratorsInt(); break;
        case 53: _t->testSTLIteratorsMovable(); break;
        case 54: _t->testSTLIteratorsComplex(); break;
        case 55: _t->initializeList(); break;
        case 56: _t->constSharedNullInt(); break;
        case 57: _t->constSharedNullMovable(); break;
        case 58: _t->constSharedNullComplex(); break;
        case 59: _t->setSharableInt(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QLinkedList::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QLinkedList.data,
      qt_meta_data_tst_QLinkedList,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QLinkedList::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QLinkedList::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QLinkedList.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QLinkedList::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 60)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 60;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 60)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 60;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
