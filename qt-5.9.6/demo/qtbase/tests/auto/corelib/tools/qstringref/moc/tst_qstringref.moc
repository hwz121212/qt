/****************************************************************************
** Meta object code from reading C++ file 'tst_qstringref.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qstringref.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QStringRef_t {
    QByteArrayData data[49];
    char stringdata0[509];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QStringRef_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QStringRef_t qt_meta_stringdata_tst_QStringRef = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QStringRef"
QT_MOC_LITERAL(1, 15, 7), // "cleanup"
QT_MOC_LITERAL(2, 23, 0), // ""
QT_MOC_LITERAL(3, 24, 2), // "at"
QT_MOC_LITERAL(4, 27, 8), // "endsWith"
QT_MOC_LITERAL(5, 36, 10), // "startsWith"
QT_MOC_LITERAL(6, 47, 8), // "contains"
QT_MOC_LITERAL(7, 56, 5), // "count"
QT_MOC_LITERAL(8, 62, 16), // "lastIndexOf_data"
QT_MOC_LITERAL(9, 79, 11), // "lastIndexOf"
QT_MOC_LITERAL(10, 91, 12), // "indexOf_data"
QT_MOC_LITERAL(11, 104, 7), // "indexOf"
QT_MOC_LITERAL(12, 112, 13), // "indexOf2_data"
QT_MOC_LITERAL(13, 126, 8), // "indexOf2"
QT_MOC_LITERAL(14, 135, 9), // "iteration"
QT_MOC_LITERAL(15, 145, 11), // "length_data"
QT_MOC_LITERAL(16, 157, 6), // "length"
QT_MOC_LITERAL(17, 164, 7), // "isEmpty"
QT_MOC_LITERAL(18, 172, 12), // "compare_data"
QT_MOC_LITERAL(19, 185, 7), // "compare"
QT_MOC_LITERAL(20, 193, 13), // "compare2_data"
QT_MOC_LITERAL(21, 207, 8), // "compare2"
QT_MOC_LITERAL(22, 216, 24), // "operator_eqeq_nullstring"
QT_MOC_LITERAL(23, 241, 5), // "toNum"
QT_MOC_LITERAL(24, 247, 13), // "toDouble_data"
QT_MOC_LITERAL(25, 261, 8), // "toDouble"
QT_MOC_LITERAL(26, 270, 7), // "toFloat"
QT_MOC_LITERAL(27, 278, 11), // "toLong_data"
QT_MOC_LITERAL(28, 290, 6), // "toLong"
QT_MOC_LITERAL(29, 297, 12), // "toULong_data"
QT_MOC_LITERAL(30, 310, 7), // "toULong"
QT_MOC_LITERAL(31, 318, 10), // "toLongLong"
QT_MOC_LITERAL(32, 329, 11), // "toULongLong"
QT_MOC_LITERAL(33, 341, 6), // "toUInt"
QT_MOC_LITERAL(34, 348, 5), // "toInt"
QT_MOC_LITERAL(35, 354, 7), // "toShort"
QT_MOC_LITERAL(36, 362, 8), // "toUShort"
QT_MOC_LITERAL(37, 371, 22), // "double_conversion_data"
QT_MOC_LITERAL(38, 394, 17), // "double_conversion"
QT_MOC_LITERAL(39, 412, 23), // "integer_conversion_data"
QT_MOC_LITERAL(40, 436, 18), // "integer_conversion"
QT_MOC_LITERAL(41, 455, 7), // "trimmed"
QT_MOC_LITERAL(42, 463, 8), // "truncate"
QT_MOC_LITERAL(43, 472, 4), // "chop"
QT_MOC_LITERAL(44, 477, 4), // "left"
QT_MOC_LITERAL(45, 482, 5), // "right"
QT_MOC_LITERAL(46, 488, 3), // "mid"
QT_MOC_LITERAL(47, 492, 10), // "split_data"
QT_MOC_LITERAL(48, 503, 5) // "split"

    },
    "tst_QStringRef\0cleanup\0\0at\0endsWith\0"
    "startsWith\0contains\0count\0lastIndexOf_data\0"
    "lastIndexOf\0indexOf_data\0indexOf\0"
    "indexOf2_data\0indexOf2\0iteration\0"
    "length_data\0length\0isEmpty\0compare_data\0"
    "compare\0compare2_data\0compare2\0"
    "operator_eqeq_nullstring\0toNum\0"
    "toDouble_data\0toDouble\0toFloat\0"
    "toLong_data\0toLong\0toULong_data\0toULong\0"
    "toLongLong\0toULongLong\0toUInt\0toInt\0"
    "toShort\0toUShort\0double_conversion_data\0"
    "double_conversion\0integer_conversion_data\0"
    "integer_conversion\0trimmed\0truncate\0"
    "chop\0left\0right\0mid\0split_data\0split"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QStringRef[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      47,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  249,    2, 0x0a /* Public */,
       3,    0,  250,    2, 0x08 /* Private */,
       4,    0,  251,    2, 0x08 /* Private */,
       5,    0,  252,    2, 0x08 /* Private */,
       6,    0,  253,    2, 0x08 /* Private */,
       7,    0,  254,    2, 0x08 /* Private */,
       8,    0,  255,    2, 0x08 /* Private */,
       9,    0,  256,    2, 0x08 /* Private */,
      10,    0,  257,    2, 0x08 /* Private */,
      11,    0,  258,    2, 0x08 /* Private */,
      12,    0,  259,    2, 0x08 /* Private */,
      13,    0,  260,    2, 0x08 /* Private */,
      14,    0,  261,    2, 0x08 /* Private */,
      15,    0,  262,    2, 0x08 /* Private */,
      16,    0,  263,    2, 0x08 /* Private */,
      17,    0,  264,    2, 0x08 /* Private */,
      18,    0,  265,    2, 0x08 /* Private */,
      19,    0,  266,    2, 0x08 /* Private */,
      20,    0,  267,    2, 0x08 /* Private */,
      21,    0,  268,    2, 0x08 /* Private */,
      22,    0,  269,    2, 0x08 /* Private */,
      23,    0,  270,    2, 0x08 /* Private */,
      24,    0,  271,    2, 0x08 /* Private */,
      25,    0,  272,    2, 0x08 /* Private */,
      26,    0,  273,    2, 0x08 /* Private */,
      27,    0,  274,    2, 0x08 /* Private */,
      28,    0,  275,    2, 0x08 /* Private */,
      29,    0,  276,    2, 0x08 /* Private */,
      30,    0,  277,    2, 0x08 /* Private */,
      31,    0,  278,    2, 0x08 /* Private */,
      32,    0,  279,    2, 0x08 /* Private */,
      33,    0,  280,    2, 0x08 /* Private */,
      34,    0,  281,    2, 0x08 /* Private */,
      35,    0,  282,    2, 0x08 /* Private */,
      36,    0,  283,    2, 0x08 /* Private */,
      37,    0,  284,    2, 0x08 /* Private */,
      38,    0,  285,    2, 0x08 /* Private */,
      39,    0,  286,    2, 0x08 /* Private */,
      40,    0,  287,    2, 0x08 /* Private */,
      41,    0,  288,    2, 0x08 /* Private */,
      42,    0,  289,    2, 0x08 /* Private */,
      43,    0,  290,    2, 0x08 /* Private */,
      44,    0,  291,    2, 0x08 /* Private */,
      45,    0,  292,    2, 0x08 /* Private */,
      46,    0,  293,    2, 0x08 /* Private */,
      47,    0,  294,    2, 0x08 /* Private */,
      48,    0,  295,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QStringRef::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QStringRef *_t = static_cast<tst_QStringRef *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->cleanup(); break;
        case 1: _t->at(); break;
        case 2: _t->endsWith(); break;
        case 3: _t->startsWith(); break;
        case 4: _t->contains(); break;
        case 5: _t->count(); break;
        case 6: _t->lastIndexOf_data(); break;
        case 7: _t->lastIndexOf(); break;
        case 8: _t->indexOf_data(); break;
        case 9: _t->indexOf(); break;
        case 10: _t->indexOf2_data(); break;
        case 11: _t->indexOf2(); break;
        case 12: _t->iteration(); break;
        case 13: _t->length_data(); break;
        case 14: _t->length(); break;
        case 15: _t->isEmpty(); break;
        case 16: _t->compare_data(); break;
        case 17: _t->compare(); break;
        case 18: _t->compare2_data(); break;
        case 19: _t->compare2(); break;
        case 20: _t->operator_eqeq_nullstring(); break;
        case 21: _t->toNum(); break;
        case 22: _t->toDouble_data(); break;
        case 23: _t->toDouble(); break;
        case 24: _t->toFloat(); break;
        case 25: _t->toLong_data(); break;
        case 26: _t->toLong(); break;
        case 27: _t->toULong_data(); break;
        case 28: _t->toULong(); break;
        case 29: _t->toLongLong(); break;
        case 30: _t->toULongLong(); break;
        case 31: _t->toUInt(); break;
        case 32: _t->toInt(); break;
        case 33: _t->toShort(); break;
        case 34: _t->toUShort(); break;
        case 35: _t->double_conversion_data(); break;
        case 36: _t->double_conversion(); break;
        case 37: _t->integer_conversion_data(); break;
        case 38: _t->integer_conversion(); break;
        case 39: _t->trimmed(); break;
        case 40: _t->truncate(); break;
        case 41: _t->chop(); break;
        case 42: _t->left(); break;
        case 43: _t->right(); break;
        case 44: _t->mid(); break;
        case 45: _t->split_data(); break;
        case 46: _t->split(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QStringRef::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QStringRef.data,
      qt_meta_data_tst_QStringRef,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QStringRef::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QStringRef::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QStringRef.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QStringRef::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 47)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 47;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 47)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 47;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
