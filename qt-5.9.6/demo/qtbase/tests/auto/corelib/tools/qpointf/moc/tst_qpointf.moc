/****************************************************************************
** Meta object code from reading C++ file 'tst_qpointf.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qpointf.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QPointF_t {
    QByteArrayData data[30];
    char stringdata0[429];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QPointF_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QPointF_t qt_meta_stringdata_tst_QPointF = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_QPointF"
QT_MOC_LITERAL(1, 12, 6), // "isNull"
QT_MOC_LITERAL(2, 19, 0), // ""
QT_MOC_LITERAL(3, 20, 20), // "manhattanLength_data"
QT_MOC_LITERAL(4, 41, 15), // "manhattanLength"
QT_MOC_LITERAL(5, 57, 11), // "getSet_data"
QT_MOC_LITERAL(6, 69, 6), // "getSet"
QT_MOC_LITERAL(7, 76, 2), // "rx"
QT_MOC_LITERAL(8, 79, 2), // "ry"
QT_MOC_LITERAL(9, 82, 17), // "operator_add_data"
QT_MOC_LITERAL(10, 100, 12), // "operator_add"
QT_MOC_LITERAL(11, 113, 22), // "operator_subtract_data"
QT_MOC_LITERAL(12, 136, 17), // "operator_subtract"
QT_MOC_LITERAL(13, 154, 22), // "operator_multiply_data"
QT_MOC_LITERAL(14, 177, 17), // "operator_multiply"
QT_MOC_LITERAL(15, 195, 20), // "operator_divide_data"
QT_MOC_LITERAL(16, 216, 15), // "operator_divide"
QT_MOC_LITERAL(17, 232, 8), // "division"
QT_MOC_LITERAL(18, 241, 15), // "dotProduct_data"
QT_MOC_LITERAL(19, 257, 10), // "dotProduct"
QT_MOC_LITERAL(20, 268, 24), // "operator_unary_plus_data"
QT_MOC_LITERAL(21, 293, 19), // "operator_unary_plus"
QT_MOC_LITERAL(22, 313, 25), // "operator_unary_minus_data"
QT_MOC_LITERAL(23, 339, 20), // "operator_unary_minus"
QT_MOC_LITERAL(24, 360, 16), // "operator_eq_data"
QT_MOC_LITERAL(25, 377, 11), // "operator_eq"
QT_MOC_LITERAL(26, 389, 12), // "toPoint_data"
QT_MOC_LITERAL(27, 402, 7), // "toPoint"
QT_MOC_LITERAL(28, 410, 11), // "stream_data"
QT_MOC_LITERAL(29, 422, 6) // "stream"

    },
    "tst_QPointF\0isNull\0\0manhattanLength_data\0"
    "manhattanLength\0getSet_data\0getSet\0"
    "rx\0ry\0operator_add_data\0operator_add\0"
    "operator_subtract_data\0operator_subtract\0"
    "operator_multiply_data\0operator_multiply\0"
    "operator_divide_data\0operator_divide\0"
    "division\0dotProduct_data\0dotProduct\0"
    "operator_unary_plus_data\0operator_unary_plus\0"
    "operator_unary_minus_data\0"
    "operator_unary_minus\0operator_eq_data\0"
    "operator_eq\0toPoint_data\0toPoint\0"
    "stream_data\0stream"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QPointF[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      28,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  154,    2, 0x08 /* Private */,
       3,    0,  155,    2, 0x08 /* Private */,
       4,    0,  156,    2, 0x08 /* Private */,
       5,    0,  157,    2, 0x08 /* Private */,
       6,    0,  158,    2, 0x08 /* Private */,
       7,    0,  159,    2, 0x08 /* Private */,
       8,    0,  160,    2, 0x08 /* Private */,
       9,    0,  161,    2, 0x08 /* Private */,
      10,    0,  162,    2, 0x08 /* Private */,
      11,    0,  163,    2, 0x08 /* Private */,
      12,    0,  164,    2, 0x08 /* Private */,
      13,    0,  165,    2, 0x08 /* Private */,
      14,    0,  166,    2, 0x08 /* Private */,
      15,    0,  167,    2, 0x08 /* Private */,
      16,    0,  168,    2, 0x08 /* Private */,
      17,    0,  169,    2, 0x08 /* Private */,
      18,    0,  170,    2, 0x08 /* Private */,
      19,    0,  171,    2, 0x08 /* Private */,
      20,    0,  172,    2, 0x08 /* Private */,
      21,    0,  173,    2, 0x08 /* Private */,
      22,    0,  174,    2, 0x08 /* Private */,
      23,    0,  175,    2, 0x08 /* Private */,
      24,    0,  176,    2, 0x08 /* Private */,
      25,    0,  177,    2, 0x08 /* Private */,
      26,    0,  178,    2, 0x08 /* Private */,
      27,    0,  179,    2, 0x08 /* Private */,
      28,    0,  180,    2, 0x08 /* Private */,
      29,    0,  181,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QPointF::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QPointF *_t = static_cast<tst_QPointF *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->isNull(); break;
        case 1: _t->manhattanLength_data(); break;
        case 2: _t->manhattanLength(); break;
        case 3: _t->getSet_data(); break;
        case 4: _t->getSet(); break;
        case 5: _t->rx(); break;
        case 6: _t->ry(); break;
        case 7: _t->operator_add_data(); break;
        case 8: _t->operator_add(); break;
        case 9: _t->operator_subtract_data(); break;
        case 10: _t->operator_subtract(); break;
        case 11: _t->operator_multiply_data(); break;
        case 12: _t->operator_multiply(); break;
        case 13: _t->operator_divide_data(); break;
        case 14: _t->operator_divide(); break;
        case 15: _t->division(); break;
        case 16: _t->dotProduct_data(); break;
        case 17: _t->dotProduct(); break;
        case 18: _t->operator_unary_plus_data(); break;
        case 19: _t->operator_unary_plus(); break;
        case 20: _t->operator_unary_minus_data(); break;
        case 21: _t->operator_unary_minus(); break;
        case 22: _t->operator_eq_data(); break;
        case 23: _t->operator_eq(); break;
        case 24: _t->toPoint_data(); break;
        case 25: _t->toPoint(); break;
        case 26: _t->stream_data(); break;
        case 27: _t->stream(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QPointF::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QPointF.data,
      qt_meta_data_tst_QPointF,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QPointF::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QPointF::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QPointF.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QPointF::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 28)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 28;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 28)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 28;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
