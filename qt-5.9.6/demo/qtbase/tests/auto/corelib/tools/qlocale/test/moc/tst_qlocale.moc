/****************************************************************************
** Meta object code from reading C++ file 'tst_qlocale.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qlocale.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QLocale_t {
    QByteArrayData data[60];
    char stringdata0[866];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QLocale_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QLocale_t qt_meta_stringdata_tst_QLocale = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_QLocale"
QT_MOC_LITERAL(1, 12, 12), // "initTestCase"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 42, 20), // "windowsDefaultLocale"
QT_MOC_LITERAL(5, 63, 4), // "ctor"
QT_MOC_LITERAL(6, 68, 9), // "emptyCtor"
QT_MOC_LITERAL(7, 78, 11), // "legacyNames"
QT_MOC_LITERAL(8, 90, 11), // "consistentC"
QT_MOC_LITERAL(9, 102, 14), // "unixLocaleName"
QT_MOC_LITERAL(10, 117, 15), // "matchingLocales"
QT_MOC_LITERAL(11, 133, 19), // "stringToDouble_data"
QT_MOC_LITERAL(12, 153, 14), // "stringToDouble"
QT_MOC_LITERAL(13, 168, 19), // "doubleToString_data"
QT_MOC_LITERAL(14, 188, 14), // "doubleToString"
QT_MOC_LITERAL(15, 203, 11), // "strtod_data"
QT_MOC_LITERAL(16, 215, 6), // "strtod"
QT_MOC_LITERAL(17, 222, 25), // "long_long_conversion_data"
QT_MOC_LITERAL(18, 248, 20), // "long_long_conversion"
QT_MOC_LITERAL(19, 269, 26), // "long_long_conversion_extra"
QT_MOC_LITERAL(20, 296, 13), // "testInfAndNan"
QT_MOC_LITERAL(21, 310, 12), // "fpExceptions"
QT_MOC_LITERAL(22, 323, 12), // "negativeZero"
QT_MOC_LITERAL(23, 336, 9), // "dayOfWeek"
QT_MOC_LITERAL(24, 346, 14), // "dayOfWeek_data"
QT_MOC_LITERAL(25, 361, 10), // "formatDate"
QT_MOC_LITERAL(26, 372, 15), // "formatDate_data"
QT_MOC_LITERAL(27, 388, 10), // "formatTime"
QT_MOC_LITERAL(28, 399, 15), // "formatTime_data"
QT_MOC_LITERAL(29, 415, 14), // "formatDateTime"
QT_MOC_LITERAL(30, 430, 19), // "formatDateTime_data"
QT_MOC_LITERAL(31, 450, 14), // "formatTimeZone"
QT_MOC_LITERAL(32, 465, 15), // "toDateTime_data"
QT_MOC_LITERAL(33, 481, 10), // "toDateTime"
QT_MOC_LITERAL(34, 492, 15), // "negativeNumbers"
QT_MOC_LITERAL(35, 508, 13), // "numberOptions"
QT_MOC_LITERAL(36, 522, 14), // "testNames_data"
QT_MOC_LITERAL(37, 537, 9), // "testNames"
QT_MOC_LITERAL(38, 547, 12), // "dayName_data"
QT_MOC_LITERAL(39, 560, 7), // "dayName"
QT_MOC_LITERAL(40, 568, 22), // "standaloneDayName_data"
QT_MOC_LITERAL(41, 591, 17), // "standaloneDayName"
QT_MOC_LITERAL(42, 609, 17), // "underflowOverflow"
QT_MOC_LITERAL(43, 627, 10), // "dateFormat"
QT_MOC_LITERAL(44, 638, 10), // "timeFormat"
QT_MOC_LITERAL(45, 649, 14), // "dateTimeFormat"
QT_MOC_LITERAL(46, 664, 9), // "monthName"
QT_MOC_LITERAL(47, 674, 19), // "standaloneMonthName"
QT_MOC_LITERAL(48, 694, 21), // "defaultNumeringSystem"
QT_MOC_LITERAL(49, 716, 4), // "ampm"
QT_MOC_LITERAL(50, 721, 8), // "currency"
QT_MOC_LITERAL(51, 730, 11), // "quoteString"
QT_MOC_LITERAL(52, 742, 11), // "uiLanguages"
QT_MOC_LITERAL(53, 754, 11), // "weekendDays"
QT_MOC_LITERAL(54, 766, 12), // "listPatterns"
QT_MOC_LITERAL(55, 779, 18), // "measurementSystems"
QT_MOC_LITERAL(56, 798, 24), // "QTBUG_26035_positivesign"
QT_MOC_LITERAL(57, 823, 18), // "textDirection_data"
QT_MOC_LITERAL(58, 842, 13), // "textDirection"
QT_MOC_LITERAL(59, 856, 9) // "bcp47Name"

    },
    "tst_QLocale\0initTestCase\0\0cleanupTestCase\0"
    "windowsDefaultLocale\0ctor\0emptyCtor\0"
    "legacyNames\0consistentC\0unixLocaleName\0"
    "matchingLocales\0stringToDouble_data\0"
    "stringToDouble\0doubleToString_data\0"
    "doubleToString\0strtod_data\0strtod\0"
    "long_long_conversion_data\0"
    "long_long_conversion\0long_long_conversion_extra\0"
    "testInfAndNan\0fpExceptions\0negativeZero\0"
    "dayOfWeek\0dayOfWeek_data\0formatDate\0"
    "formatDate_data\0formatTime\0formatTime_data\0"
    "formatDateTime\0formatDateTime_data\0"
    "formatTimeZone\0toDateTime_data\0"
    "toDateTime\0negativeNumbers\0numberOptions\0"
    "testNames_data\0testNames\0dayName_data\0"
    "dayName\0standaloneDayName_data\0"
    "standaloneDayName\0underflowOverflow\0"
    "dateFormat\0timeFormat\0dateTimeFormat\0"
    "monthName\0standaloneMonthName\0"
    "defaultNumeringSystem\0ampm\0currency\0"
    "quoteString\0uiLanguages\0weekendDays\0"
    "listPatterns\0measurementSystems\0"
    "QTBUG_26035_positivesign\0textDirection_data\0"
    "textDirection\0bcp47Name"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QLocale[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      58,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  304,    2, 0x08 /* Private */,
       3,    0,  305,    2, 0x08 /* Private */,
       4,    0,  306,    2, 0x08 /* Private */,
       5,    0,  307,    2, 0x08 /* Private */,
       6,    0,  308,    2, 0x08 /* Private */,
       7,    0,  309,    2, 0x08 /* Private */,
       8,    0,  310,    2, 0x08 /* Private */,
       9,    0,  311,    2, 0x08 /* Private */,
      10,    0,  312,    2, 0x08 /* Private */,
      11,    0,  313,    2, 0x08 /* Private */,
      12,    0,  314,    2, 0x08 /* Private */,
      13,    0,  315,    2, 0x08 /* Private */,
      14,    0,  316,    2, 0x08 /* Private */,
      15,    0,  317,    2, 0x08 /* Private */,
      16,    0,  318,    2, 0x08 /* Private */,
      17,    0,  319,    2, 0x08 /* Private */,
      18,    0,  320,    2, 0x08 /* Private */,
      19,    0,  321,    2, 0x08 /* Private */,
      20,    0,  322,    2, 0x08 /* Private */,
      21,    0,  323,    2, 0x08 /* Private */,
      22,    0,  324,    2, 0x08 /* Private */,
      23,    0,  325,    2, 0x08 /* Private */,
      24,    0,  326,    2, 0x08 /* Private */,
      25,    0,  327,    2, 0x08 /* Private */,
      26,    0,  328,    2, 0x08 /* Private */,
      27,    0,  329,    2, 0x08 /* Private */,
      28,    0,  330,    2, 0x08 /* Private */,
      29,    0,  331,    2, 0x08 /* Private */,
      30,    0,  332,    2, 0x08 /* Private */,
      31,    0,  333,    2, 0x08 /* Private */,
      32,    0,  334,    2, 0x08 /* Private */,
      33,    0,  335,    2, 0x08 /* Private */,
      34,    0,  336,    2, 0x08 /* Private */,
      35,    0,  337,    2, 0x08 /* Private */,
      36,    0,  338,    2, 0x08 /* Private */,
      37,    0,  339,    2, 0x08 /* Private */,
      38,    0,  340,    2, 0x08 /* Private */,
      39,    0,  341,    2, 0x08 /* Private */,
      40,    0,  342,    2, 0x08 /* Private */,
      41,    0,  343,    2, 0x08 /* Private */,
      42,    0,  344,    2, 0x08 /* Private */,
      43,    0,  345,    2, 0x08 /* Private */,
      44,    0,  346,    2, 0x08 /* Private */,
      45,    0,  347,    2, 0x08 /* Private */,
      46,    0,  348,    2, 0x08 /* Private */,
      47,    0,  349,    2, 0x08 /* Private */,
      48,    0,  350,    2, 0x08 /* Private */,
      49,    0,  351,    2, 0x08 /* Private */,
      50,    0,  352,    2, 0x08 /* Private */,
      51,    0,  353,    2, 0x08 /* Private */,
      52,    0,  354,    2, 0x08 /* Private */,
      53,    0,  355,    2, 0x08 /* Private */,
      54,    0,  356,    2, 0x08 /* Private */,
      55,    0,  357,    2, 0x08 /* Private */,
      56,    0,  358,    2, 0x08 /* Private */,
      57,    0,  359,    2, 0x08 /* Private */,
      58,    0,  360,    2, 0x08 /* Private */,
      59,    0,  361,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QLocale::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QLocale *_t = static_cast<tst_QLocale *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->windowsDefaultLocale(); break;
        case 3: _t->ctor(); break;
        case 4: _t->emptyCtor(); break;
        case 5: _t->legacyNames(); break;
        case 6: _t->consistentC(); break;
        case 7: _t->unixLocaleName(); break;
        case 8: _t->matchingLocales(); break;
        case 9: _t->stringToDouble_data(); break;
        case 10: _t->stringToDouble(); break;
        case 11: _t->doubleToString_data(); break;
        case 12: _t->doubleToString(); break;
        case 13: _t->strtod_data(); break;
        case 14: _t->strtod(); break;
        case 15: _t->long_long_conversion_data(); break;
        case 16: _t->long_long_conversion(); break;
        case 17: _t->long_long_conversion_extra(); break;
        case 18: _t->testInfAndNan(); break;
        case 19: _t->fpExceptions(); break;
        case 20: _t->negativeZero(); break;
        case 21: _t->dayOfWeek(); break;
        case 22: _t->dayOfWeek_data(); break;
        case 23: _t->formatDate(); break;
        case 24: _t->formatDate_data(); break;
        case 25: _t->formatTime(); break;
        case 26: _t->formatTime_data(); break;
        case 27: _t->formatDateTime(); break;
        case 28: _t->formatDateTime_data(); break;
        case 29: _t->formatTimeZone(); break;
        case 30: _t->toDateTime_data(); break;
        case 31: _t->toDateTime(); break;
        case 32: _t->negativeNumbers(); break;
        case 33: _t->numberOptions(); break;
        case 34: _t->testNames_data(); break;
        case 35: _t->testNames(); break;
        case 36: _t->dayName_data(); break;
        case 37: _t->dayName(); break;
        case 38: _t->standaloneDayName_data(); break;
        case 39: _t->standaloneDayName(); break;
        case 40: _t->underflowOverflow(); break;
        case 41: _t->dateFormat(); break;
        case 42: _t->timeFormat(); break;
        case 43: _t->dateTimeFormat(); break;
        case 44: _t->monthName(); break;
        case 45: _t->standaloneMonthName(); break;
        case 46: _t->defaultNumeringSystem(); break;
        case 47: _t->ampm(); break;
        case 48: _t->currency(); break;
        case 49: _t->quoteString(); break;
        case 50: _t->uiLanguages(); break;
        case 51: _t->weekendDays(); break;
        case 52: _t->listPatterns(); break;
        case 53: _t->measurementSystems(); break;
        case 54: _t->QTBUG_26035_positivesign(); break;
        case 55: _t->textDirection_data(); break;
        case 56: _t->textDirection(); break;
        case 57: _t->bcp47Name(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QLocale::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QLocale.data,
      qt_meta_data_tst_QLocale,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QLocale::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QLocale::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QLocale.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QLocale::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 58)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 58;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 58)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 58;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
