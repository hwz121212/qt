/****************************************************************************
** Meta object code from reading C++ file 'tst_qdate.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qdate.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QDate_t {
    QByteArrayData data[60];
    char stringdata0[910];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QDate_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QDate_t qt_meta_stringdata_tst_QDate = {
    {
QT_MOC_LITERAL(0, 0, 9), // "tst_QDate"
QT_MOC_LITERAL(1, 10, 11), // "isNull_data"
QT_MOC_LITERAL(2, 22, 0), // ""
QT_MOC_LITERAL(3, 23, 6), // "isNull"
QT_MOC_LITERAL(4, 30, 12), // "isValid_data"
QT_MOC_LITERAL(5, 43, 7), // "isValid"
QT_MOC_LITERAL(6, 51, 14), // "julianDay_data"
QT_MOC_LITERAL(7, 66, 9), // "julianDay"
QT_MOC_LITERAL(8, 76, 14), // "dayOfWeek_data"
QT_MOC_LITERAL(9, 91, 9), // "dayOfWeek"
QT_MOC_LITERAL(10, 101, 14), // "dayOfYear_data"
QT_MOC_LITERAL(11, 116, 9), // "dayOfYear"
QT_MOC_LITERAL(12, 126, 16), // "daysInMonth_data"
QT_MOC_LITERAL(13, 143, 11), // "daysInMonth"
QT_MOC_LITERAL(14, 155, 15), // "daysInYear_data"
QT_MOC_LITERAL(15, 171, 10), // "daysInYear"
QT_MOC_LITERAL(16, 182, 7), // "getDate"
QT_MOC_LITERAL(17, 190, 23), // "weekNumber_invalid_data"
QT_MOC_LITERAL(18, 214, 18), // "weekNumber_invalid"
QT_MOC_LITERAL(19, 233, 15), // "weekNumber_data"
QT_MOC_LITERAL(20, 249, 10), // "weekNumber"
QT_MOC_LITERAL(21, 260, 16), // "julianDaysLimits"
QT_MOC_LITERAL(22, 277, 12), // "addDays_data"
QT_MOC_LITERAL(23, 290, 7), // "addDays"
QT_MOC_LITERAL(24, 298, 14), // "addMonths_data"
QT_MOC_LITERAL(25, 313, 9), // "addMonths"
QT_MOC_LITERAL(26, 323, 13), // "addYears_data"
QT_MOC_LITERAL(27, 337, 8), // "addYears"
QT_MOC_LITERAL(28, 346, 6), // "daysTo"
QT_MOC_LITERAL(29, 353, 19), // "operator_eq_eq_data"
QT_MOC_LITERAL(30, 373, 14), // "operator_eq_eq"
QT_MOC_LITERAL(31, 388, 11), // "operator_lt"
QT_MOC_LITERAL(32, 400, 11), // "operator_gt"
QT_MOC_LITERAL(33, 412, 14), // "operator_lt_eq"
QT_MOC_LITERAL(34, 427, 14), // "operator_gt_eq"
QT_MOC_LITERAL(35, 442, 28), // "operator_insert_extract_data"
QT_MOC_LITERAL(36, 471, 23), // "operator_insert_extract"
QT_MOC_LITERAL(37, 495, 25), // "fromStringDateFormat_data"
QT_MOC_LITERAL(38, 521, 20), // "fromStringDateFormat"
QT_MOC_LITERAL(39, 542, 21), // "fromStringFormat_data"
QT_MOC_LITERAL(40, 564, 16), // "fromStringFormat"
QT_MOC_LITERAL(41, 581, 19), // "toStringFormat_data"
QT_MOC_LITERAL(42, 601, 14), // "toStringFormat"
QT_MOC_LITERAL(43, 616, 23), // "toStringDateFormat_data"
QT_MOC_LITERAL(44, 640, 18), // "toStringDateFormat"
QT_MOC_LITERAL(45, 659, 10), // "isLeapYear"
QT_MOC_LITERAL(46, 670, 21), // "yearsZeroToNinetyNine"
QT_MOC_LITERAL(47, 692, 12), // "negativeYear"
QT_MOC_LITERAL(48, 705, 17), // "printNegativeYear"
QT_MOC_LITERAL(49, 723, 21), // "roundtripGermanLocale"
QT_MOC_LITERAL(50, 745, 12), // "shortDayName"
QT_MOC_LITERAL(51, 758, 22), // "standaloneShortDayName"
QT_MOC_LITERAL(52, 781, 11), // "longDayName"
QT_MOC_LITERAL(53, 793, 21), // "standaloneLongDayName"
QT_MOC_LITERAL(54, 815, 14), // "shortMonthName"
QT_MOC_LITERAL(55, 830, 24), // "standaloneShortMonthName"
QT_MOC_LITERAL(56, 855, 13), // "longMonthName"
QT_MOC_LITERAL(57, 869, 23), // "standaloneLongMonthName"
QT_MOC_LITERAL(58, 893, 9), // "roundtrip"
QT_MOC_LITERAL(59, 903, 6) // "qdebug"

    },
    "tst_QDate\0isNull_data\0\0isNull\0"
    "isValid_data\0isValid\0julianDay_data\0"
    "julianDay\0dayOfWeek_data\0dayOfWeek\0"
    "dayOfYear_data\0dayOfYear\0daysInMonth_data\0"
    "daysInMonth\0daysInYear_data\0daysInYear\0"
    "getDate\0weekNumber_invalid_data\0"
    "weekNumber_invalid\0weekNumber_data\0"
    "weekNumber\0julianDaysLimits\0addDays_data\0"
    "addDays\0addMonths_data\0addMonths\0"
    "addYears_data\0addYears\0daysTo\0"
    "operator_eq_eq_data\0operator_eq_eq\0"
    "operator_lt\0operator_gt\0operator_lt_eq\0"
    "operator_gt_eq\0operator_insert_extract_data\0"
    "operator_insert_extract\0"
    "fromStringDateFormat_data\0"
    "fromStringDateFormat\0fromStringFormat_data\0"
    "fromStringFormat\0toStringFormat_data\0"
    "toStringFormat\0toStringDateFormat_data\0"
    "toStringDateFormat\0isLeapYear\0"
    "yearsZeroToNinetyNine\0negativeYear\0"
    "printNegativeYear\0roundtripGermanLocale\0"
    "shortDayName\0standaloneShortDayName\0"
    "longDayName\0standaloneLongDayName\0"
    "shortMonthName\0standaloneShortMonthName\0"
    "longMonthName\0standaloneLongMonthName\0"
    "roundtrip\0qdebug"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QDate[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      58,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  304,    2, 0x08 /* Private */,
       3,    0,  305,    2, 0x08 /* Private */,
       4,    0,  306,    2, 0x08 /* Private */,
       5,    0,  307,    2, 0x08 /* Private */,
       6,    0,  308,    2, 0x08 /* Private */,
       7,    0,  309,    2, 0x08 /* Private */,
       8,    0,  310,    2, 0x08 /* Private */,
       9,    0,  311,    2, 0x08 /* Private */,
      10,    0,  312,    2, 0x08 /* Private */,
      11,    0,  313,    2, 0x08 /* Private */,
      12,    0,  314,    2, 0x08 /* Private */,
      13,    0,  315,    2, 0x08 /* Private */,
      14,    0,  316,    2, 0x08 /* Private */,
      15,    0,  317,    2, 0x08 /* Private */,
      16,    0,  318,    2, 0x08 /* Private */,
      17,    0,  319,    2, 0x08 /* Private */,
      18,    0,  320,    2, 0x08 /* Private */,
      19,    0,  321,    2, 0x08 /* Private */,
      20,    0,  322,    2, 0x08 /* Private */,
      21,    0,  323,    2, 0x08 /* Private */,
      22,    0,  324,    2, 0x08 /* Private */,
      23,    0,  325,    2, 0x08 /* Private */,
      24,    0,  326,    2, 0x08 /* Private */,
      25,    0,  327,    2, 0x08 /* Private */,
      26,    0,  328,    2, 0x08 /* Private */,
      27,    0,  329,    2, 0x08 /* Private */,
      28,    0,  330,    2, 0x08 /* Private */,
      29,    0,  331,    2, 0x08 /* Private */,
      30,    0,  332,    2, 0x08 /* Private */,
      31,    0,  333,    2, 0x08 /* Private */,
      32,    0,  334,    2, 0x08 /* Private */,
      33,    0,  335,    2, 0x08 /* Private */,
      34,    0,  336,    2, 0x08 /* Private */,
      35,    0,  337,    2, 0x08 /* Private */,
      36,    0,  338,    2, 0x08 /* Private */,
      37,    0,  339,    2, 0x08 /* Private */,
      38,    0,  340,    2, 0x08 /* Private */,
      39,    0,  341,    2, 0x08 /* Private */,
      40,    0,  342,    2, 0x08 /* Private */,
      41,    0,  343,    2, 0x08 /* Private */,
      42,    0,  344,    2, 0x08 /* Private */,
      43,    0,  345,    2, 0x08 /* Private */,
      44,    0,  346,    2, 0x08 /* Private */,
      45,    0,  347,    2, 0x08 /* Private */,
      46,    0,  348,    2, 0x08 /* Private */,
      47,    0,  349,    2, 0x08 /* Private */,
      48,    0,  350,    2, 0x08 /* Private */,
      49,    0,  351,    2, 0x08 /* Private */,
      50,    0,  352,    2, 0x08 /* Private */,
      51,    0,  353,    2, 0x08 /* Private */,
      52,    0,  354,    2, 0x08 /* Private */,
      53,    0,  355,    2, 0x08 /* Private */,
      54,    0,  356,    2, 0x08 /* Private */,
      55,    0,  357,    2, 0x08 /* Private */,
      56,    0,  358,    2, 0x08 /* Private */,
      57,    0,  359,    2, 0x08 /* Private */,
      58,    0,  360,    2, 0x08 /* Private */,
      59,    0,  361,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QDate::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QDate *_t = static_cast<tst_QDate *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->isNull_data(); break;
        case 1: _t->isNull(); break;
        case 2: _t->isValid_data(); break;
        case 3: _t->isValid(); break;
        case 4: _t->julianDay_data(); break;
        case 5: _t->julianDay(); break;
        case 6: _t->dayOfWeek_data(); break;
        case 7: _t->dayOfWeek(); break;
        case 8: _t->dayOfYear_data(); break;
        case 9: _t->dayOfYear(); break;
        case 10: _t->daysInMonth_data(); break;
        case 11: _t->daysInMonth(); break;
        case 12: _t->daysInYear_data(); break;
        case 13: _t->daysInYear(); break;
        case 14: _t->getDate(); break;
        case 15: _t->weekNumber_invalid_data(); break;
        case 16: _t->weekNumber_invalid(); break;
        case 17: _t->weekNumber_data(); break;
        case 18: _t->weekNumber(); break;
        case 19: _t->julianDaysLimits(); break;
        case 20: _t->addDays_data(); break;
        case 21: _t->addDays(); break;
        case 22: _t->addMonths_data(); break;
        case 23: _t->addMonths(); break;
        case 24: _t->addYears_data(); break;
        case 25: _t->addYears(); break;
        case 26: _t->daysTo(); break;
        case 27: _t->operator_eq_eq_data(); break;
        case 28: _t->operator_eq_eq(); break;
        case 29: _t->operator_lt(); break;
        case 30: _t->operator_gt(); break;
        case 31: _t->operator_lt_eq(); break;
        case 32: _t->operator_gt_eq(); break;
        case 33: _t->operator_insert_extract_data(); break;
        case 34: _t->operator_insert_extract(); break;
        case 35: _t->fromStringDateFormat_data(); break;
        case 36: _t->fromStringDateFormat(); break;
        case 37: _t->fromStringFormat_data(); break;
        case 38: _t->fromStringFormat(); break;
        case 39: _t->toStringFormat_data(); break;
        case 40: _t->toStringFormat(); break;
        case 41: _t->toStringDateFormat_data(); break;
        case 42: _t->toStringDateFormat(); break;
        case 43: _t->isLeapYear(); break;
        case 44: _t->yearsZeroToNinetyNine(); break;
        case 45: _t->negativeYear(); break;
        case 46: _t->printNegativeYear(); break;
        case 47: _t->roundtripGermanLocale(); break;
        case 48: _t->shortDayName(); break;
        case 49: _t->standaloneShortDayName(); break;
        case 50: _t->longDayName(); break;
        case 51: _t->standaloneLongDayName(); break;
        case 52: _t->shortMonthName(); break;
        case 53: _t->standaloneShortMonthName(); break;
        case 54: _t->longMonthName(); break;
        case 55: _t->standaloneLongMonthName(); break;
        case 56: _t->roundtrip(); break;
        case 57: _t->qdebug(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QDate::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QDate.data,
      qt_meta_data_tst_QDate,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QDate::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QDate::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QDate.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QDate::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 58)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 58;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 58)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 58;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
