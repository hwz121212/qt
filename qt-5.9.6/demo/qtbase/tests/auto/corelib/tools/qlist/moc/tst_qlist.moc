/****************************************************************************
** Meta object code from reading C++ file 'tst_qlist.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qlist.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QList_t {
    QByteArrayData data[110];
    char stringdata0[1705];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QList_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QList_t qt_meta_stringdata_tst_QList = {
    {
QT_MOC_LITERAL(0, 0, 9), // "tst_QList"
QT_MOC_LITERAL(1, 10, 13), // "lengthOptimal"
QT_MOC_LITERAL(2, 24, 0), // ""
QT_MOC_LITERAL(3, 25, 13), // "lengthMovable"
QT_MOC_LITERAL(4, 39, 13), // "lengthComplex"
QT_MOC_LITERAL(5, 53, 15), // "lengthSignature"
QT_MOC_LITERAL(6, 69, 13), // "appendOptimal"
QT_MOC_LITERAL(7, 83, 13), // "appendMovable"
QT_MOC_LITERAL(8, 97, 13), // "appendComplex"
QT_MOC_LITERAL(9, 111, 7), // "prepend"
QT_MOC_LITERAL(10, 119, 10), // "midOptimal"
QT_MOC_LITERAL(11, 130, 10), // "midMovable"
QT_MOC_LITERAL(12, 141, 10), // "midComplex"
QT_MOC_LITERAL(13, 152, 9), // "atOptimal"
QT_MOC_LITERAL(14, 162, 9), // "atMovable"
QT_MOC_LITERAL(15, 172, 9), // "atComplex"
QT_MOC_LITERAL(16, 182, 12), // "firstOptimal"
QT_MOC_LITERAL(17, 195, 12), // "firstMovable"
QT_MOC_LITERAL(18, 208, 12), // "firstComplex"
QT_MOC_LITERAL(19, 221, 11), // "lastOptimal"
QT_MOC_LITERAL(20, 233, 11), // "lastMovable"
QT_MOC_LITERAL(21, 245, 11), // "lastComplex"
QT_MOC_LITERAL(22, 257, 10), // "constFirst"
QT_MOC_LITERAL(23, 268, 9), // "constLast"
QT_MOC_LITERAL(24, 278, 12), // "beginOptimal"
QT_MOC_LITERAL(25, 291, 12), // "beginMovable"
QT_MOC_LITERAL(26, 304, 12), // "beginComplex"
QT_MOC_LITERAL(27, 317, 10), // "endOptimal"
QT_MOC_LITERAL(28, 328, 10), // "endMovable"
QT_MOC_LITERAL(29, 339, 10), // "endComplex"
QT_MOC_LITERAL(30, 350, 15), // "containsOptimal"
QT_MOC_LITERAL(31, 366, 15), // "containsMovable"
QT_MOC_LITERAL(32, 382, 15), // "containsComplex"
QT_MOC_LITERAL(33, 398, 12), // "countOptimal"
QT_MOC_LITERAL(34, 411, 12), // "countMovable"
QT_MOC_LITERAL(35, 424, 12), // "countComplex"
QT_MOC_LITERAL(36, 437, 12), // "emptyOptimal"
QT_MOC_LITERAL(37, 450, 12), // "emptyMovable"
QT_MOC_LITERAL(38, 463, 12), // "emptyComplex"
QT_MOC_LITERAL(39, 476, 15), // "endsWithOptimal"
QT_MOC_LITERAL(40, 492, 15), // "endsWithMovable"
QT_MOC_LITERAL(41, 508, 15), // "endsWithComplex"
QT_MOC_LITERAL(42, 524, 18), // "lastIndexOfOptimal"
QT_MOC_LITERAL(43, 543, 18), // "lastIndexOfMovable"
QT_MOC_LITERAL(44, 562, 18), // "lastIndexOfComplex"
QT_MOC_LITERAL(45, 581, 11), // "moveOptimal"
QT_MOC_LITERAL(46, 593, 11), // "moveMovable"
QT_MOC_LITERAL(47, 605, 11), // "moveComplex"
QT_MOC_LITERAL(48, 617, 16), // "removeAllOptimal"
QT_MOC_LITERAL(49, 634, 16), // "removeAllMovable"
QT_MOC_LITERAL(50, 651, 16), // "removeAllComplex"
QT_MOC_LITERAL(51, 668, 15), // "removeAtOptimal"
QT_MOC_LITERAL(52, 684, 15), // "removeAtMovable"
QT_MOC_LITERAL(53, 700, 15), // "removeAtComplex"
QT_MOC_LITERAL(54, 716, 16), // "removeOneOptimal"
QT_MOC_LITERAL(55, 733, 16), // "removeOneMovable"
QT_MOC_LITERAL(56, 750, 16), // "removeOneComplex"
QT_MOC_LITERAL(57, 767, 14), // "replaceOptimal"
QT_MOC_LITERAL(58, 782, 14), // "replaceMovable"
QT_MOC_LITERAL(59, 797, 14), // "replaceComplex"
QT_MOC_LITERAL(60, 812, 23), // "reverseIteratorsOptimal"
QT_MOC_LITERAL(61, 836, 23), // "reverseIteratorsMovable"
QT_MOC_LITERAL(62, 860, 23), // "reverseIteratorsComplex"
QT_MOC_LITERAL(63, 884, 17), // "startsWithOptimal"
QT_MOC_LITERAL(64, 902, 17), // "startsWithMovable"
QT_MOC_LITERAL(65, 920, 17), // "startsWithComplex"
QT_MOC_LITERAL(66, 938, 11), // "swapOptimal"
QT_MOC_LITERAL(67, 950, 11), // "swapMovable"
QT_MOC_LITERAL(68, 962, 11), // "swapComplex"
QT_MOC_LITERAL(69, 974, 13), // "takeAtOptimal"
QT_MOC_LITERAL(70, 988, 13), // "takeAtMovable"
QT_MOC_LITERAL(71, 1002, 13), // "takeAtComplex"
QT_MOC_LITERAL(72, 1016, 16), // "takeFirstOptimal"
QT_MOC_LITERAL(73, 1033, 16), // "takeFirstMovable"
QT_MOC_LITERAL(74, 1050, 16), // "takeFirstComplex"
QT_MOC_LITERAL(75, 1067, 15), // "takeLastOptimal"
QT_MOC_LITERAL(76, 1083, 15), // "takeLastMovable"
QT_MOC_LITERAL(77, 1099, 15), // "takeLastComplex"
QT_MOC_LITERAL(78, 1115, 12), // "toSetOptimal"
QT_MOC_LITERAL(79, 1128, 12), // "toSetMovable"
QT_MOC_LITERAL(80, 1141, 12), // "toSetComplex"
QT_MOC_LITERAL(81, 1154, 16), // "toStdListOptimal"
QT_MOC_LITERAL(82, 1171, 16), // "toStdListMovable"
QT_MOC_LITERAL(83, 1188, 16), // "toStdListComplex"
QT_MOC_LITERAL(84, 1205, 15), // "toVectorOptimal"
QT_MOC_LITERAL(85, 1221, 15), // "toVectorMovable"
QT_MOC_LITERAL(86, 1237, 15), // "toVectorComplex"
QT_MOC_LITERAL(87, 1253, 12), // "valueOptimal"
QT_MOC_LITERAL(88, 1266, 12), // "valueMovable"
QT_MOC_LITERAL(89, 1279, 12), // "valueComplex"
QT_MOC_LITERAL(90, 1292, 20), // "testOperatorsOptimal"
QT_MOC_LITERAL(91, 1313, 20), // "testOperatorsMovable"
QT_MOC_LITERAL(92, 1334, 20), // "testOperatorsComplex"
QT_MOC_LITERAL(93, 1355, 23), // "testSTLIteratorsOptimal"
QT_MOC_LITERAL(94, 1379, 23), // "testSTLIteratorsMovable"
QT_MOC_LITERAL(95, 1403, 23), // "testSTLIteratorsComplex"
QT_MOC_LITERAL(96, 1427, 14), // "initializeList"
QT_MOC_LITERAL(97, 1442, 22), // "constSharedNullOptimal"
QT_MOC_LITERAL(98, 1465, 22), // "constSharedNullMovable"
QT_MOC_LITERAL(99, 1488, 22), // "constSharedNullComplex"
QT_MOC_LITERAL(100, 1511, 19), // "setSharableInt_data"
QT_MOC_LITERAL(101, 1531, 14), // "setSharableInt"
QT_MOC_LITERAL(102, 1546, 23), // "setSharableComplex_data"
QT_MOC_LITERAL(103, 1570, 18), // "setSharableComplex"
QT_MOC_LITERAL(104, 1589, 31), // "eraseValidIteratorsOnSharedList"
QT_MOC_LITERAL(105, 1621, 36), // "insertWithValidIteratorsOnSha..."
QT_MOC_LITERAL(106, 1658, 12), // "qhashOptimal"
QT_MOC_LITERAL(107, 1671, 12), // "qhashMovable"
QT_MOC_LITERAL(108, 1684, 12), // "qhashComplex"
QT_MOC_LITERAL(109, 1697, 7) // "reserve"

    },
    "tst_QList\0lengthOptimal\0\0lengthMovable\0"
    "lengthComplex\0lengthSignature\0"
    "appendOptimal\0appendMovable\0appendComplex\0"
    "prepend\0midOptimal\0midMovable\0midComplex\0"
    "atOptimal\0atMovable\0atComplex\0"
    "firstOptimal\0firstMovable\0firstComplex\0"
    "lastOptimal\0lastMovable\0lastComplex\0"
    "constFirst\0constLast\0beginOptimal\0"
    "beginMovable\0beginComplex\0endOptimal\0"
    "endMovable\0endComplex\0containsOptimal\0"
    "containsMovable\0containsComplex\0"
    "countOptimal\0countMovable\0countComplex\0"
    "emptyOptimal\0emptyMovable\0emptyComplex\0"
    "endsWithOptimal\0endsWithMovable\0"
    "endsWithComplex\0lastIndexOfOptimal\0"
    "lastIndexOfMovable\0lastIndexOfComplex\0"
    "moveOptimal\0moveMovable\0moveComplex\0"
    "removeAllOptimal\0removeAllMovable\0"
    "removeAllComplex\0removeAtOptimal\0"
    "removeAtMovable\0removeAtComplex\0"
    "removeOneOptimal\0removeOneMovable\0"
    "removeOneComplex\0replaceOptimal\0"
    "replaceMovable\0replaceComplex\0"
    "reverseIteratorsOptimal\0reverseIteratorsMovable\0"
    "reverseIteratorsComplex\0startsWithOptimal\0"
    "startsWithMovable\0startsWithComplex\0"
    "swapOptimal\0swapMovable\0swapComplex\0"
    "takeAtOptimal\0takeAtMovable\0takeAtComplex\0"
    "takeFirstOptimal\0takeFirstMovable\0"
    "takeFirstComplex\0takeLastOptimal\0"
    "takeLastMovable\0takeLastComplex\0"
    "toSetOptimal\0toSetMovable\0toSetComplex\0"
    "toStdListOptimal\0toStdListMovable\0"
    "toStdListComplex\0toVectorOptimal\0"
    "toVectorMovable\0toVectorComplex\0"
    "valueOptimal\0valueMovable\0valueComplex\0"
    "testOperatorsOptimal\0testOperatorsMovable\0"
    "testOperatorsComplex\0testSTLIteratorsOptimal\0"
    "testSTLIteratorsMovable\0testSTLIteratorsComplex\0"
    "initializeList\0constSharedNullOptimal\0"
    "constSharedNullMovable\0constSharedNullComplex\0"
    "setSharableInt_data\0setSharableInt\0"
    "setSharableComplex_data\0setSharableComplex\0"
    "eraseValidIteratorsOnSharedList\0"
    "insertWithValidIteratorsOnSharedList\0"
    "qhashOptimal\0qhashMovable\0qhashComplex\0"
    "reserve"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QList[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
     108,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  554,    2, 0x08 /* Private */,
       3,    0,  555,    2, 0x08 /* Private */,
       4,    0,  556,    2, 0x08 /* Private */,
       5,    0,  557,    2, 0x08 /* Private */,
       6,    0,  558,    2, 0x08 /* Private */,
       7,    0,  559,    2, 0x08 /* Private */,
       8,    0,  560,    2, 0x08 /* Private */,
       9,    0,  561,    2, 0x08 /* Private */,
      10,    0,  562,    2, 0x08 /* Private */,
      11,    0,  563,    2, 0x08 /* Private */,
      12,    0,  564,    2, 0x08 /* Private */,
      13,    0,  565,    2, 0x08 /* Private */,
      14,    0,  566,    2, 0x08 /* Private */,
      15,    0,  567,    2, 0x08 /* Private */,
      16,    0,  568,    2, 0x08 /* Private */,
      17,    0,  569,    2, 0x08 /* Private */,
      18,    0,  570,    2, 0x08 /* Private */,
      19,    0,  571,    2, 0x08 /* Private */,
      20,    0,  572,    2, 0x08 /* Private */,
      21,    0,  573,    2, 0x08 /* Private */,
      22,    0,  574,    2, 0x08 /* Private */,
      23,    0,  575,    2, 0x08 /* Private */,
      24,    0,  576,    2, 0x08 /* Private */,
      25,    0,  577,    2, 0x08 /* Private */,
      26,    0,  578,    2, 0x08 /* Private */,
      27,    0,  579,    2, 0x08 /* Private */,
      28,    0,  580,    2, 0x08 /* Private */,
      29,    0,  581,    2, 0x08 /* Private */,
      30,    0,  582,    2, 0x08 /* Private */,
      31,    0,  583,    2, 0x08 /* Private */,
      32,    0,  584,    2, 0x08 /* Private */,
      33,    0,  585,    2, 0x08 /* Private */,
      34,    0,  586,    2, 0x08 /* Private */,
      35,    0,  587,    2, 0x08 /* Private */,
      36,    0,  588,    2, 0x08 /* Private */,
      37,    0,  589,    2, 0x08 /* Private */,
      38,    0,  590,    2, 0x08 /* Private */,
      39,    0,  591,    2, 0x08 /* Private */,
      40,    0,  592,    2, 0x08 /* Private */,
      41,    0,  593,    2, 0x08 /* Private */,
      42,    0,  594,    2, 0x08 /* Private */,
      43,    0,  595,    2, 0x08 /* Private */,
      44,    0,  596,    2, 0x08 /* Private */,
      45,    0,  597,    2, 0x08 /* Private */,
      46,    0,  598,    2, 0x08 /* Private */,
      47,    0,  599,    2, 0x08 /* Private */,
      48,    0,  600,    2, 0x08 /* Private */,
      49,    0,  601,    2, 0x08 /* Private */,
      50,    0,  602,    2, 0x08 /* Private */,
      51,    0,  603,    2, 0x08 /* Private */,
      52,    0,  604,    2, 0x08 /* Private */,
      53,    0,  605,    2, 0x08 /* Private */,
      54,    0,  606,    2, 0x08 /* Private */,
      55,    0,  607,    2, 0x08 /* Private */,
      56,    0,  608,    2, 0x08 /* Private */,
      57,    0,  609,    2, 0x08 /* Private */,
      58,    0,  610,    2, 0x08 /* Private */,
      59,    0,  611,    2, 0x08 /* Private */,
      60,    0,  612,    2, 0x08 /* Private */,
      61,    0,  613,    2, 0x08 /* Private */,
      62,    0,  614,    2, 0x08 /* Private */,
      63,    0,  615,    2, 0x08 /* Private */,
      64,    0,  616,    2, 0x08 /* Private */,
      65,    0,  617,    2, 0x08 /* Private */,
      66,    0,  618,    2, 0x08 /* Private */,
      67,    0,  619,    2, 0x08 /* Private */,
      68,    0,  620,    2, 0x08 /* Private */,
      69,    0,  621,    2, 0x08 /* Private */,
      70,    0,  622,    2, 0x08 /* Private */,
      71,    0,  623,    2, 0x08 /* Private */,
      72,    0,  624,    2, 0x08 /* Private */,
      73,    0,  625,    2, 0x08 /* Private */,
      74,    0,  626,    2, 0x08 /* Private */,
      75,    0,  627,    2, 0x08 /* Private */,
      76,    0,  628,    2, 0x08 /* Private */,
      77,    0,  629,    2, 0x08 /* Private */,
      78,    0,  630,    2, 0x08 /* Private */,
      79,    0,  631,    2, 0x08 /* Private */,
      80,    0,  632,    2, 0x08 /* Private */,
      81,    0,  633,    2, 0x08 /* Private */,
      82,    0,  634,    2, 0x08 /* Private */,
      83,    0,  635,    2, 0x08 /* Private */,
      84,    0,  636,    2, 0x08 /* Private */,
      85,    0,  637,    2, 0x08 /* Private */,
      86,    0,  638,    2, 0x08 /* Private */,
      87,    0,  639,    2, 0x08 /* Private */,
      88,    0,  640,    2, 0x08 /* Private */,
      89,    0,  641,    2, 0x08 /* Private */,
      90,    0,  642,    2, 0x08 /* Private */,
      91,    0,  643,    2, 0x08 /* Private */,
      92,    0,  644,    2, 0x08 /* Private */,
      93,    0,  645,    2, 0x08 /* Private */,
      94,    0,  646,    2, 0x08 /* Private */,
      95,    0,  647,    2, 0x08 /* Private */,
      96,    0,  648,    2, 0x08 /* Private */,
      97,    0,  649,    2, 0x08 /* Private */,
      98,    0,  650,    2, 0x08 /* Private */,
      99,    0,  651,    2, 0x08 /* Private */,
     100,    0,  652,    2, 0x08 /* Private */,
     101,    0,  653,    2, 0x08 /* Private */,
     102,    0,  654,    2, 0x08 /* Private */,
     103,    0,  655,    2, 0x08 /* Private */,
     104,    0,  656,    2, 0x08 /* Private */,
     105,    0,  657,    2, 0x08 /* Private */,
     106,    0,  658,    2, 0x08 /* Private */,
     107,    0,  659,    2, 0x08 /* Private */,
     108,    0,  660,    2, 0x08 /* Private */,
     109,    0,  661,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QList::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QList *_t = static_cast<tst_QList *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->lengthOptimal(); break;
        case 1: _t->lengthMovable(); break;
        case 2: _t->lengthComplex(); break;
        case 3: _t->lengthSignature(); break;
        case 4: _t->appendOptimal(); break;
        case 5: _t->appendMovable(); break;
        case 6: _t->appendComplex(); break;
        case 7: _t->prepend(); break;
        case 8: _t->midOptimal(); break;
        case 9: _t->midMovable(); break;
        case 10: _t->midComplex(); break;
        case 11: _t->atOptimal(); break;
        case 12: _t->atMovable(); break;
        case 13: _t->atComplex(); break;
        case 14: _t->firstOptimal(); break;
        case 15: _t->firstMovable(); break;
        case 16: _t->firstComplex(); break;
        case 17: _t->lastOptimal(); break;
        case 18: _t->lastMovable(); break;
        case 19: _t->lastComplex(); break;
        case 20: _t->constFirst(); break;
        case 21: _t->constLast(); break;
        case 22: _t->beginOptimal(); break;
        case 23: _t->beginMovable(); break;
        case 24: _t->beginComplex(); break;
        case 25: _t->endOptimal(); break;
        case 26: _t->endMovable(); break;
        case 27: _t->endComplex(); break;
        case 28: _t->containsOptimal(); break;
        case 29: _t->containsMovable(); break;
        case 30: _t->containsComplex(); break;
        case 31: _t->countOptimal(); break;
        case 32: _t->countMovable(); break;
        case 33: _t->countComplex(); break;
        case 34: _t->emptyOptimal(); break;
        case 35: _t->emptyMovable(); break;
        case 36: _t->emptyComplex(); break;
        case 37: _t->endsWithOptimal(); break;
        case 38: _t->endsWithMovable(); break;
        case 39: _t->endsWithComplex(); break;
        case 40: _t->lastIndexOfOptimal(); break;
        case 41: _t->lastIndexOfMovable(); break;
        case 42: _t->lastIndexOfComplex(); break;
        case 43: _t->moveOptimal(); break;
        case 44: _t->moveMovable(); break;
        case 45: _t->moveComplex(); break;
        case 46: _t->removeAllOptimal(); break;
        case 47: _t->removeAllMovable(); break;
        case 48: _t->removeAllComplex(); break;
        case 49: _t->removeAtOptimal(); break;
        case 50: _t->removeAtMovable(); break;
        case 51: _t->removeAtComplex(); break;
        case 52: _t->removeOneOptimal(); break;
        case 53: _t->removeOneMovable(); break;
        case 54: _t->removeOneComplex(); break;
        case 55: _t->replaceOptimal(); break;
        case 56: _t->replaceMovable(); break;
        case 57: _t->replaceComplex(); break;
        case 58: _t->reverseIteratorsOptimal(); break;
        case 59: _t->reverseIteratorsMovable(); break;
        case 60: _t->reverseIteratorsComplex(); break;
        case 61: _t->startsWithOptimal(); break;
        case 62: _t->startsWithMovable(); break;
        case 63: _t->startsWithComplex(); break;
        case 64: _t->swapOptimal(); break;
        case 65: _t->swapMovable(); break;
        case 66: _t->swapComplex(); break;
        case 67: _t->takeAtOptimal(); break;
        case 68: _t->takeAtMovable(); break;
        case 69: _t->takeAtComplex(); break;
        case 70: _t->takeFirstOptimal(); break;
        case 71: _t->takeFirstMovable(); break;
        case 72: _t->takeFirstComplex(); break;
        case 73: _t->takeLastOptimal(); break;
        case 74: _t->takeLastMovable(); break;
        case 75: _t->takeLastComplex(); break;
        case 76: _t->toSetOptimal(); break;
        case 77: _t->toSetMovable(); break;
        case 78: _t->toSetComplex(); break;
        case 79: _t->toStdListOptimal(); break;
        case 80: _t->toStdListMovable(); break;
        case 81: _t->toStdListComplex(); break;
        case 82: _t->toVectorOptimal(); break;
        case 83: _t->toVectorMovable(); break;
        case 84: _t->toVectorComplex(); break;
        case 85: _t->valueOptimal(); break;
        case 86: _t->valueMovable(); break;
        case 87: _t->valueComplex(); break;
        case 88: _t->testOperatorsOptimal(); break;
        case 89: _t->testOperatorsMovable(); break;
        case 90: _t->testOperatorsComplex(); break;
        case 91: _t->testSTLIteratorsOptimal(); break;
        case 92: _t->testSTLIteratorsMovable(); break;
        case 93: _t->testSTLIteratorsComplex(); break;
        case 94: _t->initializeList(); break;
        case 95: _t->constSharedNullOptimal(); break;
        case 96: _t->constSharedNullMovable(); break;
        case 97: _t->constSharedNullComplex(); break;
        case 98: _t->setSharableInt_data(); break;
        case 99: _t->setSharableInt(); break;
        case 100: _t->setSharableComplex_data(); break;
        case 101: _t->setSharableComplex(); break;
        case 102: _t->eraseValidIteratorsOnSharedList(); break;
        case 103: _t->insertWithValidIteratorsOnSharedList(); break;
        case 104: _t->qhashOptimal(); break;
        case 105: _t->qhashMovable(); break;
        case 106: _t->qhashComplex(); break;
        case 107: _t->reserve(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QList::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QList.data,
      qt_meta_data_tst_QList,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QList::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QList::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QList.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QList::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 108)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 108;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 108)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 108;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
