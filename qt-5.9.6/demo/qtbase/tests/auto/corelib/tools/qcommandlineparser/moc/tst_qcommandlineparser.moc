/****************************************************************************
** Meta object code from reading C++ file 'tst_qcommandlineparser.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qcommandlineparser.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QCommandLineParser_t {
    QByteArrayData data[33];
    char stringdata0[712];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QCommandLineParser_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QCommandLineParser_t qt_meta_stringdata_tst_QCommandLineParser = {
    {
QT_MOC_LITERAL(0, 0, 22), // "tst_QCommandLineParser"
QT_MOC_LITERAL(1, 23, 12), // "initTestCase"
QT_MOC_LITERAL(2, 36, 0), // ""
QT_MOC_LITERAL(3, 37, 17), // "parsingModes_data"
QT_MOC_LITERAL(4, 55, 18), // "testInvalidOptions"
QT_MOC_LITERAL(5, 74, 23), // "testPositionalArguments"
QT_MOC_LITERAL(6, 98, 22), // "testBooleanOption_data"
QT_MOC_LITERAL(7, 121, 17), // "testBooleanOption"
QT_MOC_LITERAL(8, 139, 29), // "testOptionsAndPositional_data"
QT_MOC_LITERAL(9, 169, 24), // "testOptionsAndPositional"
QT_MOC_LITERAL(10, 194, 22), // "testMultipleNames_data"
QT_MOC_LITERAL(11, 217, 17), // "testMultipleNames"
QT_MOC_LITERAL(12, 235, 26), // "testSingleValueOption_data"
QT_MOC_LITERAL(13, 262, 21), // "testSingleValueOption"
QT_MOC_LITERAL(14, 284, 15), // "testValueNotSet"
QT_MOC_LITERAL(15, 300, 24), // "testMultipleValuesOption"
QT_MOC_LITERAL(16, 325, 35), // "testUnknownOptionErrorHandlin..."
QT_MOC_LITERAL(17, 361, 30), // "testUnknownOptionErrorHandling"
QT_MOC_LITERAL(18, 392, 19), // "testDoubleDash_data"
QT_MOC_LITERAL(19, 412, 14), // "testDoubleDash"
QT_MOC_LITERAL(20, 427, 16), // "testDefaultValue"
QT_MOC_LITERAL(21, 444, 20), // "testProcessNotCalled"
QT_MOC_LITERAL(22, 465, 17), // "testEmptyArgsList"
QT_MOC_LITERAL(23, 483, 22), // "testMissingOptionValue"
QT_MOC_LITERAL(24, 506, 22), // "testStdinArgument_data"
QT_MOC_LITERAL(25, 529, 17), // "testStdinArgument"
QT_MOC_LITERAL(26, 547, 34), // "testSingleDashWordOptionModes..."
QT_MOC_LITERAL(27, 582, 29), // "testSingleDashWordOptionModes"
QT_MOC_LITERAL(28, 612, 28), // "testCpp11StyleInitialization"
QT_MOC_LITERAL(29, 641, 17), // "testVersionOption"
QT_MOC_LITERAL(30, 659, 19), // "testHelpOption_data"
QT_MOC_LITERAL(31, 679, 14), // "testHelpOption"
QT_MOC_LITERAL(32, 694, 17) // "testQuoteEscaping"

    },
    "tst_QCommandLineParser\0initTestCase\0"
    "\0parsingModes_data\0testInvalidOptions\0"
    "testPositionalArguments\0testBooleanOption_data\0"
    "testBooleanOption\0testOptionsAndPositional_data\0"
    "testOptionsAndPositional\0"
    "testMultipleNames_data\0testMultipleNames\0"
    "testSingleValueOption_data\0"
    "testSingleValueOption\0testValueNotSet\0"
    "testMultipleValuesOption\0"
    "testUnknownOptionErrorHandling_data\0"
    "testUnknownOptionErrorHandling\0"
    "testDoubleDash_data\0testDoubleDash\0"
    "testDefaultValue\0testProcessNotCalled\0"
    "testEmptyArgsList\0testMissingOptionValue\0"
    "testStdinArgument_data\0testStdinArgument\0"
    "testSingleDashWordOptionModes_data\0"
    "testSingleDashWordOptionModes\0"
    "testCpp11StyleInitialization\0"
    "testVersionOption\0testHelpOption_data\0"
    "testHelpOption\0testQuoteEscaping"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QCommandLineParser[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      31,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  169,    2, 0x0a /* Public */,
       3,    0,  170,    2, 0x08 /* Private */,
       4,    0,  171,    2, 0x08 /* Private */,
       5,    0,  172,    2, 0x08 /* Private */,
       6,    0,  173,    2, 0x08 /* Private */,
       7,    0,  174,    2, 0x08 /* Private */,
       8,    0,  175,    2, 0x08 /* Private */,
       9,    0,  176,    2, 0x08 /* Private */,
      10,    0,  177,    2, 0x08 /* Private */,
      11,    0,  178,    2, 0x08 /* Private */,
      12,    0,  179,    2, 0x08 /* Private */,
      13,    0,  180,    2, 0x08 /* Private */,
      14,    0,  181,    2, 0x08 /* Private */,
      15,    0,  182,    2, 0x08 /* Private */,
      16,    0,  183,    2, 0x08 /* Private */,
      17,    0,  184,    2, 0x08 /* Private */,
      18,    0,  185,    2, 0x08 /* Private */,
      19,    0,  186,    2, 0x08 /* Private */,
      20,    0,  187,    2, 0x08 /* Private */,
      21,    0,  188,    2, 0x08 /* Private */,
      22,    0,  189,    2, 0x08 /* Private */,
      23,    0,  190,    2, 0x08 /* Private */,
      24,    0,  191,    2, 0x08 /* Private */,
      25,    0,  192,    2, 0x08 /* Private */,
      26,    0,  193,    2, 0x08 /* Private */,
      27,    0,  194,    2, 0x08 /* Private */,
      28,    0,  195,    2, 0x08 /* Private */,
      29,    0,  196,    2, 0x08 /* Private */,
      30,    0,  197,    2, 0x08 /* Private */,
      31,    0,  198,    2, 0x08 /* Private */,
      32,    0,  199,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QCommandLineParser::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QCommandLineParser *_t = static_cast<tst_QCommandLineParser *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->parsingModes_data(); break;
        case 2: _t->testInvalidOptions(); break;
        case 3: _t->testPositionalArguments(); break;
        case 4: _t->testBooleanOption_data(); break;
        case 5: _t->testBooleanOption(); break;
        case 6: _t->testOptionsAndPositional_data(); break;
        case 7: _t->testOptionsAndPositional(); break;
        case 8: _t->testMultipleNames_data(); break;
        case 9: _t->testMultipleNames(); break;
        case 10: _t->testSingleValueOption_data(); break;
        case 11: _t->testSingleValueOption(); break;
        case 12: _t->testValueNotSet(); break;
        case 13: _t->testMultipleValuesOption(); break;
        case 14: _t->testUnknownOptionErrorHandling_data(); break;
        case 15: _t->testUnknownOptionErrorHandling(); break;
        case 16: _t->testDoubleDash_data(); break;
        case 17: _t->testDoubleDash(); break;
        case 18: _t->testDefaultValue(); break;
        case 19: _t->testProcessNotCalled(); break;
        case 20: _t->testEmptyArgsList(); break;
        case 21: _t->testMissingOptionValue(); break;
        case 22: _t->testStdinArgument_data(); break;
        case 23: _t->testStdinArgument(); break;
        case 24: _t->testSingleDashWordOptionModes_data(); break;
        case 25: _t->testSingleDashWordOptionModes(); break;
        case 26: _t->testCpp11StyleInitialization(); break;
        case 27: _t->testVersionOption(); break;
        case 28: _t->testHelpOption_data(); break;
        case 29: _t->testHelpOption(); break;
        case 30: _t->testQuoteEscaping(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QCommandLineParser::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QCommandLineParser.data,
      qt_meta_data_tst_QCommandLineParser,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QCommandLineParser::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QCommandLineParser::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QCommandLineParser.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QCommandLineParser::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 31)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 31;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 31)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 31;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
