/****************************************************************************
** Meta object code from reading C++ file 'tst_collections.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_collections.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_Collections_t {
    QByteArrayData data[40];
    char stringdata0[505];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_Collections_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_Collections_t qt_meta_stringdata_tst_Collections = {
    {
QT_MOC_LITERAL(0, 0, 15), // "tst_Collections"
QT_MOC_LITERAL(1, 16, 8), // "typeinfo"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 7), // "qstring"
QT_MOC_LITERAL(4, 34, 4), // "list"
QT_MOC_LITERAL(5, 39, 10), // "linkedList"
QT_MOC_LITERAL(6, 50, 6), // "vector"
QT_MOC_LITERAL(7, 57, 9), // "byteArray"
QT_MOC_LITERAL(8, 67, 5), // "stack"
QT_MOC_LITERAL(9, 73, 4), // "hash"
QT_MOC_LITERAL(10, 78, 3), // "map"
QT_MOC_LITERAL(11, 82, 8), // "bitArray"
QT_MOC_LITERAL(12, 91, 5), // "cache"
QT_MOC_LITERAL(13, 97, 6), // "regexp"
QT_MOC_LITERAL(14, 104, 4), // "pair"
QT_MOC_LITERAL(15, 109, 13), // "sharableQList"
QT_MOC_LITERAL(16, 123, 19), // "sharableQLinkedList"
QT_MOC_LITERAL(17, 143, 15), // "sharableQVector"
QT_MOC_LITERAL(18, 159, 12), // "sharableQMap"
QT_MOC_LITERAL(19, 172, 13), // "sharableQHash"
QT_MOC_LITERAL(20, 186, 9), // "q_foreach"
QT_MOC_LITERAL(21, 196, 11), // "conversions"
QT_MOC_LITERAL(22, 208, 18), // "javaStyleIterators"
QT_MOC_LITERAL(23, 227, 28), // "constAndNonConstStlIterators"
QT_MOC_LITERAL(24, 256, 15), // "vector_stl_data"
QT_MOC_LITERAL(25, 272, 10), // "vector_stl"
QT_MOC_LITERAL(26, 283, 13), // "list_stl_data"
QT_MOC_LITERAL(27, 297, 8), // "list_stl"
QT_MOC_LITERAL(28, 306, 19), // "linkedlist_stl_data"
QT_MOC_LITERAL(29, 326, 14), // "linkedlist_stl"
QT_MOC_LITERAL(30, 341, 6), // "q_init"
QT_MOC_LITERAL(31, 348, 11), // "pointersize"
QT_MOC_LITERAL(32, 360, 22), // "containerInstantiation"
QT_MOC_LITERAL(33, 383, 10), // "qtimerList"
QT_MOC_LITERAL(34, 394, 17), // "containerTypedefs"
QT_MOC_LITERAL(35, 412, 15), // "forwardDeclared"
QT_MOC_LITERAL(36, 428, 9), // "alignment"
QT_MOC_LITERAL(37, 438, 37), // "QTBUG13079_collectionInsideCo..."
QT_MOC_LITERAL(38, 476, 9), // "foreach_2"
QT_MOC_LITERAL(39, 486, 18) // "insert_remove_loop"

    },
    "tst_Collections\0typeinfo\0\0qstring\0"
    "list\0linkedList\0vector\0byteArray\0stack\0"
    "hash\0map\0bitArray\0cache\0regexp\0pair\0"
    "sharableQList\0sharableQLinkedList\0"
    "sharableQVector\0sharableQMap\0sharableQHash\0"
    "q_foreach\0conversions\0javaStyleIterators\0"
    "constAndNonConstStlIterators\0"
    "vector_stl_data\0vector_stl\0list_stl_data\0"
    "list_stl\0linkedlist_stl_data\0"
    "linkedlist_stl\0q_init\0pointersize\0"
    "containerInstantiation\0qtimerList\0"
    "containerTypedefs\0forwardDeclared\0"
    "alignment\0QTBUG13079_collectionInsideCollection\0"
    "foreach_2\0insert_remove_loop"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_Collections[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      38,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  204,    2, 0x08 /* Private */,
       3,    0,  205,    2, 0x08 /* Private */,
       4,    0,  206,    2, 0x08 /* Private */,
       5,    0,  207,    2, 0x08 /* Private */,
       6,    0,  208,    2, 0x08 /* Private */,
       7,    0,  209,    2, 0x08 /* Private */,
       8,    0,  210,    2, 0x08 /* Private */,
       9,    0,  211,    2, 0x08 /* Private */,
      10,    0,  212,    2, 0x08 /* Private */,
      11,    0,  213,    2, 0x08 /* Private */,
      12,    0,  214,    2, 0x08 /* Private */,
      13,    0,  215,    2, 0x08 /* Private */,
      14,    0,  216,    2, 0x08 /* Private */,
      15,    0,  217,    2, 0x08 /* Private */,
      16,    0,  218,    2, 0x08 /* Private */,
      17,    0,  219,    2, 0x08 /* Private */,
      18,    0,  220,    2, 0x08 /* Private */,
      19,    0,  221,    2, 0x08 /* Private */,
      20,    0,  222,    2, 0x08 /* Private */,
      21,    0,  223,    2, 0x08 /* Private */,
      22,    0,  224,    2, 0x08 /* Private */,
      23,    0,  225,    2, 0x08 /* Private */,
      24,    0,  226,    2, 0x08 /* Private */,
      25,    0,  227,    2, 0x08 /* Private */,
      26,    0,  228,    2, 0x08 /* Private */,
      27,    0,  229,    2, 0x08 /* Private */,
      28,    0,  230,    2, 0x08 /* Private */,
      29,    0,  231,    2, 0x08 /* Private */,
      30,    0,  232,    2, 0x08 /* Private */,
      31,    0,  233,    2, 0x08 /* Private */,
      32,    0,  234,    2, 0x08 /* Private */,
      33,    0,  235,    2, 0x08 /* Private */,
      34,    0,  236,    2, 0x08 /* Private */,
      35,    0,  237,    2, 0x08 /* Private */,
      36,    0,  238,    2, 0x08 /* Private */,
      37,    0,  239,    2, 0x08 /* Private */,
      38,    0,  240,    2, 0x08 /* Private */,
      39,    0,  241,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_Collections::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_Collections *_t = static_cast<tst_Collections *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->typeinfo(); break;
        case 1: _t->qstring(); break;
        case 2: _t->list(); break;
        case 3: _t->linkedList(); break;
        case 4: _t->vector(); break;
        case 5: _t->byteArray(); break;
        case 6: _t->stack(); break;
        case 7: _t->hash(); break;
        case 8: _t->map(); break;
        case 9: _t->bitArray(); break;
        case 10: _t->cache(); break;
        case 11: _t->regexp(); break;
        case 12: _t->pair(); break;
        case 13: _t->sharableQList(); break;
        case 14: _t->sharableQLinkedList(); break;
        case 15: _t->sharableQVector(); break;
        case 16: _t->sharableQMap(); break;
        case 17: _t->sharableQHash(); break;
        case 18: _t->q_foreach(); break;
        case 19: _t->conversions(); break;
        case 20: _t->javaStyleIterators(); break;
        case 21: _t->constAndNonConstStlIterators(); break;
        case 22: _t->vector_stl_data(); break;
        case 23: _t->vector_stl(); break;
        case 24: _t->list_stl_data(); break;
        case 25: _t->list_stl(); break;
        case 26: _t->linkedlist_stl_data(); break;
        case 27: _t->linkedlist_stl(); break;
        case 28: _t->q_init(); break;
        case 29: _t->pointersize(); break;
        case 30: _t->containerInstantiation(); break;
        case 31: _t->qtimerList(); break;
        case 32: _t->containerTypedefs(); break;
        case 33: _t->forwardDeclared(); break;
        case 34: _t->alignment(); break;
        case 35: _t->QTBUG13079_collectionInsideCollection(); break;
        case 36: _t->foreach_2(); break;
        case 37: _t->insert_remove_loop(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_Collections::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_Collections.data,
      qt_meta_data_tst_Collections,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_Collections::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_Collections::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_Collections.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_Collections::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 38)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 38;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 38)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 38;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
