/****************************************************************************
** Meta object code from reading C++ file 'tst_qeasingcurve.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qeasingcurve.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QEasingCurve_t {
    QByteArrayData data[18];
    char stringdata0[243];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QEasingCurve_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QEasingCurve_t qt_meta_stringdata_tst_QEasingCurve = {
    {
QT_MOC_LITERAL(0, 0, 16), // "tst_QEasingCurve"
QT_MOC_LITERAL(1, 17, 4), // "type"
QT_MOC_LITERAL(2, 22, 0), // ""
QT_MOC_LITERAL(3, 23, 16), // "propertyDefaults"
QT_MOC_LITERAL(4, 40, 21), // "valueForProgress_data"
QT_MOC_LITERAL(5, 62, 16), // "valueForProgress"
QT_MOC_LITERAL(6, 79, 13), // "setCustomType"
QT_MOC_LITERAL(7, 93, 9), // "operators"
QT_MOC_LITERAL(8, 103, 10), // "properties"
QT_MOC_LITERAL(9, 114, 9), // "metaTypes"
QT_MOC_LITERAL(10, 124, 27), // "propertyOrderIsNotImportant"
QT_MOC_LITERAL(11, 152, 17), // "bezierSpline_data"
QT_MOC_LITERAL(12, 170, 12), // "bezierSpline"
QT_MOC_LITERAL(13, 183, 14), // "tcbSpline_data"
QT_MOC_LITERAL(14, 198, 9), // "tcbSpline"
QT_MOC_LITERAL(15, 208, 14), // "testCbrtDouble"
QT_MOC_LITERAL(16, 223, 13), // "testCbrtFloat"
QT_MOC_LITERAL(17, 237, 5) // "cpp11"

    },
    "tst_QEasingCurve\0type\0\0propertyDefaults\0"
    "valueForProgress_data\0valueForProgress\0"
    "setCustomType\0operators\0properties\0"
    "metaTypes\0propertyOrderIsNotImportant\0"
    "bezierSpline_data\0bezierSpline\0"
    "tcbSpline_data\0tcbSpline\0testCbrtDouble\0"
    "testCbrtFloat\0cpp11"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QEasingCurve[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   94,    2, 0x08 /* Private */,
       3,    0,   95,    2, 0x08 /* Private */,
       4,    0,   96,    2, 0x08 /* Private */,
       5,    0,   97,    2, 0x08 /* Private */,
       6,    0,   98,    2, 0x08 /* Private */,
       7,    0,   99,    2, 0x08 /* Private */,
       8,    0,  100,    2, 0x08 /* Private */,
       9,    0,  101,    2, 0x08 /* Private */,
      10,    0,  102,    2, 0x08 /* Private */,
      11,    0,  103,    2, 0x08 /* Private */,
      12,    0,  104,    2, 0x08 /* Private */,
      13,    0,  105,    2, 0x08 /* Private */,
      14,    0,  106,    2, 0x08 /* Private */,
      15,    0,  107,    2, 0x08 /* Private */,
      16,    0,  108,    2, 0x08 /* Private */,
      17,    0,  109,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QEasingCurve::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QEasingCurve *_t = static_cast<tst_QEasingCurve *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->type(); break;
        case 1: _t->propertyDefaults(); break;
        case 2: _t->valueForProgress_data(); break;
        case 3: _t->valueForProgress(); break;
        case 4: _t->setCustomType(); break;
        case 5: _t->operators(); break;
        case 6: _t->properties(); break;
        case 7: _t->metaTypes(); break;
        case 8: _t->propertyOrderIsNotImportant(); break;
        case 9: _t->bezierSpline_data(); break;
        case 10: _t->bezierSpline(); break;
        case 11: _t->tcbSpline_data(); break;
        case 12: _t->tcbSpline(); break;
        case 13: _t->testCbrtDouble(); break;
        case 14: _t->testCbrtFloat(); break;
        case 15: _t->cpp11(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QEasingCurve::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QEasingCurve.data,
      qt_meta_data_tst_QEasingCurve,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QEasingCurve::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QEasingCurve::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QEasingCurve.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QEasingCurve::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 16;
    }
    return _id;
}
struct qt_meta_stringdata_tst_QEasingProperties_t {
    QByteArrayData data[2];
    char stringdata0[29];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QEasingProperties_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QEasingProperties_t qt_meta_stringdata_tst_QEasingProperties = {
    {
QT_MOC_LITERAL(0, 0, 21), // "tst_QEasingProperties"
QT_MOC_LITERAL(1, 22, 6) // "easing"

    },
    "tst_QEasingProperties\0easing"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QEasingProperties[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::QEasingCurve, 0x00095103,

       0        // eod
};

void tst_QEasingProperties::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        tst_QEasingProperties *_t = static_cast<tst_QEasingProperties *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QEasingCurve*>(_v) = _t->easing(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        tst_QEasingProperties *_t = static_cast<tst_QEasingProperties *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setEasing(*reinterpret_cast< QEasingCurve*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject tst_QEasingProperties::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QEasingProperties.data,
      qt_meta_data_tst_QEasingProperties,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QEasingProperties::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QEasingProperties::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QEasingProperties.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QEasingProperties::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
   if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
