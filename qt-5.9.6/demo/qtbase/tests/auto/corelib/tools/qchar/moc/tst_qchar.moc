/****************************************************************************
** Meta object code from reading C++ file 'tst_qchar.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qchar.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QChar_t {
    QByteArrayData data[36];
    char stringdata0[447];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QChar_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QChar_t qt_meta_stringdata_tst_QChar = {
    {
QT_MOC_LITERAL(0, 0, 9), // "tst_QChar"
QT_MOC_LITERAL(1, 10, 18), // "operator_eqeq_null"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 14), // "operators_data"
QT_MOC_LITERAL(4, 45, 9), // "operators"
QT_MOC_LITERAL(5, 55, 7), // "toUpper"
QT_MOC_LITERAL(6, 63, 7), // "toLower"
QT_MOC_LITERAL(7, 71, 7), // "toTitle"
QT_MOC_LITERAL(8, 79, 12), // "toCaseFolded"
QT_MOC_LITERAL(9, 92, 12), // "isDigit_data"
QT_MOC_LITERAL(10, 105, 7), // "isDigit"
QT_MOC_LITERAL(11, 113, 13), // "isLetter_data"
QT_MOC_LITERAL(12, 127, 8), // "isLetter"
QT_MOC_LITERAL(13, 136, 21), // "isLetterOrNumber_data"
QT_MOC_LITERAL(14, 158, 16), // "isLetterOrNumber"
QT_MOC_LITERAL(15, 175, 7), // "isPrint"
QT_MOC_LITERAL(16, 183, 7), // "isUpper"
QT_MOC_LITERAL(17, 191, 7), // "isLower"
QT_MOC_LITERAL(18, 199, 11), // "isTitleCase"
QT_MOC_LITERAL(19, 211, 12), // "isSpace_data"
QT_MOC_LITERAL(20, 224, 7), // "isSpace"
QT_MOC_LITERAL(21, 232, 14), // "isSpaceSpecial"
QT_MOC_LITERAL(22, 247, 8), // "category"
QT_MOC_LITERAL(23, 256, 9), // "direction"
QT_MOC_LITERAL(24, 266, 11), // "joiningType"
QT_MOC_LITERAL(25, 278, 14), // "combiningClass"
QT_MOC_LITERAL(26, 293, 10), // "digitValue"
QT_MOC_LITERAL(27, 304, 12), // "mirroredChar"
QT_MOC_LITERAL(28, 317, 13), // "decomposition"
QT_MOC_LITERAL(29, 331, 14), // "lineBreakClass"
QT_MOC_LITERAL(30, 346, 6), // "script"
QT_MOC_LITERAL(31, 353, 18), // "normalization_data"
QT_MOC_LITERAL(32, 372, 13), // "normalization"
QT_MOC_LITERAL(33, 386, 20), // "normalization_manual"
QT_MOC_LITERAL(34, 407, 24), // "normalizationCorrections"
QT_MOC_LITERAL(35, 432, 14) // "unicodeVersion"

    },
    "tst_QChar\0operator_eqeq_null\0\0"
    "operators_data\0operators\0toUpper\0"
    "toLower\0toTitle\0toCaseFolded\0isDigit_data\0"
    "isDigit\0isLetter_data\0isLetter\0"
    "isLetterOrNumber_data\0isLetterOrNumber\0"
    "isPrint\0isUpper\0isLower\0isTitleCase\0"
    "isSpace_data\0isSpace\0isSpaceSpecial\0"
    "category\0direction\0joiningType\0"
    "combiningClass\0digitValue\0mirroredChar\0"
    "decomposition\0lineBreakClass\0script\0"
    "normalization_data\0normalization\0"
    "normalization_manual\0normalizationCorrections\0"
    "unicodeVersion"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QChar[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      34,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  184,    2, 0x08 /* Private */,
       3,    0,  185,    2, 0x08 /* Private */,
       4,    0,  186,    2, 0x08 /* Private */,
       5,    0,  187,    2, 0x08 /* Private */,
       6,    0,  188,    2, 0x08 /* Private */,
       7,    0,  189,    2, 0x08 /* Private */,
       8,    0,  190,    2, 0x08 /* Private */,
       9,    0,  191,    2, 0x08 /* Private */,
      10,    0,  192,    2, 0x08 /* Private */,
      11,    0,  193,    2, 0x08 /* Private */,
      12,    0,  194,    2, 0x08 /* Private */,
      13,    0,  195,    2, 0x08 /* Private */,
      14,    0,  196,    2, 0x08 /* Private */,
      15,    0,  197,    2, 0x08 /* Private */,
      16,    0,  198,    2, 0x08 /* Private */,
      17,    0,  199,    2, 0x08 /* Private */,
      18,    0,  200,    2, 0x08 /* Private */,
      19,    0,  201,    2, 0x08 /* Private */,
      20,    0,  202,    2, 0x08 /* Private */,
      21,    0,  203,    2, 0x08 /* Private */,
      22,    0,  204,    2, 0x08 /* Private */,
      23,    0,  205,    2, 0x08 /* Private */,
      24,    0,  206,    2, 0x08 /* Private */,
      25,    0,  207,    2, 0x08 /* Private */,
      26,    0,  208,    2, 0x08 /* Private */,
      27,    0,  209,    2, 0x08 /* Private */,
      28,    0,  210,    2, 0x08 /* Private */,
      29,    0,  211,    2, 0x08 /* Private */,
      30,    0,  212,    2, 0x08 /* Private */,
      31,    0,  213,    2, 0x08 /* Private */,
      32,    0,  214,    2, 0x08 /* Private */,
      33,    0,  215,    2, 0x08 /* Private */,
      34,    0,  216,    2, 0x08 /* Private */,
      35,    0,  217,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QChar::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QChar *_t = static_cast<tst_QChar *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->operator_eqeq_null(); break;
        case 1: _t->operators_data(); break;
        case 2: _t->operators(); break;
        case 3: _t->toUpper(); break;
        case 4: _t->toLower(); break;
        case 5: _t->toTitle(); break;
        case 6: _t->toCaseFolded(); break;
        case 7: _t->isDigit_data(); break;
        case 8: _t->isDigit(); break;
        case 9: _t->isLetter_data(); break;
        case 10: _t->isLetter(); break;
        case 11: _t->isLetterOrNumber_data(); break;
        case 12: _t->isLetterOrNumber(); break;
        case 13: _t->isPrint(); break;
        case 14: _t->isUpper(); break;
        case 15: _t->isLower(); break;
        case 16: _t->isTitleCase(); break;
        case 17: _t->isSpace_data(); break;
        case 18: _t->isSpace(); break;
        case 19: _t->isSpaceSpecial(); break;
        case 20: _t->category(); break;
        case 21: _t->direction(); break;
        case 22: _t->joiningType(); break;
        case 23: _t->combiningClass(); break;
        case 24: _t->digitValue(); break;
        case 25: _t->mirroredChar(); break;
        case 26: _t->decomposition(); break;
        case 27: _t->lineBreakClass(); break;
        case 28: _t->script(); break;
        case 29: _t->normalization_data(); break;
        case 30: _t->normalization(); break;
        case 31: _t->normalization_manual(); break;
        case 32: _t->normalizationCorrections(); break;
        case 33: _t->unicodeVersion(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QChar::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QChar.data,
      qt_meta_data_tst_QChar,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QChar::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QChar::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QChar.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QChar::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 34)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 34;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 34)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 34;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
