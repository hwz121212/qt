/****************************************************************************
** Meta object code from reading C++ file 'tst_qxmlstream.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qxmlstream.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QXmlStream_t {
    QByteArrayData data[45];
    char stringdata0[906];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QXmlStream_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QXmlStream_t qt_meta_stringdata_tst_QXmlStream = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QXmlStream"
QT_MOC_LITERAL(1, 15, 12), // "initTestCase"
QT_MOC_LITERAL(2, 28, 0), // ""
QT_MOC_LITERAL(3, 29, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 45, 14), // "reportFailures"
QT_MOC_LITERAL(5, 60, 19), // "reportFailures_data"
QT_MOC_LITERAL(6, 80, 13), // "checkBaseline"
QT_MOC_LITERAL(7, 94, 18), // "checkBaseline_data"
QT_MOC_LITERAL(8, 113, 10), // "testReader"
QT_MOC_LITERAL(9, 124, 15), // "testReader_data"
QT_MOC_LITERAL(10, 140, 13), // "reportSuccess"
QT_MOC_LITERAL(11, 154, 18), // "reportSuccess_data"
QT_MOC_LITERAL(12, 173, 11), // "writerHangs"
QT_MOC_LITERAL(13, 185, 32), // "writerAutoFormattingWithComments"
QT_MOC_LITERAL(14, 218, 28), // "writerAutoFormattingWithTabs"
QT_MOC_LITERAL(15, 247, 46), // "writerAutoFormattingWithProce..."
QT_MOC_LITERAL(16, 294, 19), // "writerAutoEmptyTags"
QT_MOC_LITERAL(17, 314, 24), // "writeAttributesWithSpace"
QT_MOC_LITERAL(18, 339, 29), // "addExtraNamespaceDeclarations"
QT_MOC_LITERAL(19, 369, 17), // "setEntityResolver"
QT_MOC_LITERAL(20, 387, 15), // "readFromQBuffer"
QT_MOC_LITERAL(21, 403, 22), // "readFromQBufferInvalid"
QT_MOC_LITERAL(22, 426, 20), // "readNextStartElement"
QT_MOC_LITERAL(23, 447, 15), // "readElementText"
QT_MOC_LITERAL(24, 463, 20), // "readElementText_data"
QT_MOC_LITERAL(25, 484, 17), // "crashInUTF16Codec"
QT_MOC_LITERAL(26, 502, 21), // "hasAttributeSignature"
QT_MOC_LITERAL(27, 524, 12), // "hasAttribute"
QT_MOC_LITERAL(28, 537, 14), // "writeWithCodec"
QT_MOC_LITERAL(29, 552, 18), // "writeWithUtf8Codec"
QT_MOC_LITERAL(30, 571, 19), // "writeWithUtf16Codec"
QT_MOC_LITERAL(31, 591, 19), // "writeWithStandalone"
QT_MOC_LITERAL(32, 611, 23), // "entitiesAndWhitespace_1"
QT_MOC_LITERAL(33, 635, 23), // "entitiesAndWhitespace_2"
QT_MOC_LITERAL(34, 659, 23), // "testFalsePrematureError"
QT_MOC_LITERAL(35, 683, 30), // "garbageInXMLPrologDefaultCodec"
QT_MOC_LITERAL(36, 714, 32), // "garbageInXMLPrologUTF8Explicitly"
QT_MOC_LITERAL(37, 747, 5), // "clear"
QT_MOC_LITERAL(38, 753, 23), // "checkCommentIndentation"
QT_MOC_LITERAL(39, 777, 28), // "checkCommentIndentation_data"
QT_MOC_LITERAL(40, 806, 22), // "crashInXmlStreamReader"
QT_MOC_LITERAL(41, 829, 14), // "write8bitCodec"
QT_MOC_LITERAL(42, 844, 28), // "invalidStringCharacters_data"
QT_MOC_LITERAL(43, 873, 23), // "invalidStringCharacters"
QT_MOC_LITERAL(44, 897, 8) // "hasError"

    },
    "tst_QXmlStream\0initTestCase\0\0"
    "cleanupTestCase\0reportFailures\0"
    "reportFailures_data\0checkBaseline\0"
    "checkBaseline_data\0testReader\0"
    "testReader_data\0reportSuccess\0"
    "reportSuccess_data\0writerHangs\0"
    "writerAutoFormattingWithComments\0"
    "writerAutoFormattingWithTabs\0"
    "writerAutoFormattingWithProcessingInstructions\0"
    "writerAutoEmptyTags\0writeAttributesWithSpace\0"
    "addExtraNamespaceDeclarations\0"
    "setEntityResolver\0readFromQBuffer\0"
    "readFromQBufferInvalid\0readNextStartElement\0"
    "readElementText\0readElementText_data\0"
    "crashInUTF16Codec\0hasAttributeSignature\0"
    "hasAttribute\0writeWithCodec\0"
    "writeWithUtf8Codec\0writeWithUtf16Codec\0"
    "writeWithStandalone\0entitiesAndWhitespace_1\0"
    "entitiesAndWhitespace_2\0testFalsePrematureError\0"
    "garbageInXMLPrologDefaultCodec\0"
    "garbageInXMLPrologUTF8Explicitly\0clear\0"
    "checkCommentIndentation\0"
    "checkCommentIndentation_data\0"
    "crashInXmlStreamReader\0write8bitCodec\0"
    "invalidStringCharacters_data\0"
    "invalidStringCharacters\0hasError"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QXmlStream[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      43,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  229,    2, 0x08 /* Private */,
       3,    0,  230,    2, 0x08 /* Private */,
       4,    0,  231,    2, 0x08 /* Private */,
       5,    0,  232,    2, 0x08 /* Private */,
       6,    0,  233,    2, 0x08 /* Private */,
       7,    0,  234,    2, 0x08 /* Private */,
       8,    0,  235,    2, 0x08 /* Private */,
       9,    0,  236,    2, 0x08 /* Private */,
      10,    0,  237,    2, 0x08 /* Private */,
      11,    0,  238,    2, 0x08 /* Private */,
      12,    0,  239,    2, 0x08 /* Private */,
      13,    0,  240,    2, 0x08 /* Private */,
      14,    0,  241,    2, 0x08 /* Private */,
      15,    0,  242,    2, 0x08 /* Private */,
      16,    0,  243,    2, 0x08 /* Private */,
      17,    0,  244,    2, 0x08 /* Private */,
      18,    0,  245,    2, 0x08 /* Private */,
      19,    0,  246,    2, 0x08 /* Private */,
      20,    0,  247,    2, 0x08 /* Private */,
      21,    0,  248,    2, 0x08 /* Private */,
      22,    0,  249,    2, 0x08 /* Private */,
      23,    0,  250,    2, 0x08 /* Private */,
      24,    0,  251,    2, 0x08 /* Private */,
      25,    0,  252,    2, 0x08 /* Private */,
      26,    0,  253,    2, 0x08 /* Private */,
      27,    0,  254,    2, 0x08 /* Private */,
      28,    0,  255,    2, 0x08 /* Private */,
      29,    0,  256,    2, 0x08 /* Private */,
      30,    0,  257,    2, 0x08 /* Private */,
      31,    0,  258,    2, 0x08 /* Private */,
      32,    0,  259,    2, 0x08 /* Private */,
      33,    0,  260,    2, 0x08 /* Private */,
      34,    0,  261,    2, 0x08 /* Private */,
      35,    0,  262,    2, 0x08 /* Private */,
      36,    0,  263,    2, 0x08 /* Private */,
      37,    0,  264,    2, 0x08 /* Private */,
      38,    0,  265,    2, 0x08 /* Private */,
      39,    0,  266,    2, 0x08 /* Private */,
      40,    0,  267,    2, 0x08 /* Private */,
      41,    0,  268,    2, 0x08 /* Private */,
      42,    0,  269,    2, 0x08 /* Private */,
      43,    0,  270,    2, 0x08 /* Private */,
      44,    0,  271,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QXmlStream::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QXmlStream *_t = static_cast<tst_QXmlStream *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->reportFailures(); break;
        case 3: _t->reportFailures_data(); break;
        case 4: _t->checkBaseline(); break;
        case 5: _t->checkBaseline_data(); break;
        case 6: _t->testReader(); break;
        case 7: _t->testReader_data(); break;
        case 8: _t->reportSuccess(); break;
        case 9: _t->reportSuccess_data(); break;
        case 10: _t->writerHangs(); break;
        case 11: _t->writerAutoFormattingWithComments(); break;
        case 12: _t->writerAutoFormattingWithTabs(); break;
        case 13: _t->writerAutoFormattingWithProcessingInstructions(); break;
        case 14: _t->writerAutoEmptyTags(); break;
        case 15: _t->writeAttributesWithSpace(); break;
        case 16: _t->addExtraNamespaceDeclarations(); break;
        case 17: _t->setEntityResolver(); break;
        case 18: _t->readFromQBuffer(); break;
        case 19: _t->readFromQBufferInvalid(); break;
        case 20: _t->readNextStartElement(); break;
        case 21: _t->readElementText(); break;
        case 22: _t->readElementText_data(); break;
        case 23: _t->crashInUTF16Codec(); break;
        case 24: _t->hasAttributeSignature(); break;
        case 25: _t->hasAttribute(); break;
        case 26: _t->writeWithCodec(); break;
        case 27: _t->writeWithUtf8Codec(); break;
        case 28: _t->writeWithUtf16Codec(); break;
        case 29: _t->writeWithStandalone(); break;
        case 30: _t->entitiesAndWhitespace_1(); break;
        case 31: _t->entitiesAndWhitespace_2(); break;
        case 32: _t->testFalsePrematureError(); break;
        case 33: _t->garbageInXMLPrologDefaultCodec(); break;
        case 34: _t->garbageInXMLPrologUTF8Explicitly(); break;
        case 35: _t->clear(); break;
        case 36: _t->checkCommentIndentation(); break;
        case 37: _t->checkCommentIndentation_data(); break;
        case 38: _t->crashInXmlStreamReader(); break;
        case 39: _t->write8bitCodec(); break;
        case 40: _t->invalidStringCharacters_data(); break;
        case 41: _t->invalidStringCharacters(); break;
        case 42: _t->hasError(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QXmlStream::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QXmlStream.data,
      qt_meta_data_tst_QXmlStream,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QXmlStream::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QXmlStream::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QXmlStream.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QXmlStream::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 43)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 43;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 43)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 43;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
