/****************************************************************************
** Meta object code from reading C++ file 'tst_qtjson.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qtjson.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QtJson_t {
    QByteArrayData data[78];
    char stringdata0[1192];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QtJson_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QtJson_t qt_meta_stringdata_tst_QtJson = {
    {
QT_MOC_LITERAL(0, 0, 10), // "tst_QtJson"
QT_MOC_LITERAL(1, 11, 12), // "initTestCase"
QT_MOC_LITERAL(2, 24, 0), // ""
QT_MOC_LITERAL(3, 25, 15), // "testValueSimple"
QT_MOC_LITERAL(4, 41, 11), // "testNumbers"
QT_MOC_LITERAL(5, 53, 13), // "testNumbers_2"
QT_MOC_LITERAL(6, 67, 13), // "testNumbers_3"
QT_MOC_LITERAL(7, 81, 13), // "testNumbers_4"
QT_MOC_LITERAL(8, 95, 16), // "testObjectSimple"
QT_MOC_LITERAL(9, 112, 19), // "testObjectSmallKeys"
QT_MOC_LITERAL(10, 132, 15), // "testArraySimple"
QT_MOC_LITERAL(11, 148, 15), // "testValueObject"
QT_MOC_LITERAL(12, 164, 14), // "testValueArray"
QT_MOC_LITERAL(13, 179, 16), // "testObjectNested"
QT_MOC_LITERAL(14, 196, 15), // "testArrayNested"
QT_MOC_LITERAL(15, 212, 20), // "testArrayNestedEmpty"
QT_MOC_LITERAL(16, 233, 25), // "testArrayComfortOperators"
QT_MOC_LITERAL(17, 259, 21), // "testObjectNestedEmpty"
QT_MOC_LITERAL(18, 281, 12), // "testValueRef"
QT_MOC_LITERAL(19, 294, 19), // "testObjectIteration"
QT_MOC_LITERAL(20, 314, 18), // "testArrayIteration"
QT_MOC_LITERAL(21, 333, 14), // "testObjectFind"
QT_MOC_LITERAL(22, 348, 12), // "testDocument"
QT_MOC_LITERAL(23, 361, 10), // "nullValues"
QT_MOC_LITERAL(24, 372, 10), // "nullArrays"
QT_MOC_LITERAL(25, 383, 10), // "nullObject"
QT_MOC_LITERAL(26, 394, 15), // "constNullObject"
QT_MOC_LITERAL(27, 410, 10), // "keySorting"
QT_MOC_LITERAL(28, 421, 15), // "undefinedValues"
QT_MOC_LITERAL(29, 437, 11), // "fromVariant"
QT_MOC_LITERAL(30, 449, 14), // "fromVariantMap"
QT_MOC_LITERAL(31, 464, 15), // "fromVariantHash"
QT_MOC_LITERAL(32, 480, 12), // "toVariantMap"
QT_MOC_LITERAL(33, 493, 13), // "toVariantHash"
QT_MOC_LITERAL(34, 507, 13), // "toVariantList"
QT_MOC_LITERAL(35, 521, 6), // "toJson"
QT_MOC_LITERAL(36, 528, 24), // "toJsonSillyNumericValues"
QT_MOC_LITERAL(37, 553, 24), // "toJsonLargeNumericValues"
QT_MOC_LITERAL(38, 578, 8), // "fromJson"
QT_MOC_LITERAL(39, 587, 14), // "fromJsonErrors"
QT_MOC_LITERAL(40, 602, 10), // "fromBinary"
QT_MOC_LITERAL(41, 613, 20), // "toAndFromBinary_data"
QT_MOC_LITERAL(42, 634, 15), // "toAndFromBinary"
QT_MOC_LITERAL(43, 650, 17), // "invalidBinaryData"
QT_MOC_LITERAL(44, 668, 12), // "parseNumbers"
QT_MOC_LITERAL(45, 681, 12), // "parseStrings"
QT_MOC_LITERAL(46, 694, 18), // "parseDuplicateKeys"
QT_MOC_LITERAL(47, 713, 10), // "testParser"
QT_MOC_LITERAL(48, 724, 12), // "compactArray"
QT_MOC_LITERAL(49, 737, 13), // "compactObject"
QT_MOC_LITERAL(50, 751, 10), // "validation"
QT_MOC_LITERAL(51, 762, 16), // "assignToDocument"
QT_MOC_LITERAL(52, 779, 17), // "testDuplicateKeys"
QT_MOC_LITERAL(53, 797, 14), // "testCompaction"
QT_MOC_LITERAL(54, 812, 15), // "testDebugStream"
QT_MOC_LITERAL(55, 828, 19), // "testCompactionError"
QT_MOC_LITERAL(56, 848, 19), // "parseUnicodeEscapes"
QT_MOC_LITERAL(57, 868, 13), // "assignObjects"
QT_MOC_LITERAL(58, 882, 12), // "assignArrays"
QT_MOC_LITERAL(59, 895, 17), // "testTrailingComma"
QT_MOC_LITERAL(60, 913, 13), // "testDetachBug"
QT_MOC_LITERAL(61, 927, 23), // "testJsonValueRefDefault"
QT_MOC_LITERAL(62, 951, 11), // "valueEquals"
QT_MOC_LITERAL(63, 963, 17), // "objectEquals_data"
QT_MOC_LITERAL(64, 981, 12), // "objectEquals"
QT_MOC_LITERAL(65, 994, 16), // "arrayEquals_data"
QT_MOC_LITERAL(66, 1011, 11), // "arrayEquals"
QT_MOC_LITERAL(67, 1023, 3), // "bom"
QT_MOC_LITERAL(68, 1027, 7), // "nesting"
QT_MOC_LITERAL(69, 1035, 11), // "longStrings"
QT_MOC_LITERAL(70, 1047, 20), // "arrayInitializerList"
QT_MOC_LITERAL(71, 1068, 21), // "objectInitializerList"
QT_MOC_LITERAL(72, 1090, 11), // "unicodeKeys"
QT_MOC_LITERAL(73, 1102, 12), // "garbageAtEnd"
QT_MOC_LITERAL(74, 1115, 17), // "removeNonLatinKey"
QT_MOC_LITERAL(75, 1133, 19), // "documentFromVariant"
QT_MOC_LITERAL(76, 1153, 21), // "parseErrorOffset_data"
QT_MOC_LITERAL(77, 1175, 16) // "parseErrorOffset"

    },
    "tst_QtJson\0initTestCase\0\0testValueSimple\0"
    "testNumbers\0testNumbers_2\0testNumbers_3\0"
    "testNumbers_4\0testObjectSimple\0"
    "testObjectSmallKeys\0testArraySimple\0"
    "testValueObject\0testValueArray\0"
    "testObjectNested\0testArrayNested\0"
    "testArrayNestedEmpty\0testArrayComfortOperators\0"
    "testObjectNestedEmpty\0testValueRef\0"
    "testObjectIteration\0testArrayIteration\0"
    "testObjectFind\0testDocument\0nullValues\0"
    "nullArrays\0nullObject\0constNullObject\0"
    "keySorting\0undefinedValues\0fromVariant\0"
    "fromVariantMap\0fromVariantHash\0"
    "toVariantMap\0toVariantHash\0toVariantList\0"
    "toJson\0toJsonSillyNumericValues\0"
    "toJsonLargeNumericValues\0fromJson\0"
    "fromJsonErrors\0fromBinary\0"
    "toAndFromBinary_data\0toAndFromBinary\0"
    "invalidBinaryData\0parseNumbers\0"
    "parseStrings\0parseDuplicateKeys\0"
    "testParser\0compactArray\0compactObject\0"
    "validation\0assignToDocument\0"
    "testDuplicateKeys\0testCompaction\0"
    "testDebugStream\0testCompactionError\0"
    "parseUnicodeEscapes\0assignObjects\0"
    "assignArrays\0testTrailingComma\0"
    "testDetachBug\0testJsonValueRefDefault\0"
    "valueEquals\0objectEquals_data\0"
    "objectEquals\0arrayEquals_data\0arrayEquals\0"
    "bom\0nesting\0longStrings\0arrayInitializerList\0"
    "objectInitializerList\0unicodeKeys\0"
    "garbageAtEnd\0removeNonLatinKey\0"
    "documentFromVariant\0parseErrorOffset_data\0"
    "parseErrorOffset"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QtJson[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      76,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  394,    2, 0x08 /* Private */,
       3,    0,  395,    2, 0x08 /* Private */,
       4,    0,  396,    2, 0x08 /* Private */,
       5,    0,  397,    2, 0x08 /* Private */,
       6,    0,  398,    2, 0x08 /* Private */,
       7,    0,  399,    2, 0x08 /* Private */,
       8,    0,  400,    2, 0x08 /* Private */,
       9,    0,  401,    2, 0x08 /* Private */,
      10,    0,  402,    2, 0x08 /* Private */,
      11,    0,  403,    2, 0x08 /* Private */,
      12,    0,  404,    2, 0x08 /* Private */,
      13,    0,  405,    2, 0x08 /* Private */,
      14,    0,  406,    2, 0x08 /* Private */,
      15,    0,  407,    2, 0x08 /* Private */,
      16,    0,  408,    2, 0x08 /* Private */,
      17,    0,  409,    2, 0x08 /* Private */,
      18,    0,  410,    2, 0x08 /* Private */,
      19,    0,  411,    2, 0x08 /* Private */,
      20,    0,  412,    2, 0x08 /* Private */,
      21,    0,  413,    2, 0x08 /* Private */,
      22,    0,  414,    2, 0x08 /* Private */,
      23,    0,  415,    2, 0x08 /* Private */,
      24,    0,  416,    2, 0x08 /* Private */,
      25,    0,  417,    2, 0x08 /* Private */,
      26,    0,  418,    2, 0x08 /* Private */,
      27,    0,  419,    2, 0x08 /* Private */,
      28,    0,  420,    2, 0x08 /* Private */,
      29,    0,  421,    2, 0x08 /* Private */,
      30,    0,  422,    2, 0x08 /* Private */,
      31,    0,  423,    2, 0x08 /* Private */,
      32,    0,  424,    2, 0x08 /* Private */,
      33,    0,  425,    2, 0x08 /* Private */,
      34,    0,  426,    2, 0x08 /* Private */,
      35,    0,  427,    2, 0x08 /* Private */,
      36,    0,  428,    2, 0x08 /* Private */,
      37,    0,  429,    2, 0x08 /* Private */,
      38,    0,  430,    2, 0x08 /* Private */,
      39,    0,  431,    2, 0x08 /* Private */,
      40,    0,  432,    2, 0x08 /* Private */,
      41,    0,  433,    2, 0x08 /* Private */,
      42,    0,  434,    2, 0x08 /* Private */,
      43,    0,  435,    2, 0x08 /* Private */,
      44,    0,  436,    2, 0x08 /* Private */,
      45,    0,  437,    2, 0x08 /* Private */,
      46,    0,  438,    2, 0x08 /* Private */,
      47,    0,  439,    2, 0x08 /* Private */,
      48,    0,  440,    2, 0x08 /* Private */,
      49,    0,  441,    2, 0x08 /* Private */,
      50,    0,  442,    2, 0x08 /* Private */,
      51,    0,  443,    2, 0x08 /* Private */,
      52,    0,  444,    2, 0x08 /* Private */,
      53,    0,  445,    2, 0x08 /* Private */,
      54,    0,  446,    2, 0x08 /* Private */,
      55,    0,  447,    2, 0x08 /* Private */,
      56,    0,  448,    2, 0x08 /* Private */,
      57,    0,  449,    2, 0x08 /* Private */,
      58,    0,  450,    2, 0x08 /* Private */,
      59,    0,  451,    2, 0x08 /* Private */,
      60,    0,  452,    2, 0x08 /* Private */,
      61,    0,  453,    2, 0x08 /* Private */,
      62,    0,  454,    2, 0x08 /* Private */,
      63,    0,  455,    2, 0x08 /* Private */,
      64,    0,  456,    2, 0x08 /* Private */,
      65,    0,  457,    2, 0x08 /* Private */,
      66,    0,  458,    2, 0x08 /* Private */,
      67,    0,  459,    2, 0x08 /* Private */,
      68,    0,  460,    2, 0x08 /* Private */,
      69,    0,  461,    2, 0x08 /* Private */,
      70,    0,  462,    2, 0x08 /* Private */,
      71,    0,  463,    2, 0x08 /* Private */,
      72,    0,  464,    2, 0x08 /* Private */,
      73,    0,  465,    2, 0x08 /* Private */,
      74,    0,  466,    2, 0x08 /* Private */,
      75,    0,  467,    2, 0x08 /* Private */,
      76,    0,  468,    2, 0x08 /* Private */,
      77,    0,  469,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QtJson::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QtJson *_t = static_cast<tst_QtJson *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->testValueSimple(); break;
        case 2: _t->testNumbers(); break;
        case 3: _t->testNumbers_2(); break;
        case 4: _t->testNumbers_3(); break;
        case 5: _t->testNumbers_4(); break;
        case 6: _t->testObjectSimple(); break;
        case 7: _t->testObjectSmallKeys(); break;
        case 8: _t->testArraySimple(); break;
        case 9: _t->testValueObject(); break;
        case 10: _t->testValueArray(); break;
        case 11: _t->testObjectNested(); break;
        case 12: _t->testArrayNested(); break;
        case 13: _t->testArrayNestedEmpty(); break;
        case 14: _t->testArrayComfortOperators(); break;
        case 15: _t->testObjectNestedEmpty(); break;
        case 16: _t->testValueRef(); break;
        case 17: _t->testObjectIteration(); break;
        case 18: _t->testArrayIteration(); break;
        case 19: _t->testObjectFind(); break;
        case 20: _t->testDocument(); break;
        case 21: _t->nullValues(); break;
        case 22: _t->nullArrays(); break;
        case 23: _t->nullObject(); break;
        case 24: _t->constNullObject(); break;
        case 25: _t->keySorting(); break;
        case 26: _t->undefinedValues(); break;
        case 27: _t->fromVariant(); break;
        case 28: _t->fromVariantMap(); break;
        case 29: _t->fromVariantHash(); break;
        case 30: _t->toVariantMap(); break;
        case 31: _t->toVariantHash(); break;
        case 32: _t->toVariantList(); break;
        case 33: _t->toJson(); break;
        case 34: _t->toJsonSillyNumericValues(); break;
        case 35: _t->toJsonLargeNumericValues(); break;
        case 36: _t->fromJson(); break;
        case 37: _t->fromJsonErrors(); break;
        case 38: _t->fromBinary(); break;
        case 39: _t->toAndFromBinary_data(); break;
        case 40: _t->toAndFromBinary(); break;
        case 41: _t->invalidBinaryData(); break;
        case 42: _t->parseNumbers(); break;
        case 43: _t->parseStrings(); break;
        case 44: _t->parseDuplicateKeys(); break;
        case 45: _t->testParser(); break;
        case 46: _t->compactArray(); break;
        case 47: _t->compactObject(); break;
        case 48: _t->validation(); break;
        case 49: _t->assignToDocument(); break;
        case 50: _t->testDuplicateKeys(); break;
        case 51: _t->testCompaction(); break;
        case 52: _t->testDebugStream(); break;
        case 53: _t->testCompactionError(); break;
        case 54: _t->parseUnicodeEscapes(); break;
        case 55: _t->assignObjects(); break;
        case 56: _t->assignArrays(); break;
        case 57: _t->testTrailingComma(); break;
        case 58: _t->testDetachBug(); break;
        case 59: _t->testJsonValueRefDefault(); break;
        case 60: _t->valueEquals(); break;
        case 61: _t->objectEquals_data(); break;
        case 62: _t->objectEquals(); break;
        case 63: _t->arrayEquals_data(); break;
        case 64: _t->arrayEquals(); break;
        case 65: _t->bom(); break;
        case 66: _t->nesting(); break;
        case 67: _t->longStrings(); break;
        case 68: _t->arrayInitializerList(); break;
        case 69: _t->objectInitializerList(); break;
        case 70: _t->unicodeKeys(); break;
        case 71: _t->garbageAtEnd(); break;
        case 72: _t->removeNonLatinKey(); break;
        case 73: _t->documentFromVariant(); break;
        case 74: _t->parseErrorOffset_data(); break;
        case 75: _t->parseErrorOffset(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QtJson::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QtJson.data,
      qt_meta_data_tst_QtJson,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QtJson::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QtJson::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QtJson.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QtJson::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 76)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 76;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 76)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 76;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
