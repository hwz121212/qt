/****************************************************************************
** Meta object code from reading C++ file 'tst_qqmldebugjs.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qqmldebugjs.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QQmlDebugJS_t {
    QByteArrayData data[58];
    char stringdata0[1308];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QQmlDebugJS_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QQmlDebugJS_t qt_meta_stringdata_tst_QQmlDebugJS = {
    {
QT_MOC_LITERAL(0, 0, 15), // "tst_QQmlDebugJS"
QT_MOC_LITERAL(1, 16, 12), // "initTestCase"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 46, 7), // "cleanup"
QT_MOC_LITERAL(5, 54, 12), // "connect_data"
QT_MOC_LITERAL(6, 67, 7), // "connect"
QT_MOC_LITERAL(7, 75, 14), // "interrupt_data"
QT_MOC_LITERAL(8, 90, 9), // "interrupt"
QT_MOC_LITERAL(9, 100, 15), // "getVersion_data"
QT_MOC_LITERAL(10, 116, 10), // "getVersion"
QT_MOC_LITERAL(11, 127, 28), // "getVersionWhenAttaching_data"
QT_MOC_LITERAL(12, 156, 23), // "getVersionWhenAttaching"
QT_MOC_LITERAL(13, 180, 15), // "disconnect_data"
QT_MOC_LITERAL(14, 196, 10), // "disconnect"
QT_MOC_LITERAL(15, 207, 37), // "setBreakpointInScriptOnComple..."
QT_MOC_LITERAL(16, 245, 32), // "setBreakpointInScriptOnCompleted"
QT_MOC_LITERAL(17, 278, 44), // "setBreakpointInScriptOnCompon..."
QT_MOC_LITERAL(18, 323, 39), // "setBreakpointInScriptOnCompon..."
QT_MOC_LITERAL(19, 363, 41), // "setBreakpointInScriptOnTimerC..."
QT_MOC_LITERAL(20, 405, 36), // "setBreakpointInScriptOnTimerC..."
QT_MOC_LITERAL(21, 442, 41), // "setBreakpointInScriptInDiffer..."
QT_MOC_LITERAL(22, 484, 36), // "setBreakpointInScriptInDiffer..."
QT_MOC_LITERAL(23, 521, 35), // "setBreakpointInScriptOnCommen..."
QT_MOC_LITERAL(24, 557, 30), // "setBreakpointInScriptOnComment"
QT_MOC_LITERAL(25, 588, 37), // "setBreakpointInScriptOnEmptyL..."
QT_MOC_LITERAL(26, 626, 32), // "setBreakpointInScriptOnEmptyLine"
QT_MOC_LITERAL(27, 659, 44), // "setBreakpointInScriptOnOptimi..."
QT_MOC_LITERAL(28, 704, 39), // "setBreakpointInScriptOnOptimi..."
QT_MOC_LITERAL(29, 744, 39), // "setBreakpointInScriptWithCond..."
QT_MOC_LITERAL(30, 784, 34), // "setBreakpointInScriptWithCond..."
QT_MOC_LITERAL(31, 819, 35), // "setBreakpointInScriptThatQuit..."
QT_MOC_LITERAL(32, 855, 30), // "setBreakpointInScriptThatQuits"
QT_MOC_LITERAL(33, 886, 26), // "setBreakpointWhenAttaching"
QT_MOC_LITERAL(34, 913, 20), // "clearBreakpoint_data"
QT_MOC_LITERAL(35, 934, 15), // "clearBreakpoint"
QT_MOC_LITERAL(36, 950, 22), // "setExceptionBreak_data"
QT_MOC_LITERAL(37, 973, 17), // "setExceptionBreak"
QT_MOC_LITERAL(38, 991, 13), // "stepNext_data"
QT_MOC_LITERAL(39, 1005, 8), // "stepNext"
QT_MOC_LITERAL(40, 1014, 11), // "stepIn_data"
QT_MOC_LITERAL(41, 1026, 6), // "stepIn"
QT_MOC_LITERAL(42, 1033, 12), // "stepOut_data"
QT_MOC_LITERAL(43, 1046, 7), // "stepOut"
QT_MOC_LITERAL(44, 1054, 22), // "continueDebugging_data"
QT_MOC_LITERAL(45, 1077, 17), // "continueDebugging"
QT_MOC_LITERAL(46, 1095, 14), // "backtrace_data"
QT_MOC_LITERAL(47, 1110, 9), // "backtrace"
QT_MOC_LITERAL(48, 1120, 20), // "getFrameDetails_data"
QT_MOC_LITERAL(49, 1141, 15), // "getFrameDetails"
QT_MOC_LITERAL(50, 1157, 20), // "getScopeDetails_data"
QT_MOC_LITERAL(51, 1178, 15), // "getScopeDetails"
QT_MOC_LITERAL(52, 1194, 21), // "evaluateInGlobalScope"
QT_MOC_LITERAL(53, 1216, 25), // "evaluateInLocalScope_data"
QT_MOC_LITERAL(54, 1242, 20), // "evaluateInLocalScope"
QT_MOC_LITERAL(55, 1263, 17), // "evaluateInContext"
QT_MOC_LITERAL(56, 1281, 15), // "getScripts_data"
QT_MOC_LITERAL(57, 1297, 10) // "getScripts"

    },
    "tst_QQmlDebugJS\0initTestCase\0\0"
    "cleanupTestCase\0cleanup\0connect_data\0"
    "connect\0interrupt_data\0interrupt\0"
    "getVersion_data\0getVersion\0"
    "getVersionWhenAttaching_data\0"
    "getVersionWhenAttaching\0disconnect_data\0"
    "disconnect\0setBreakpointInScriptOnCompleted_data\0"
    "setBreakpointInScriptOnCompleted\0"
    "setBreakpointInScriptOnComponentCreated_data\0"
    "setBreakpointInScriptOnComponentCreated\0"
    "setBreakpointInScriptOnTimerCallback_data\0"
    "setBreakpointInScriptOnTimerCallback\0"
    "setBreakpointInScriptInDifferentFile_data\0"
    "setBreakpointInScriptInDifferentFile\0"
    "setBreakpointInScriptOnComment_data\0"
    "setBreakpointInScriptOnComment\0"
    "setBreakpointInScriptOnEmptyLine_data\0"
    "setBreakpointInScriptOnEmptyLine\0"
    "setBreakpointInScriptOnOptimizedBinding_data\0"
    "setBreakpointInScriptOnOptimizedBinding\0"
    "setBreakpointInScriptWithCondition_data\0"
    "setBreakpointInScriptWithCondition\0"
    "setBreakpointInScriptThatQuits_data\0"
    "setBreakpointInScriptThatQuits\0"
    "setBreakpointWhenAttaching\0"
    "clearBreakpoint_data\0clearBreakpoint\0"
    "setExceptionBreak_data\0setExceptionBreak\0"
    "stepNext_data\0stepNext\0stepIn_data\0"
    "stepIn\0stepOut_data\0stepOut\0"
    "continueDebugging_data\0continueDebugging\0"
    "backtrace_data\0backtrace\0getFrameDetails_data\0"
    "getFrameDetails\0getScopeDetails_data\0"
    "getScopeDetails\0evaluateInGlobalScope\0"
    "evaluateInLocalScope_data\0"
    "evaluateInLocalScope\0evaluateInContext\0"
    "getScripts_data\0getScripts"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QQmlDebugJS[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      56,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  294,    2, 0x08 /* Private */,
       3,    0,  295,    2, 0x08 /* Private */,
       4,    0,  296,    2, 0x08 /* Private */,
       5,    0,  297,    2, 0x08 /* Private */,
       6,    0,  298,    2, 0x08 /* Private */,
       7,    0,  299,    2, 0x08 /* Private */,
       8,    0,  300,    2, 0x08 /* Private */,
       9,    0,  301,    2, 0x08 /* Private */,
      10,    0,  302,    2, 0x08 /* Private */,
      11,    0,  303,    2, 0x08 /* Private */,
      12,    0,  304,    2, 0x08 /* Private */,
      13,    0,  305,    2, 0x08 /* Private */,
      14,    0,  306,    2, 0x08 /* Private */,
      15,    0,  307,    2, 0x08 /* Private */,
      16,    0,  308,    2, 0x08 /* Private */,
      17,    0,  309,    2, 0x08 /* Private */,
      18,    0,  310,    2, 0x08 /* Private */,
      19,    0,  311,    2, 0x08 /* Private */,
      20,    0,  312,    2, 0x08 /* Private */,
      21,    0,  313,    2, 0x08 /* Private */,
      22,    0,  314,    2, 0x08 /* Private */,
      23,    0,  315,    2, 0x08 /* Private */,
      24,    0,  316,    2, 0x08 /* Private */,
      25,    0,  317,    2, 0x08 /* Private */,
      26,    0,  318,    2, 0x08 /* Private */,
      27,    0,  319,    2, 0x08 /* Private */,
      28,    0,  320,    2, 0x08 /* Private */,
      29,    0,  321,    2, 0x08 /* Private */,
      30,    0,  322,    2, 0x08 /* Private */,
      31,    0,  323,    2, 0x08 /* Private */,
      32,    0,  324,    2, 0x08 /* Private */,
      33,    0,  325,    2, 0x08 /* Private */,
      34,    0,  326,    2, 0x08 /* Private */,
      35,    0,  327,    2, 0x08 /* Private */,
      36,    0,  328,    2, 0x08 /* Private */,
      37,    0,  329,    2, 0x08 /* Private */,
      38,    0,  330,    2, 0x08 /* Private */,
      39,    0,  331,    2, 0x08 /* Private */,
      40,    0,  332,    2, 0x08 /* Private */,
      41,    0,  333,    2, 0x08 /* Private */,
      42,    0,  334,    2, 0x08 /* Private */,
      43,    0,  335,    2, 0x08 /* Private */,
      44,    0,  336,    2, 0x08 /* Private */,
      45,    0,  337,    2, 0x08 /* Private */,
      46,    0,  338,    2, 0x08 /* Private */,
      47,    0,  339,    2, 0x08 /* Private */,
      48,    0,  340,    2, 0x08 /* Private */,
      49,    0,  341,    2, 0x08 /* Private */,
      50,    0,  342,    2, 0x08 /* Private */,
      51,    0,  343,    2, 0x08 /* Private */,
      52,    0,  344,    2, 0x08 /* Private */,
      53,    0,  345,    2, 0x08 /* Private */,
      54,    0,  346,    2, 0x08 /* Private */,
      55,    0,  347,    2, 0x08 /* Private */,
      56,    0,  348,    2, 0x08 /* Private */,
      57,    0,  349,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QQmlDebugJS::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QQmlDebugJS *_t = static_cast<tst_QQmlDebugJS *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->cleanup(); break;
        case 3: _t->connect_data(); break;
        case 4: _t->connect(); break;
        case 5: _t->interrupt_data(); break;
        case 6: _t->interrupt(); break;
        case 7: _t->getVersion_data(); break;
        case 8: _t->getVersion(); break;
        case 9: _t->getVersionWhenAttaching_data(); break;
        case 10: _t->getVersionWhenAttaching(); break;
        case 11: _t->disconnect_data(); break;
        case 12: _t->disconnect(); break;
        case 13: _t->setBreakpointInScriptOnCompleted_data(); break;
        case 14: _t->setBreakpointInScriptOnCompleted(); break;
        case 15: _t->setBreakpointInScriptOnComponentCreated_data(); break;
        case 16: _t->setBreakpointInScriptOnComponentCreated(); break;
        case 17: _t->setBreakpointInScriptOnTimerCallback_data(); break;
        case 18: _t->setBreakpointInScriptOnTimerCallback(); break;
        case 19: _t->setBreakpointInScriptInDifferentFile_data(); break;
        case 20: _t->setBreakpointInScriptInDifferentFile(); break;
        case 21: _t->setBreakpointInScriptOnComment_data(); break;
        case 22: _t->setBreakpointInScriptOnComment(); break;
        case 23: _t->setBreakpointInScriptOnEmptyLine_data(); break;
        case 24: _t->setBreakpointInScriptOnEmptyLine(); break;
        case 25: _t->setBreakpointInScriptOnOptimizedBinding_data(); break;
        case 26: _t->setBreakpointInScriptOnOptimizedBinding(); break;
        case 27: _t->setBreakpointInScriptWithCondition_data(); break;
        case 28: _t->setBreakpointInScriptWithCondition(); break;
        case 29: _t->setBreakpointInScriptThatQuits_data(); break;
        case 30: _t->setBreakpointInScriptThatQuits(); break;
        case 31: _t->setBreakpointWhenAttaching(); break;
        case 32: _t->clearBreakpoint_data(); break;
        case 33: _t->clearBreakpoint(); break;
        case 34: _t->setExceptionBreak_data(); break;
        case 35: _t->setExceptionBreak(); break;
        case 36: _t->stepNext_data(); break;
        case 37: _t->stepNext(); break;
        case 38: _t->stepIn_data(); break;
        case 39: _t->stepIn(); break;
        case 40: _t->stepOut_data(); break;
        case 41: _t->stepOut(); break;
        case 42: _t->continueDebugging_data(); break;
        case 43: _t->continueDebugging(); break;
        case 44: _t->backtrace_data(); break;
        case 45: _t->backtrace(); break;
        case 46: _t->getFrameDetails_data(); break;
        case 47: _t->getFrameDetails(); break;
        case 48: _t->getScopeDetails_data(); break;
        case 49: _t->getScopeDetails(); break;
        case 50: _t->evaluateInGlobalScope(); break;
        case 51: _t->evaluateInLocalScope_data(); break;
        case 52: _t->evaluateInLocalScope(); break;
        case 53: _t->evaluateInContext(); break;
        case 54: _t->getScripts_data(); break;
        case 55: _t->getScripts(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QQmlDebugJS::staticMetaObject = {
    { &QQmlDataTest::staticMetaObject, qt_meta_stringdata_tst_QQmlDebugJS.data,
      qt_meta_data_tst_QQmlDebugJS,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QQmlDebugJS::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QQmlDebugJS::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QQmlDebugJS.stringdata0))
        return static_cast<void*>(this);
    return QQmlDataTest::qt_metacast(_clname);
}

int tst_QQmlDebugJS::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QQmlDataTest::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 56)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 56;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 56)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 56;
    }
    return _id;
}
struct qt_meta_stringdata_QJSDebugClient_t {
    QByteArrayData data[8];
    char stringdata0[76];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_QJSDebugClient_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_QJSDebugClient_t qt_meta_stringdata_QJSDebugClient = {
    {
QT_MOC_LITERAL(0, 0, 14), // "QJSDebugClient"
QT_MOC_LITERAL(1, 15, 7), // "enabled"
QT_MOC_LITERAL(2, 23, 0), // ""
QT_MOC_LITERAL(3, 24, 9), // "connected"
QT_MOC_LITERAL(4, 34, 18), // "interruptRequested"
QT_MOC_LITERAL(5, 53, 6), // "result"
QT_MOC_LITERAL(6, 60, 7), // "failure"
QT_MOC_LITERAL(7, 68, 7) // "stopped"

    },
    "QJSDebugClient\0enabled\0\0connected\0"
    "interruptRequested\0result\0failure\0"
    "stopped"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_QJSDebugClient[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       6,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       6,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   44,    2, 0x06 /* Public */,
       3,    0,   45,    2, 0x06 /* Public */,
       4,    0,   46,    2, 0x06 /* Public */,
       5,    0,   47,    2, 0x06 /* Public */,
       6,    0,   48,    2, 0x06 /* Public */,
       7,    0,   49,    2, 0x06 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void QJSDebugClient::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        QJSDebugClient *_t = static_cast<QJSDebugClient *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->enabled(); break;
        case 1: _t->connected(); break;
        case 2: _t->interruptRequested(); break;
        case 3: _t->result(); break;
        case 4: _t->failure(); break;
        case 5: _t->stopped(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (QJSDebugClient::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&QJSDebugClient::enabled)) {
                *result = 0;
                return;
            }
        }
        {
            typedef void (QJSDebugClient::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&QJSDebugClient::connected)) {
                *result = 1;
                return;
            }
        }
        {
            typedef void (QJSDebugClient::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&QJSDebugClient::interruptRequested)) {
                *result = 2;
                return;
            }
        }
        {
            typedef void (QJSDebugClient::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&QJSDebugClient::result)) {
                *result = 3;
                return;
            }
        }
        {
            typedef void (QJSDebugClient::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&QJSDebugClient::failure)) {
                *result = 4;
                return;
            }
        }
        {
            typedef void (QJSDebugClient::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&QJSDebugClient::stopped)) {
                *result = 5;
                return;
            }
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject QJSDebugClient::staticMetaObject = {
    { &QQmlDebugClient::staticMetaObject, qt_meta_stringdata_QJSDebugClient.data,
      qt_meta_data_QJSDebugClient,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *QJSDebugClient::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *QJSDebugClient::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_QJSDebugClient.stringdata0))
        return static_cast<void*>(this);
    return QQmlDebugClient::qt_metacast(_clname);
}

int QJSDebugClient::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QQmlDebugClient::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 6)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 6;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 6)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 6;
    }
    return _id;
}

// SIGNAL 0
void QJSDebugClient::enabled()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void QJSDebugClient::connected()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void QJSDebugClient::interruptRequested()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void QJSDebugClient::result()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void QJSDebugClient::failure()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void QJSDebugClient::stopped()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
