/****************************************************************************
** Meta object code from reading C++ file 'tst_qqmllistreference.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qqmllistreference.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_qqmllistreference_t {
    QByteArrayData data[23];
    char stringdata0[250];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_qqmllistreference_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_qqmllistreference_t qt_meta_stringdata_tst_qqmllistreference = {
    {
QT_MOC_LITERAL(0, 0, 21), // "tst_qqmllistreference"
QT_MOC_LITERAL(1, 22, 12), // "initTestCase"
QT_MOC_LITERAL(2, 35, 0), // ""
QT_MOC_LITERAL(3, 36, 16), // "qmllistreference"
QT_MOC_LITERAL(4, 53, 24), // "qmllistreference_invalid"
QT_MOC_LITERAL(5, 78, 7), // "isValid"
QT_MOC_LITERAL(6, 86, 6), // "object"
QT_MOC_LITERAL(7, 93, 15), // "listElementType"
QT_MOC_LITERAL(8, 109, 9), // "canAppend"
QT_MOC_LITERAL(9, 119, 5), // "canAt"
QT_MOC_LITERAL(10, 125, 8), // "canClear"
QT_MOC_LITERAL(11, 134, 8), // "canCount"
QT_MOC_LITERAL(12, 143, 10), // "isReadable"
QT_MOC_LITERAL(13, 154, 13), // "isManipulable"
QT_MOC_LITERAL(14, 168, 6), // "append"
QT_MOC_LITERAL(15, 175, 2), // "at"
QT_MOC_LITERAL(16, 178, 5), // "clear"
QT_MOC_LITERAL(17, 184, 5), // "count"
QT_MOC_LITERAL(18, 190, 4), // "copy"
QT_MOC_LITERAL(19, 195, 15), // "qmlmetaproperty"
QT_MOC_LITERAL(20, 211, 11), // "engineTypes"
QT_MOC_LITERAL(21, 223, 13), // "variantToList"
QT_MOC_LITERAL(22, 237, 12) // "listProperty"

    },
    "tst_qqmllistreference\0initTestCase\0\0"
    "qmllistreference\0qmllistreference_invalid\0"
    "isValid\0object\0listElementType\0canAppend\0"
    "canAt\0canClear\0canCount\0isReadable\0"
    "isManipulable\0append\0at\0clear\0count\0"
    "copy\0qmlmetaproperty\0engineTypes\0"
    "variantToList\0listProperty"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_qqmllistreference[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      21,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  119,    2, 0x08 /* Private */,
       3,    0,  120,    2, 0x08 /* Private */,
       4,    0,  121,    2, 0x08 /* Private */,
       5,    0,  122,    2, 0x08 /* Private */,
       6,    0,  123,    2, 0x08 /* Private */,
       7,    0,  124,    2, 0x08 /* Private */,
       8,    0,  125,    2, 0x08 /* Private */,
       9,    0,  126,    2, 0x08 /* Private */,
      10,    0,  127,    2, 0x08 /* Private */,
      11,    0,  128,    2, 0x08 /* Private */,
      12,    0,  129,    2, 0x08 /* Private */,
      13,    0,  130,    2, 0x08 /* Private */,
      14,    0,  131,    2, 0x08 /* Private */,
      15,    0,  132,    2, 0x08 /* Private */,
      16,    0,  133,    2, 0x08 /* Private */,
      17,    0,  134,    2, 0x08 /* Private */,
      18,    0,  135,    2, 0x08 /* Private */,
      19,    0,  136,    2, 0x08 /* Private */,
      20,    0,  137,    2, 0x08 /* Private */,
      21,    0,  138,    2, 0x08 /* Private */,
      22,    0,  139,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_qqmllistreference::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_qqmllistreference *_t = static_cast<tst_qqmllistreference *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->qmllistreference(); break;
        case 2: _t->qmllistreference_invalid(); break;
        case 3: _t->isValid(); break;
        case 4: _t->object(); break;
        case 5: _t->listElementType(); break;
        case 6: _t->canAppend(); break;
        case 7: _t->canAt(); break;
        case 8: _t->canClear(); break;
        case 9: _t->canCount(); break;
        case 10: _t->isReadable(); break;
        case 11: _t->isManipulable(); break;
        case 12: _t->append(); break;
        case 13: _t->at(); break;
        case 14: _t->clear(); break;
        case 15: _t->count(); break;
        case 16: _t->copy(); break;
        case 17: _t->qmlmetaproperty(); break;
        case 18: _t->engineTypes(); break;
        case 19: _t->variantToList(); break;
        case 20: _t->listProperty(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_qqmllistreference::staticMetaObject = {
    { &QQmlDataTest::staticMetaObject, qt_meta_stringdata_tst_qqmllistreference.data,
      qt_meta_data_tst_qqmllistreference,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_qqmllistreference::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_qqmllistreference::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_qqmllistreference.stringdata0))
        return static_cast<void*>(this);
    return QQmlDataTest::qt_metacast(_clname);
}

int tst_qqmllistreference::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QQmlDataTest::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 21)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 21;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 21)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 21;
    }
    return _id;
}
struct qt_meta_stringdata_TestType_t {
    QByteArrayData data[4];
    char stringdata0[53];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestType_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestType_t qt_meta_stringdata_TestType = {
    {
QT_MOC_LITERAL(0, 0, 8), // "TestType"
QT_MOC_LITERAL(1, 9, 4), // "data"
QT_MOC_LITERAL(2, 14, 26), // "QQmlListProperty<TestType>"
QT_MOC_LITERAL(3, 41, 11) // "intProperty"

    },
    "TestType\0data\0QQmlListProperty<TestType>\0"
    "intProperty"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestType[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       2,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, 0x80000000 | 2, 0x00095009,
       3, QMetaType::Int, 0x00095001,

       0        // eod
};

void TestType::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        TestType *_t = static_cast<TestType *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QQmlListProperty<TestType>*>(_v) = _t->dataProperty(); break;
        case 1: *reinterpret_cast< int*>(_v) = _t->intProperty(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject TestType::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestType.data,
      qt_meta_data_TestType,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestType::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestType::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestType.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestType::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
   if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 2;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
