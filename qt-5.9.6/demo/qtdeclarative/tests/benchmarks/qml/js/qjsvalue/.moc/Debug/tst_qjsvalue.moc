/****************************************************************************
** Meta object code from reading C++ file 'tst_qjsvalue.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qjsvalue.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QJSValue_t {
    QByteArrayData data[78];
    char stringdata0[1040];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QJSValue_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QJSValue_t qt_meta_stringdata_tst_QJSValue = {
    {
QT_MOC_LITERAL(0, 0, 12), // "tst_QJSValue"
QT_MOC_LITERAL(1, 13, 4), // "init"
QT_MOC_LITERAL(2, 18, 0), // ""
QT_MOC_LITERAL(3, 19, 7), // "cleanup"
QT_MOC_LITERAL(4, 27, 15), // "boolConstructor"
QT_MOC_LITERAL(5, 43, 16), // "floatConstructor"
QT_MOC_LITERAL(6, 60, 17), // "numberConstructor"
QT_MOC_LITERAL(7, 78, 17), // "stringConstructor"
QT_MOC_LITERAL(8, 96, 15), // "nullConstructor"
QT_MOC_LITERAL(9, 112, 20), // "undefinedConstructor"
QT_MOC_LITERAL(10, 133, 25), // "boolConstructorWithEngine"
QT_MOC_LITERAL(11, 159, 26), // "floatConstructorWithEngine"
QT_MOC_LITERAL(12, 186, 24), // "intConstructorWithEngine"
QT_MOC_LITERAL(13, 211, 27), // "stringConstructorWithEngine"
QT_MOC_LITERAL(14, 239, 30), // "undefinedConstructorWithEngine"
QT_MOC_LITERAL(15, 270, 20), // "copyConstructor_data"
QT_MOC_LITERAL(16, 291, 15), // "copyConstructor"
QT_MOC_LITERAL(17, 307, 9), // "call_data"
QT_MOC_LITERAL(18, 317, 4), // "call"
QT_MOC_LITERAL(19, 322, 14), // "construct_data"
QT_MOC_LITERAL(20, 337, 9), // "construct"
QT_MOC_LITERAL(21, 347, 15), // "equalsSelf_data"
QT_MOC_LITERAL(22, 363, 10), // "equalsSelf"
QT_MOC_LITERAL(23, 374, 23), // "strictlyEqualsSelf_data"
QT_MOC_LITERAL(24, 398, 18), // "strictlyEqualsSelf"
QT_MOC_LITERAL(25, 417, 12), // "isArray_data"
QT_MOC_LITERAL(26, 430, 7), // "isArray"
QT_MOC_LITERAL(27, 438, 11), // "isBool_data"
QT_MOC_LITERAL(28, 450, 6), // "isBool"
QT_MOC_LITERAL(29, 457, 11), // "isDate_data"
QT_MOC_LITERAL(30, 469, 6), // "isDate"
QT_MOC_LITERAL(31, 476, 12), // "isError_data"
QT_MOC_LITERAL(32, 489, 7), // "isError"
QT_MOC_LITERAL(33, 497, 15), // "isCallable_data"
QT_MOC_LITERAL(34, 513, 10), // "isCallable"
QT_MOC_LITERAL(35, 524, 11), // "isNull_data"
QT_MOC_LITERAL(36, 536, 6), // "isNull"
QT_MOC_LITERAL(37, 543, 13), // "isNumber_data"
QT_MOC_LITERAL(38, 557, 8), // "isNumber"
QT_MOC_LITERAL(39, 566, 13), // "isObject_data"
QT_MOC_LITERAL(40, 580, 8), // "isObject"
QT_MOC_LITERAL(41, 589, 14), // "isQObject_data"
QT_MOC_LITERAL(42, 604, 9), // "isQObject"
QT_MOC_LITERAL(43, 614, 13), // "isRegExp_data"
QT_MOC_LITERAL(44, 628, 8), // "isRegExp"
QT_MOC_LITERAL(45, 637, 13), // "isString_data"
QT_MOC_LITERAL(46, 651, 8), // "isString"
QT_MOC_LITERAL(47, 660, 16), // "isUndefined_data"
QT_MOC_LITERAL(48, 677, 11), // "isUndefined"
QT_MOC_LITERAL(49, 689, 14), // "isVariant_data"
QT_MOC_LITERAL(50, 704, 9), // "isVariant"
QT_MOC_LITERAL(51, 714, 11), // "toBool_data"
QT_MOC_LITERAL(52, 726, 6), // "toBool"
QT_MOC_LITERAL(53, 733, 15), // "toDateTime_data"
QT_MOC_LITERAL(54, 749, 10), // "toDateTime"
QT_MOC_LITERAL(55, 760, 10), // "toInt_data"
QT_MOC_LITERAL(56, 771, 5), // "toInt"
QT_MOC_LITERAL(57, 777, 13), // "toNumber_data"
QT_MOC_LITERAL(58, 791, 8), // "toNumber"
QT_MOC_LITERAL(59, 800, 13), // "toRegExp_data"
QT_MOC_LITERAL(60, 814, 8), // "toRegExp"
QT_MOC_LITERAL(61, 823, 13), // "toString_data"
QT_MOC_LITERAL(62, 837, 8), // "toString"
QT_MOC_LITERAL(63, 846, 11), // "toUInt_data"
QT_MOC_LITERAL(64, 858, 6), // "toUInt"
QT_MOC_LITERAL(65, 865, 14), // "toQObject_data"
QT_MOC_LITERAL(66, 880, 9), // "toQObject"
QT_MOC_LITERAL(67, 890, 14), // "toVariant_data"
QT_MOC_LITERAL(68, 905, 9), // "toVariant"
QT_MOC_LITERAL(69, 915, 13), // "property_data"
QT_MOC_LITERAL(70, 929, 8), // "property"
QT_MOC_LITERAL(71, 938, 15), // "propertyByIndex"
QT_MOC_LITERAL(72, 954, 16), // "setProperty_data"
QT_MOC_LITERAL(73, 971, 11), // "setProperty"
QT_MOC_LITERAL(74, 983, 18), // "setPropertyByIndex"
QT_MOC_LITERAL(75, 1002, 14), // "prototype_data"
QT_MOC_LITERAL(76, 1017, 9), // "prototype"
QT_MOC_LITERAL(77, 1027, 12) // "setPrototype"

    },
    "tst_QJSValue\0init\0\0cleanup\0boolConstructor\0"
    "floatConstructor\0numberConstructor\0"
    "stringConstructor\0nullConstructor\0"
    "undefinedConstructor\0boolConstructorWithEngine\0"
    "floatConstructorWithEngine\0"
    "intConstructorWithEngine\0"
    "stringConstructorWithEngine\0"
    "undefinedConstructorWithEngine\0"
    "copyConstructor_data\0copyConstructor\0"
    "call_data\0call\0construct_data\0construct\0"
    "equalsSelf_data\0equalsSelf\0"
    "strictlyEqualsSelf_data\0strictlyEqualsSelf\0"
    "isArray_data\0isArray\0isBool_data\0"
    "isBool\0isDate_data\0isDate\0isError_data\0"
    "isError\0isCallable_data\0isCallable\0"
    "isNull_data\0isNull\0isNumber_data\0"
    "isNumber\0isObject_data\0isObject\0"
    "isQObject_data\0isQObject\0isRegExp_data\0"
    "isRegExp\0isString_data\0isString\0"
    "isUndefined_data\0isUndefined\0"
    "isVariant_data\0isVariant\0toBool_data\0"
    "toBool\0toDateTime_data\0toDateTime\0"
    "toInt_data\0toInt\0toNumber_data\0toNumber\0"
    "toRegExp_data\0toRegExp\0toString_data\0"
    "toString\0toUInt_data\0toUInt\0toQObject_data\0"
    "toQObject\0toVariant_data\0toVariant\0"
    "property_data\0property\0propertyByIndex\0"
    "setProperty_data\0setProperty\0"
    "setPropertyByIndex\0prototype_data\0"
    "prototype\0setPrototype"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QJSValue[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      76,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  394,    2, 0x0a /* Public */,
       3,    0,  395,    2, 0x0a /* Public */,
       4,    0,  396,    2, 0x08 /* Private */,
       5,    0,  397,    2, 0x08 /* Private */,
       6,    0,  398,    2, 0x08 /* Private */,
       7,    0,  399,    2, 0x08 /* Private */,
       8,    0,  400,    2, 0x08 /* Private */,
       9,    0,  401,    2, 0x08 /* Private */,
      10,    0,  402,    2, 0x08 /* Private */,
      11,    0,  403,    2, 0x08 /* Private */,
      12,    0,  404,    2, 0x08 /* Private */,
      13,    0,  405,    2, 0x08 /* Private */,
      14,    0,  406,    2, 0x08 /* Private */,
      15,    0,  407,    2, 0x08 /* Private */,
      16,    0,  408,    2, 0x08 /* Private */,
      17,    0,  409,    2, 0x08 /* Private */,
      18,    0,  410,    2, 0x08 /* Private */,
      19,    0,  411,    2, 0x08 /* Private */,
      20,    0,  412,    2, 0x08 /* Private */,
      21,    0,  413,    2, 0x08 /* Private */,
      22,    0,  414,    2, 0x08 /* Private */,
      23,    0,  415,    2, 0x08 /* Private */,
      24,    0,  416,    2, 0x08 /* Private */,
      25,    0,  417,    2, 0x08 /* Private */,
      26,    0,  418,    2, 0x08 /* Private */,
      27,    0,  419,    2, 0x08 /* Private */,
      28,    0,  420,    2, 0x08 /* Private */,
      29,    0,  421,    2, 0x08 /* Private */,
      30,    0,  422,    2, 0x08 /* Private */,
      31,    0,  423,    2, 0x08 /* Private */,
      32,    0,  424,    2, 0x08 /* Private */,
      33,    0,  425,    2, 0x08 /* Private */,
      34,    0,  426,    2, 0x08 /* Private */,
      35,    0,  427,    2, 0x08 /* Private */,
      36,    0,  428,    2, 0x08 /* Private */,
      37,    0,  429,    2, 0x08 /* Private */,
      38,    0,  430,    2, 0x08 /* Private */,
      39,    0,  431,    2, 0x08 /* Private */,
      40,    0,  432,    2, 0x08 /* Private */,
      41,    0,  433,    2, 0x08 /* Private */,
      42,    0,  434,    2, 0x08 /* Private */,
      43,    0,  435,    2, 0x08 /* Private */,
      44,    0,  436,    2, 0x08 /* Private */,
      45,    0,  437,    2, 0x08 /* Private */,
      46,    0,  438,    2, 0x08 /* Private */,
      47,    0,  439,    2, 0x08 /* Private */,
      48,    0,  440,    2, 0x08 /* Private */,
      49,    0,  441,    2, 0x08 /* Private */,
      50,    0,  442,    2, 0x08 /* Private */,
      51,    0,  443,    2, 0x08 /* Private */,
      52,    0,  444,    2, 0x08 /* Private */,
      53,    0,  445,    2, 0x08 /* Private */,
      54,    0,  446,    2, 0x08 /* Private */,
      55,    0,  447,    2, 0x08 /* Private */,
      56,    0,  448,    2, 0x08 /* Private */,
      57,    0,  449,    2, 0x08 /* Private */,
      58,    0,  450,    2, 0x08 /* Private */,
      59,    0,  451,    2, 0x08 /* Private */,
      60,    0,  452,    2, 0x08 /* Private */,
      61,    0,  453,    2, 0x08 /* Private */,
      62,    0,  454,    2, 0x08 /* Private */,
      63,    0,  455,    2, 0x08 /* Private */,
      64,    0,  456,    2, 0x08 /* Private */,
      65,    0,  457,    2, 0x08 /* Private */,
      66,    0,  458,    2, 0x08 /* Private */,
      67,    0,  459,    2, 0x08 /* Private */,
      68,    0,  460,    2, 0x08 /* Private */,
      69,    0,  461,    2, 0x08 /* Private */,
      70,    0,  462,    2, 0x08 /* Private */,
      71,    0,  463,    2, 0x08 /* Private */,
      72,    0,  464,    2, 0x08 /* Private */,
      73,    0,  465,    2, 0x08 /* Private */,
      74,    0,  466,    2, 0x08 /* Private */,
      75,    0,  467,    2, 0x08 /* Private */,
      76,    0,  468,    2, 0x08 /* Private */,
      77,    0,  469,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QJSValue::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QJSValue *_t = static_cast<tst_QJSValue *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->boolConstructor(); break;
        case 3: _t->floatConstructor(); break;
        case 4: _t->numberConstructor(); break;
        case 5: _t->stringConstructor(); break;
        case 6: _t->nullConstructor(); break;
        case 7: _t->undefinedConstructor(); break;
        case 8: _t->boolConstructorWithEngine(); break;
        case 9: _t->floatConstructorWithEngine(); break;
        case 10: _t->intConstructorWithEngine(); break;
        case 11: _t->stringConstructorWithEngine(); break;
        case 12: _t->undefinedConstructorWithEngine(); break;
        case 13: _t->copyConstructor_data(); break;
        case 14: _t->copyConstructor(); break;
        case 15: _t->call_data(); break;
        case 16: _t->call(); break;
        case 17: _t->construct_data(); break;
        case 18: _t->construct(); break;
        case 19: _t->equalsSelf_data(); break;
        case 20: _t->equalsSelf(); break;
        case 21: _t->strictlyEqualsSelf_data(); break;
        case 22: _t->strictlyEqualsSelf(); break;
        case 23: _t->isArray_data(); break;
        case 24: _t->isArray(); break;
        case 25: _t->isBool_data(); break;
        case 26: _t->isBool(); break;
        case 27: _t->isDate_data(); break;
        case 28: _t->isDate(); break;
        case 29: _t->isError_data(); break;
        case 30: _t->isError(); break;
        case 31: _t->isCallable_data(); break;
        case 32: _t->isCallable(); break;
        case 33: _t->isNull_data(); break;
        case 34: _t->isNull(); break;
        case 35: _t->isNumber_data(); break;
        case 36: _t->isNumber(); break;
        case 37: _t->isObject_data(); break;
        case 38: _t->isObject(); break;
        case 39: _t->isQObject_data(); break;
        case 40: _t->isQObject(); break;
        case 41: _t->isRegExp_data(); break;
        case 42: _t->isRegExp(); break;
        case 43: _t->isString_data(); break;
        case 44: _t->isString(); break;
        case 45: _t->isUndefined_data(); break;
        case 46: _t->isUndefined(); break;
        case 47: _t->isVariant_data(); break;
        case 48: _t->isVariant(); break;
        case 49: _t->toBool_data(); break;
        case 50: _t->toBool(); break;
        case 51: _t->toDateTime_data(); break;
        case 52: _t->toDateTime(); break;
        case 53: _t->toInt_data(); break;
        case 54: _t->toInt(); break;
        case 55: _t->toNumber_data(); break;
        case 56: _t->toNumber(); break;
        case 57: _t->toRegExp_data(); break;
        case 58: _t->toRegExp(); break;
        case 59: _t->toString_data(); break;
        case 60: _t->toString(); break;
        case 61: _t->toUInt_data(); break;
        case 62: _t->toUInt(); break;
        case 63: _t->toQObject_data(); break;
        case 64: _t->toQObject(); break;
        case 65: _t->toVariant_data(); break;
        case 66: _t->toVariant(); break;
        case 67: _t->property_data(); break;
        case 68: _t->property(); break;
        case 69: _t->propertyByIndex(); break;
        case 70: _t->setProperty_data(); break;
        case 71: _t->setProperty(); break;
        case 72: _t->setPropertyByIndex(); break;
        case 73: _t->prototype_data(); break;
        case 74: _t->prototype(); break;
        case 75: _t->setPrototype(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QJSValue::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QJSValue.data,
      qt_meta_data_tst_QJSValue,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QJSValue::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QJSValue::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QJSValue.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QJSValue::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 76)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 76;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 76)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 76;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
