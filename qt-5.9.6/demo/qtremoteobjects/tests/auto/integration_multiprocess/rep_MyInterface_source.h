#ifndef REP_MYINTERFACE_SOURCE_H
#define REP_MYINTERFACE_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>

#include <QtCore>

class MyInterfaceSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyInterface")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "8e78021bdc1e6adb4b9463fd528409079def070a")
    Q_PROPERTY(Enum1 enum1 READ enum1 WRITE setEnum1 NOTIFY enum1Changed)
    Q_PROPERTY(bool started READ started WRITE setStarted NOTIFY startedChanged)

public:
    enum Enum1 {
        First = 0,
        Second = 1,
        Third = 2,
    };
#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
    Q_ENUM(Enum1)
#else
    Q_ENUMS(Enum1)
#endif

public:
    explicit MyInterfaceSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<Enum1>();
        qRegisterMetaTypeStreamOperators<Enum1>();

    }

public:
    virtual ~MyInterfaceSource() {}

    static inline Enum1 toEnum1(quint8 i, bool *ok = 0)
    {
        if (ok)
            *ok = true;
        switch (i) {
        case 0: return First;
        case 1: return Second;
        case 2: return Third;
        default:
            if (ok)
                *ok = false;
            return First;
        }
    }
    virtual Enum1 enum1() const = 0;
    virtual bool started() const = 0;
    virtual void setEnum1(Enum1 enum1) = 0;
    virtual void setStarted(bool started) = 0;

Q_SIGNALS:
    void enum1Changed(MyInterfaceSource::Enum1);
    void startedChanged(bool);
    void advance();

public Q_SLOTS:
    virtual void pushEnum1(Enum1 enum1)
    {
        setEnum1(enum1);
    }
    virtual void pushStarted(bool started)
    {
        setStarted(started);
    }
    virtual bool start() = 0;
    virtual bool stop() = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
    Q_DECLARE_METATYPE(MyInterfaceSource::Enum1)
#endif

inline QDataStream &operator<<(QDataStream &ds, const MyInterfaceSource::Enum1 &obj)
{
    quint8 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, MyInterfaceSource::Enum1 &obj) {
    bool ok;
    quint8 val;
    ds >> val;
    obj = MyInterfaceSource::toEnum1(val, &ok);
    if (!ok)
        qWarning() << "QtRO received an invalid enum value for typeEnum1, value =" << val;
    return ds;
}


class MyInterfaceSimpleSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyInterface")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "8e78021bdc1e6adb4b9463fd528409079def070a")
    Q_PROPERTY(Enum1 enum1 READ enum1 WRITE setEnum1 NOTIFY enum1Changed)
    Q_PROPERTY(bool started READ started WRITE setStarted NOTIFY startedChanged)

public:
    enum Enum1 {
        First = 0,
        Second = 1,
        Third = 2,
    };
#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
    Q_ENUM(Enum1)
#else
    Q_ENUMS(Enum1)
#endif

public:
    explicit MyInterfaceSimpleSource(QObject *parent = nullptr) : QObject(parent)
        , _enum1(First)
        , _started(false)
    {
        qRegisterMetaType<Enum1>();
        qRegisterMetaTypeStreamOperators<Enum1>();

    }

public:
    virtual ~MyInterfaceSimpleSource() {}

    static inline Enum1 toEnum1(quint8 i, bool *ok = 0)
    {
        if (ok)
            *ok = true;
        switch (i) {
        case 0: return First;
        case 1: return Second;
        case 2: return Third;
        default:
            if (ok)
                *ok = false;
            return First;
        }
    }
    virtual Enum1 enum1() const { return _enum1; }
    virtual bool started() const { return _started; }
    virtual void setEnum1(Enum1 enum1)
    {
        if (enum1 != _enum1) { 
            _enum1 = enum1;
            Q_EMIT enum1Changed(_enum1);
        }
    }
    virtual void setStarted(bool started)
    {
        if (started != _started) { 
            _started = started;
            Q_EMIT startedChanged(_started);
        }
    }

Q_SIGNALS:
    void enum1Changed(MyInterfaceSimpleSource::Enum1);
    void startedChanged(bool);
    void advance();

public Q_SLOTS:
    virtual void pushEnum1(Enum1 enum1)
    {
        setEnum1(enum1);
    }
    virtual void pushStarted(bool started)
    {
        setStarted(started);
    }
    virtual bool start() = 0;
    virtual bool stop() = 0;

private:
    Enum1 _enum1;
    bool _started;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
    Q_DECLARE_METATYPE(MyInterfaceSimpleSource::Enum1)
#endif

inline QDataStream &operator<<(QDataStream &ds, const MyInterfaceSimpleSource::Enum1 &obj)
{
    quint8 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, MyInterfaceSimpleSource::Enum1 &obj) {
    bool ok;
    quint8 val;
    ds >> val;
    obj = MyInterfaceSimpleSource::toEnum1(val, &ok);
    if (!ok)
        qWarning() << "QtRO received an invalid enum value for typeEnum1, value =" << val;
    return ds;
}


template <class ObjectType>
struct MyInterfaceSourceAPI : public SourceApiMap
{
    // You need to add this enum as well as Q_ENUM to your
    // QObject class in order to use .rep enums over QtRO for
    // non-repc generated QObjects.
    enum Enum1 {
        First = 0,
        Second = 1,
        Third = 2,
    };
    MyInterfaceSourceAPI(ObjectType *object)
        : SourceApiMap()
    {
        Q_UNUSED(object);
        _properties[0] = 2;
        _properties[1] = qtro_prop_index<ObjectType>(&ObjectType::enum1, static_cast<typename ObjectType::Enum1 (QObject::*)()>(0),"enum1");
        qtro_method_test<ObjectType>(&ObjectType::enum1Changed, static_cast<void (QObject::*)()>(0));
        _properties[2] = qtro_prop_index<ObjectType>(&ObjectType::started, static_cast<bool (QObject::*)()>(0),"started");
        qtro_method_test<ObjectType>(&ObjectType::startedChanged, static_cast<void (QObject::*)()>(0));
        _signals[0] = 3;
        _signals[1] = qtro_signal_index<ObjectType>(&ObjectType::enum1Changed, static_cast<void (QObject::*)()>(0),signalArgCount+0,&signalArgTypes[0]);
        _signals[2] = qtro_signal_index<ObjectType>(&ObjectType::startedChanged, static_cast<void (QObject::*)()>(0),signalArgCount+1,&signalArgTypes[1]);
        _signals[3] = qtro_signal_index<ObjectType>(&ObjectType::advance, static_cast<void (QObject::*)()>(0),signalArgCount+0,&signalArgTypes[0]);
        _methods[0] = 4;
        _methods[1] = qtro_method_index<ObjectType>(&ObjectType::pushEnum1, static_cast<void (QObject::*)(typename ObjectType::Enum1)>(0),"pushEnum1(typename ObjectType::Enum1)",methodArgCount+0,&methodArgTypes[0]);
        _methods[2] = qtro_method_index<ObjectType>(&ObjectType::pushStarted, static_cast<void (QObject::*)(bool)>(0),"pushStarted(bool)",methodArgCount+1,&methodArgTypes[1]);
        _methods[3] = qtro_method_index<ObjectType>(&ObjectType::start, static_cast<void (QObject::*)()>(0),"start()",methodArgCount+2,&methodArgTypes[2]);
        _methods[4] = qtro_method_index<ObjectType>(&ObjectType::stop, static_cast<void (QObject::*)()>(0),"stop()",methodArgCount+3,&methodArgTypes[3]);
        _modelCount = 0;
    }

    QString name() const override { return QStringLiteral("MyInterface"); }
    QString typeName() const override { return QStringLiteral("MyInterface"); }
    int propertyCount() const override { return _properties[0]; }
    int signalCount() const override { return _signals[0]; }
    int methodCount() const override { return _methods[0]; }
    int modelCount() const override { return _modelCount; }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= _properties[0])
            return -1;
        return _properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return _signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return _methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= _signals[0] || paramIndex < 0 || paramIndex >= signalArgCount[sigIndex])
            return -1;
        return signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= _methods[0] || paramIndex < 0 || paramIndex >= methodArgCount[methodIndex])
            return -1;
        return methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return _properties[1];
        case 1: return _properties[2];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 1;
        case 1: return 2;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("enum1Changed()");
        case 1: return QByteArrayLiteral("startedChanged()");
        case 2: return QByteArrayLiteral("advance()");
        }
        return QByteArrayLiteral("");
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushEnum1(Enum1)");
        case 1: return QByteArrayLiteral("pushStarted(bool)");
        case 2: return QByteArrayLiteral("start()");
        case 3: return QByteArrayLiteral("stop()");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("bool");
        case 3: return QByteArrayLiteral("bool");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"8e78021bdc1e6adb4b9463fd528409079def070a"}; }

    int _properties[3];
    int _signals[4];
    int _methods[5];
    int signalArgCount[3];
    const int* signalArgTypes[3];
    int methodArgCount[4];
    const int* methodArgTypes[4];
    int _modelCount;
};
QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_MYINTERFACE_SOURCE_H
