/****************************************************************************
** Meta object code from reading C++ file 'tst_modelview.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_modelview.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_FetchData_t {
    QByteArrayData data[3];
    char stringdata0[19];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_FetchData_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_FetchData_t qt_meta_stringdata_FetchData = {
    {
QT_MOC_LITERAL(0, 0, 9), // "FetchData"
QT_MOC_LITERAL(1, 10, 7), // "fetched"
QT_MOC_LITERAL(2, 18, 0) // ""

    },
    "FetchData\0fetched\0"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_FetchData[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       1,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   19,    2, 0x06 /* Public */,

 // signals: parameters
    QMetaType::Void,

       0        // eod
};

void FetchData::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        FetchData *_t = static_cast<FetchData *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->fetched(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (FetchData::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&FetchData::fetched)) {
                *result = 0;
                return;
            }
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject FetchData::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_FetchData.data,
      qt_meta_data_FetchData,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *FetchData::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *FetchData::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_FetchData.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int FetchData::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 1;
    }
    return _id;
}

// SIGNAL 0
void FetchData::fetched()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
struct qt_meta_stringdata_TestModelView_t {
    QByteArrayData data[23];
    char stringdata0[374];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestModelView_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestModelView_t qt_meta_stringdata_TestModelView = {
    {
QT_MOC_LITERAL(0, 0, 13), // "TestModelView"
QT_MOC_LITERAL(1, 14, 12), // "initTestCase"
QT_MOC_LITERAL(2, 27, 0), // ""
QT_MOC_LITERAL(3, 28, 14), // "testEmptyModel"
QT_MOC_LITERAL(4, 43, 15), // "testInitialData"
QT_MOC_LITERAL(5, 59, 19), // "testInitialDataTree"
QT_MOC_LITERAL(6, 79, 14), // "testHeaderData"
QT_MOC_LITERAL(7, 94, 9), // "testFlags"
QT_MOC_LITERAL(8, 104, 15), // "testDataChanged"
QT_MOC_LITERAL(9, 120, 19), // "testDataChangedTree"
QT_MOC_LITERAL(10, 140, 17), // "testDataInsertion"
QT_MOC_LITERAL(11, 158, 21), // "testDataInsertionTree"
QT_MOC_LITERAL(12, 180, 11), // "testSetData"
QT_MOC_LITERAL(13, 192, 15), // "testSetDataTree"
QT_MOC_LITERAL(14, 208, 15), // "testDataRemoval"
QT_MOC_LITERAL(15, 224, 19), // "testDataRemovalTree"
QT_MOC_LITERAL(16, 244, 24), // "testServerInsertDataTree"
QT_MOC_LITERAL(17, 269, 13), // "testRoleNames"
QT_MOC_LITERAL(18, 283, 13), // "testModelTest"
QT_MOC_LITERAL(19, 297, 19), // "testSortFilterModel"
QT_MOC_LITERAL(20, 317, 24), // "testSelectionFromReplica"
QT_MOC_LITERAL(21, 342, 23), // "testSelectionFromSource"
QT_MOC_LITERAL(22, 366, 7) // "cleanup"

    },
    "TestModelView\0initTestCase\0\0testEmptyModel\0"
    "testInitialData\0testInitialDataTree\0"
    "testHeaderData\0testFlags\0testDataChanged\0"
    "testDataChangedTree\0testDataInsertion\0"
    "testDataInsertionTree\0testSetData\0"
    "testSetDataTree\0testDataRemoval\0"
    "testDataRemovalTree\0testServerInsertDataTree\0"
    "testRoleNames\0testModelTest\0"
    "testSortFilterModel\0testSelectionFromReplica\0"
    "testSelectionFromSource\0cleanup"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestModelView[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      21,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  119,    2, 0x08 /* Private */,
       3,    0,  120,    2, 0x08 /* Private */,
       4,    0,  121,    2, 0x08 /* Private */,
       5,    0,  122,    2, 0x08 /* Private */,
       6,    0,  123,    2, 0x08 /* Private */,
       7,    0,  124,    2, 0x08 /* Private */,
       8,    0,  125,    2, 0x08 /* Private */,
       9,    0,  126,    2, 0x08 /* Private */,
      10,    0,  127,    2, 0x08 /* Private */,
      11,    0,  128,    2, 0x08 /* Private */,
      12,    0,  129,    2, 0x08 /* Private */,
      13,    0,  130,    2, 0x08 /* Private */,
      14,    0,  131,    2, 0x08 /* Private */,
      15,    0,  132,    2, 0x08 /* Private */,
      16,    0,  133,    2, 0x08 /* Private */,
      17,    0,  134,    2, 0x08 /* Private */,
      18,    0,  135,    2, 0x08 /* Private */,
      19,    0,  136,    2, 0x08 /* Private */,
      20,    0,  137,    2, 0x08 /* Private */,
      21,    0,  138,    2, 0x08 /* Private */,
      22,    0,  139,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestModelView::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestModelView *_t = static_cast<TestModelView *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->testEmptyModel(); break;
        case 2: _t->testInitialData(); break;
        case 3: _t->testInitialDataTree(); break;
        case 4: _t->testHeaderData(); break;
        case 5: _t->testFlags(); break;
        case 6: _t->testDataChanged(); break;
        case 7: _t->testDataChangedTree(); break;
        case 8: _t->testDataInsertion(); break;
        case 9: _t->testDataInsertionTree(); break;
        case 10: _t->testSetData(); break;
        case 11: _t->testSetDataTree(); break;
        case 12: _t->testDataRemoval(); break;
        case 13: _t->testDataRemovalTree(); break;
        case 14: _t->testServerInsertDataTree(); break;
        case 15: _t->testRoleNames(); break;
        case 16: _t->testModelTest(); break;
        case 17: _t->testSortFilterModel(); break;
        case 18: _t->testSelectionFromReplica(); break;
        case 19: _t->testSelectionFromSource(); break;
        case 20: _t->cleanup(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestModelView::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestModelView.data,
      qt_meta_data_TestModelView,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestModelView::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestModelView::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestModelView.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestModelView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 21)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 21;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 21)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 21;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
