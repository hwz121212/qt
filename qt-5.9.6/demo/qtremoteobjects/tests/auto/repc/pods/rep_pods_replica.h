#ifndef REP_PODS_REPLICA_H
#define REP_PODS_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>

#include <QString>

class PodI
{
    Q_GADGET

    Q_PROPERTY(int i READ i WRITE setI)
public:
    PodI() : _i() {}
    explicit PodI(int i) : _i(i) {}
    int i() const { return _i; }
    void setI(int i) { if (i != _i) { _i = i; } }
private:
    int _i;
};

inline bool operator==(const PodI &left, const PodI &right) Q_DECL_NOTHROW {
    return left.i() == right.i();
}
inline bool operator!=(const PodI &left, const PodI &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const PodI &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodI &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class PodF
{
    Q_GADGET

    Q_PROPERTY(float f READ f WRITE setF)
public:
    PodF() : _f() {}
    explicit PodF(float f) : _f(f) {}
    float f() const { return _f; }
    void setF(float f) { if (f != _f) { _f = f; } }
private:
    float _f;
};

inline bool operator==(const PodF &left, const PodF &right) Q_DECL_NOTHROW {
    return left.f() == right.f();
}
inline bool operator!=(const PodF &left, const PodF &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const PodF &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodF &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class PodS
{
    Q_GADGET

    Q_PROPERTY(QString s READ s WRITE setS)
public:
    PodS() : _s() {}
    explicit PodS(QString s) : _s(s) {}
    QString s() const { return _s; }
    void setS(QString s) { if (s != _s) { _s = s; } }
private:
    QString _s;
};

inline bool operator==(const PodS &left, const PodS &right) Q_DECL_NOTHROW {
    return left.s() == right.s();
}
inline bool operator!=(const PodS &left, const PodS &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const PodS &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodS &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class PodIFS
{
    Q_GADGET

    Q_PROPERTY(int i READ i WRITE setI)
    Q_PROPERTY(float f READ f WRITE setF)
    Q_PROPERTY(QString s READ s WRITE setS)
public:
    PodIFS() : _i(), _f(), _s() {}
    explicit PodIFS(int i, float f, QString s) : _i(i), _f(f), _s(s) {}
    int i() const { return _i; }
    void setI(int i) { if (i != _i) { _i = i; } }
    float f() const { return _f; }
    void setF(float f) { if (f != _f) { _f = f; } }
    QString s() const { return _s; }
    void setS(QString s) { if (s != _s) { _s = s; } }
private:
    int _i;
    float _f;
    QString _s;
};

inline bool operator==(const PodIFS &left, const PodIFS &right) Q_DECL_NOTHROW {
    return left.i() == right.i() && left.f() == right.f() && left.s() == right.s();
}
inline bool operator!=(const PodIFS &left, const PodIFS &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const PodIFS &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodIFS &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_PODS_REPLICA_H
