#ifndef REP_CLASSWITHSIGNALONLYTEST_MERGED_H
#define REP_CLASSWITHSIGNALONLYTEST_MERGED_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class MyClassReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "fae0b091babf3f517ba324122b92b25855007725")

public:
    MyClassReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
    }

private:
    MyClassReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
        { initializeNode(node, name); }

    void initialize()
    {
        MyClassReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(0);
        setProperties(properties);
    }

public:
    virtual ~MyClassReplica() {}


Q_SIGNALS:
    void mySignal(int __repc_variable_1);

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class MyClassSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "fae0b091babf3f517ba324122b92b25855007725")

public:
    explicit MyClassSource(QObject *parent = nullptr) : QObject(parent)
    {
    }

public:
    virtual ~MyClassSource() {}


Q_SIGNALS:
    void mySignal(int __repc_variable_1);

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class MyClassSimpleSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "fae0b091babf3f517ba324122b92b25855007725")

public:
    explicit MyClassSimpleSource(QObject *parent = nullptr) : QObject(parent)
    {
    }

public:
    virtual ~MyClassSimpleSource() {}


Q_SIGNALS:
    void mySignal(int __repc_variable_1);

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


template <class ObjectType>
struct MyClassSourceAPI : public SourceApiMap
{
    MyClassSourceAPI(ObjectType *object)
        : SourceApiMap()
    {
        Q_UNUSED(object);
        _properties[0] = 0;
        _signals[0] = 1;
        _signals[1] = qtro_signal_index<ObjectType>(&ObjectType::mySignal, static_cast<void (QObject::*)(int)>(0),signalArgCount+0,&signalArgTypes[0]);
        _methods[0] = 0;
        _modelCount = 0;
    }

    QString name() const override { return QStringLiteral("MyClass"); }
    QString typeName() const override { return QStringLiteral("MyClass"); }
    int propertyCount() const override { return _properties[0]; }
    int signalCount() const override { return _signals[0]; }
    int methodCount() const override { return _methods[0]; }
    int modelCount() const override { return _modelCount; }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= _properties[0])
            return -1;
        return _properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return _signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return _methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= _signals[0] || paramIndex < 0 || paramIndex >= signalArgCount[sigIndex])
            return -1;
        return signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override { Q_UNUSED(index); return -1; }
    int methodParameterType(int methodIndex, int paramIndex) const override
    { Q_UNUSED(methodIndex); Q_UNUSED(paramIndex); return -1; }
    int propertyIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("mySignal(int)");
        }
        return QByteArrayLiteral("");
    }
    const QByteArray methodSignature(int index) const override
    {
        Q_UNUSED(index);
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    const QByteArray typeName(int index) const override
    {
        Q_UNUSED(index);
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"fae0b091babf3f517ba324122b92b25855007725"}; }

    int _properties[1];
    int _signals[2];
    int _methods[1];
    int signalArgCount[1];
    const int* signalArgTypes[1];
    int _modelCount;
};
QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_CLASSWITHSIGNALONLYTEST_MERGED_H
