#ifndef REP_SPEEDOMETER_SOURCE_H
#define REP_SPEEDOMETER_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class SpeedometerSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "Speedometer")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "0dce25c23392bcb848529e49e60283f15d63c141")
    Q_PROPERTY(int mph READ mph WRITE setMph NOTIFY mphChanged)

public:
    explicit SpeedometerSource(QObject *parent = nullptr) : QObject(parent)
    {
    }

public:
    virtual ~SpeedometerSource() {}

    virtual int mph() const = 0;
    virtual void setMph(int mph) = 0;

Q_SIGNALS:
    void mphChanged(int);

public Q_SLOTS:
    virtual void pushMph(int mph)
    {
        setMph(mph);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class SpeedometerSimpleSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "Speedometer")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "0dce25c23392bcb848529e49e60283f15d63c141")
    Q_PROPERTY(int mph READ mph WRITE setMph NOTIFY mphChanged)

public:
    explicit SpeedometerSimpleSource(QObject *parent = nullptr) : QObject(parent)
        , _mph()
    {
    }

public:
    virtual ~SpeedometerSimpleSource() {}

    virtual int mph() const { return _mph; }
    virtual void setMph(int mph)
    {
        if (mph != _mph) { 
            _mph = mph;
            Q_EMIT mphChanged(_mph);
        }
    }

Q_SIGNALS:
    void mphChanged(int);

public Q_SLOTS:
    virtual void pushMph(int mph)
    {
        setMph(mph);
    }

private:
    int _mph;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


template <class ObjectType>
struct SpeedometerSourceAPI : public SourceApiMap
{
    SpeedometerSourceAPI(ObjectType *object)
        : SourceApiMap()
    {
        Q_UNUSED(object);
        _properties[0] = 1;
        _properties[1] = qtro_prop_index<ObjectType>(&ObjectType::mph, static_cast<int (QObject::*)()>(0),"mph");
        qtro_method_test<ObjectType>(&ObjectType::mphChanged, static_cast<void (QObject::*)()>(0));
        _signals[0] = 1;
        _signals[1] = qtro_signal_index<ObjectType>(&ObjectType::mphChanged, static_cast<void (QObject::*)()>(0),signalArgCount+0,&signalArgTypes[0]);
        _methods[0] = 1;
        _methods[1] = qtro_method_index<ObjectType>(&ObjectType::pushMph, static_cast<void (QObject::*)(int)>(0),"pushMph(int)",methodArgCount+0,&methodArgTypes[0]);
        _modelCount = 0;
    }

    QString name() const override { return QStringLiteral("Speedometer"); }
    QString typeName() const override { return QStringLiteral("Speedometer"); }
    int propertyCount() const override { return _properties[0]; }
    int signalCount() const override { return _signals[0]; }
    int methodCount() const override { return _methods[0]; }
    int modelCount() const override { return _modelCount; }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= _properties[0])
            return -1;
        return _properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return _signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return _methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= _signals[0] || paramIndex < 0 || paramIndex >= signalArgCount[sigIndex])
            return -1;
        return signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= _methods[0] || paramIndex < 0 || paramIndex >= methodArgCount[methodIndex])
            return -1;
        return methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return _properties[1];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 1;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("mphChanged()");
        }
        return QByteArrayLiteral("");
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushMph(int)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"0dce25c23392bcb848529e49e60283f15d63c141"}; }

    int _properties[2];
    int _signals[2];
    int _methods[2];
    int signalArgCount[1];
    const int* signalArgTypes[1];
    int methodArgCount[1];
    const int* methodArgTypes[1];
    int _modelCount;
};
QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_SPEEDOMETER_SOURCE_H
