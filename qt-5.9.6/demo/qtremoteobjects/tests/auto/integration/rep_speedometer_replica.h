#ifndef REP_SPEEDOMETER_REPLICA_H
#define REP_SPEEDOMETER_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class SpeedometerReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "Speedometer")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "0dce25c23392bcb848529e49e60283f15d63c141")
    Q_PROPERTY(int mph READ mph NOTIFY mphChanged)

public:
    SpeedometerReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
    }

private:
    SpeedometerReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
        { initializeNode(node, name); }

    void initialize()
    {
        SpeedometerReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(1);
        properties << QVariant::fromValue(int());
        setProperties(properties);
    }

public:
    virtual ~SpeedometerReplica() {}

    int mph() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property mph to type int";
        }
        return variant.value<int >();
    }


Q_SIGNALS:
    void mphChanged(int);

public Q_SLOTS:
    void pushMph(int mph)
    {
        static int __repc_index = SpeedometerReplica::staticMetaObject.indexOfSlot("pushMph(int)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(mph);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_SPEEDOMETER_REPLICA_H
