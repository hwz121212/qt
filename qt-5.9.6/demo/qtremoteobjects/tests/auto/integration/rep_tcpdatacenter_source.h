#ifndef REP_TCPDATACENTER_SOURCE_H
#define REP_TCPDATACENTER_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class TcpDataCenterSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "TcpDataCenter")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "74c97ce2d11992e333571d1e53f1b76d2abb6623")
    Q_PROPERTY(int data1 READ data1 WRITE setData1 NOTIFY data1Changed)
    Q_PROPERTY(float data2 READ data2 WRITE setData2 NOTIFY data2Changed)
    Q_PROPERTY(QString data3 READ data3 WRITE setData3 NOTIFY data3Changed)
    Q_PROPERTY(QVector<int> data4 READ data4 WRITE setData4 NOTIFY data4Changed)

public:
    explicit TcpDataCenterSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<QVector<int>>();
        qRegisterMetaTypeStreamOperators<QVector<int>>();

    }

public:
    virtual ~TcpDataCenterSource() {}

    virtual int data1() const = 0;
    virtual float data2() const = 0;
    virtual QString data3() const = 0;
    virtual QVector<int> data4() const = 0;
    virtual void setData1(int data1) = 0;
    virtual void setData2(float data2) = 0;
    virtual void setData3(QString data3) = 0;
    virtual void setData4(QVector<int> data4) = 0;

Q_SIGNALS:
    void data1Changed(int);
    void data2Changed(float);
    void data3Changed(QString);
    void data4Changed(QVector<int>);

public Q_SLOTS:
    virtual void pushData1(int data1)
    {
        setData1(data1);
    }
    virtual void pushData2(float data2)
    {
        setData2(data2);
    }
    virtual void pushData3(QString data3)
    {
        setData3(data3);
    }
    virtual void pushData4(QVector<int> data4)
    {
        setData4(data4);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class TcpDataCenterSimpleSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "TcpDataCenter")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "74c97ce2d11992e333571d1e53f1b76d2abb6623")
    Q_PROPERTY(int data1 READ data1 WRITE setData1 NOTIFY data1Changed)
    Q_PROPERTY(float data2 READ data2 WRITE setData2 NOTIFY data2Changed)
    Q_PROPERTY(QString data3 READ data3 WRITE setData3 NOTIFY data3Changed)
    Q_PROPERTY(QVector<int> data4 READ data4 WRITE setData4 NOTIFY data4Changed)

public:
    explicit TcpDataCenterSimpleSource(QObject *parent = nullptr) : QObject(parent)
        , _data1()
        , _data2()
        , _data3()
        , _data4()
    {
        qRegisterMetaType<QVector<int>>();
        qRegisterMetaTypeStreamOperators<QVector<int>>();

    }

public:
    virtual ~TcpDataCenterSimpleSource() {}

    virtual int data1() const { return _data1; }
    virtual float data2() const { return _data2; }
    virtual QString data3() const { return _data3; }
    virtual QVector<int> data4() const { return _data4; }
    virtual void setData1(int data1)
    {
        if (data1 != _data1) { 
            _data1 = data1;
            Q_EMIT data1Changed(_data1);
        }
    }
    virtual void setData2(float data2)
    {
        if (data2 != _data2) { 
            _data2 = data2;
            Q_EMIT data2Changed(_data2);
        }
    }
    virtual void setData3(QString data3)
    {
        if (data3 != _data3) { 
            _data3 = data3;
            Q_EMIT data3Changed(_data3);
        }
    }
    virtual void setData4(QVector<int> data4)
    {
        if (data4 != _data4) { 
            _data4 = data4;
            Q_EMIT data4Changed(_data4);
        }
    }

Q_SIGNALS:
    void data1Changed(int);
    void data2Changed(float);
    void data3Changed(QString);
    void data4Changed(QVector<int>);

public Q_SLOTS:
    virtual void pushData1(int data1)
    {
        setData1(data1);
    }
    virtual void pushData2(float data2)
    {
        setData2(data2);
    }
    virtual void pushData3(QString data3)
    {
        setData3(data3);
    }
    virtual void pushData4(QVector<int> data4)
    {
        setData4(data4);
    }

private:
    int _data1;
    float _data2;
    QString _data3;
    QVector<int> _data4;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


template <class ObjectType>
struct TcpDataCenterSourceAPI : public SourceApiMap
{
    TcpDataCenterSourceAPI(ObjectType *object)
        : SourceApiMap()
    {
        Q_UNUSED(object);
        _properties[0] = 4;
        _properties[1] = qtro_prop_index<ObjectType>(&ObjectType::data1, static_cast<int (QObject::*)()>(0),"data1");
        qtro_method_test<ObjectType>(&ObjectType::data1Changed, static_cast<void (QObject::*)()>(0));
        _properties[2] = qtro_prop_index<ObjectType>(&ObjectType::data2, static_cast<float (QObject::*)()>(0),"data2");
        qtro_method_test<ObjectType>(&ObjectType::data2Changed, static_cast<void (QObject::*)()>(0));
        _properties[3] = qtro_prop_index<ObjectType>(&ObjectType::data3, static_cast<QString (QObject::*)()>(0),"data3");
        qtro_method_test<ObjectType>(&ObjectType::data3Changed, static_cast<void (QObject::*)()>(0));
        _properties[4] = qtro_prop_index<ObjectType>(&ObjectType::data4, static_cast<QVector<int> (QObject::*)()>(0),"data4");
        qtro_method_test<ObjectType>(&ObjectType::data4Changed, static_cast<void (QObject::*)()>(0));
        _signals[0] = 4;
        _signals[1] = qtro_signal_index<ObjectType>(&ObjectType::data1Changed, static_cast<void (QObject::*)()>(0),signalArgCount+0,&signalArgTypes[0]);
        _signals[2] = qtro_signal_index<ObjectType>(&ObjectType::data2Changed, static_cast<void (QObject::*)()>(0),signalArgCount+1,&signalArgTypes[1]);
        _signals[3] = qtro_signal_index<ObjectType>(&ObjectType::data3Changed, static_cast<void (QObject::*)()>(0),signalArgCount+2,&signalArgTypes[2]);
        _signals[4] = qtro_signal_index<ObjectType>(&ObjectType::data4Changed, static_cast<void (QObject::*)()>(0),signalArgCount+3,&signalArgTypes[3]);
        _methods[0] = 4;
        _methods[1] = qtro_method_index<ObjectType>(&ObjectType::pushData1, static_cast<void (QObject::*)(int)>(0),"pushData1(int)",methodArgCount+0,&methodArgTypes[0]);
        _methods[2] = qtro_method_index<ObjectType>(&ObjectType::pushData2, static_cast<void (QObject::*)(float)>(0),"pushData2(float)",methodArgCount+1,&methodArgTypes[1]);
        _methods[3] = qtro_method_index<ObjectType>(&ObjectType::pushData3, static_cast<void (QObject::*)(QString)>(0),"pushData3(QString)",methodArgCount+2,&methodArgTypes[2]);
        _methods[4] = qtro_method_index<ObjectType>(&ObjectType::pushData4, static_cast<void (QObject::*)(QVector<int>)>(0),"pushData4(QVector<int>)",methodArgCount+3,&methodArgTypes[3]);
        _modelCount = 0;
    }

    QString name() const override { return QStringLiteral("TcpDataCenter"); }
    QString typeName() const override { return QStringLiteral("TcpDataCenter"); }
    int propertyCount() const override { return _properties[0]; }
    int signalCount() const override { return _signals[0]; }
    int methodCount() const override { return _methods[0]; }
    int modelCount() const override { return _modelCount; }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= _properties[0])
            return -1;
        return _properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return _signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return _methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= _signals[0] || paramIndex < 0 || paramIndex >= signalArgCount[sigIndex])
            return -1;
        return signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= _methods[0] || paramIndex < 0 || paramIndex >= methodArgCount[methodIndex])
            return -1;
        return methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return _properties[1];
        case 1: return _properties[2];
        case 2: return _properties[3];
        case 3: return _properties[4];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 1;
        case 1: return 2;
        case 2: return 3;
        case 3: return 4;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("data1Changed()");
        case 1: return QByteArrayLiteral("data2Changed()");
        case 2: return QByteArrayLiteral("data3Changed()");
        case 3: return QByteArrayLiteral("data4Changed()");
        }
        return QByteArrayLiteral("");
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushData1(int)");
        case 1: return QByteArrayLiteral("pushData2(float)");
        case 2: return QByteArrayLiteral("pushData3(QString)");
        case 3: return QByteArrayLiteral("pushData4(QVector<int>)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        case 3: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"74c97ce2d11992e333571d1e53f1b76d2abb6623"}; }

    int _properties[5];
    int _signals[5];
    int _methods[5];
    int signalArgCount[4];
    const int* signalArgTypes[4];
    int methodArgCount[4];
    const int* methodArgTypes[4];
    int _modelCount;
};
QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_TCPDATACENTER_SOURCE_H
