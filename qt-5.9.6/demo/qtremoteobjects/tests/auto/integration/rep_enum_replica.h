#ifndef REP_ENUM_REPLICA_H
#define REP_ENUM_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class TestEnum
{
    Q_GADGET
    TestEnum();

public:
    enum Test {
        TRUE = 0,
        FALSE = 1,
    };
#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
    Q_ENUM(Test)
#else
    Q_ENUMS(Test)
#endif
    static inline Test toTest(quint8 i, bool *ok = 0)
    {
        if (ok)
            *ok = true;
        switch (i) {
        case 0: return TRUE;
        case 1: return FALSE;
        default:
            if (ok)
                *ok = false;
            return TRUE;
        }
    }
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
    Q_DECLARE_METATYPE(TestEnum::Test)
#endif

inline QDataStream &operator<<(QDataStream &ds, const TestEnum::Test &obj)
{
    quint8 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, TestEnum::Test &obj) {
    bool ok;
    quint8 val;
    ds >> val;
    obj = TestEnum::toTest(val, &ok);
    if (!ok)
        qWarning() << "QtRO received an invalid enum value for typeTest, value =" << val;
    return ds;
}

class TestClassReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "TestClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "d53722adfddbbc36423bd97f0d376466096e5d49")
    Q_PROPERTY(TestEnum::Test testEnum READ testEnum NOTIFY testEnumChanged)
    Q_PROPERTY(ClassEnum classEnum READ classEnum NOTIFY classEnumChanged)
    Q_PROPERTY(ClassEnum classEnumRW READ classEnumRW WRITE setClassEnumRW NOTIFY classEnumRWChanged)

public:
    enum ClassEnum {
        Null = 0,
        One = 1,
        Two = 2,
    };
#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
    Q_ENUM(ClassEnum)
#else
    Q_ENUMS(ClassEnum)
#endif

public:
    TestClassReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<TestEnum::Test>();
        qRegisterMetaTypeStreamOperators<TestEnum::Test>();
        qRegisterMetaType<ClassEnum>();
        qRegisterMetaTypeStreamOperators<ClassEnum>();

    }

private:
    TestClassReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
        { initializeNode(node, name); }

    void initialize()
    {
        TestClassReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(3);
        properties << QVariant::fromValue(TestEnum::Test());
        properties << QVariant::fromValue(ClassEnum());
        properties << QVariant::fromValue(ClassEnum());
        setProperties(properties);
    }

public:
    virtual ~TestClassReplica() {}

    static inline ClassEnum toClassEnum(quint8 i, bool *ok = 0)
    {
        if (ok)
            *ok = true;
        switch (i) {
        case 0: return Null;
        case 1: return One;
        case 2: return Two;
        default:
            if (ok)
                *ok = false;
            return Null;
        }
    }
    TestEnum::Test testEnum() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<TestEnum::Test>()) {
            qWarning() << "QtRO cannot convert the property testEnum to type TestEnum::Test";
        }
        return variant.value<TestEnum::Test >();
    }

    ClassEnum classEnum() const
    {
        const QVariant variant = propAsVariant(1);
        if (!variant.canConvert<ClassEnum>()) {
            qWarning() << "QtRO cannot convert the property classEnum to type ClassEnum";
        }
        return variant.value<ClassEnum >();
    }

    ClassEnum classEnumRW() const
    {
        const QVariant variant = propAsVariant(2);
        if (!variant.canConvert<ClassEnum>()) {
            qWarning() << "QtRO cannot convert the property classEnumRW to type ClassEnum";
        }
        return variant.value<ClassEnum >();
    }

    void setClassEnumRW(ClassEnum classEnumRW)
    {
        static int __repc_index = TestClassReplica::staticMetaObject.indexOfProperty("classEnumRW");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(classEnumRW);
        send(QMetaObject::WriteProperty, __repc_index, __repc_args);
    }


Q_SIGNALS:
    void testEnumChanged(TestEnum::Test);
    void classEnumChanged(TestClassReplica::ClassEnum);
    void classEnumRWChanged(TestClassReplica::ClassEnum);

public Q_SLOTS:
    void pushTestEnum(TestEnum::Test testEnum)
    {
        static int __repc_index = TestClassReplica::staticMetaObject.indexOfSlot("pushTestEnum(TestEnum::Test)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(testEnum);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void pushClassEnum(ClassEnum classEnum)
    {
        static int __repc_index = TestClassReplica::staticMetaObject.indexOfSlot("pushClassEnum(ClassEnum)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(classEnum);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
    Q_DECLARE_METATYPE(TestClassReplica::ClassEnum)
#endif

inline QDataStream &operator<<(QDataStream &ds, const TestClassReplica::ClassEnum &obj)
{
    quint8 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, TestClassReplica::ClassEnum &obj) {
    bool ok;
    quint8 val;
    ds >> val;
    obj = TestClassReplica::toClassEnum(val, &ok);
    if (!ok)
        qWarning() << "QtRO received an invalid enum value for typeClassEnum, value =" << val;
    return ds;
}


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_ENUM_REPLICA_H
