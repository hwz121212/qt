#ifndef REP_POD_MERGED_H
#define REP_POD_MERGED_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class MyPOD
{
    Q_GADGET

    Q_PROPERTY(int i READ i WRITE setI)
    Q_PROPERTY(float f READ f WRITE setF)
    Q_PROPERTY(QString s READ s WRITE setS)
public:
    MyPOD() : _i(), _f(), _s() {}
    explicit MyPOD(int i, float f, QString s) : _i(i), _f(f), _s(s) {}
    int i() const { return _i; }
    void setI(int i) { if (i != _i) { _i = i; } }
    float f() const { return _f; }
    void setF(float f) { if (f != _f) { _f = f; } }
    QString s() const { return _s; }
    void setS(QString s) { if (s != _s) { _s = s; } }
private:
    int _i;
    float _f;
    QString _s;
};

inline bool operator==(const MyPOD &left, const MyPOD &right) Q_DECL_NOTHROW {
    return left.i() == right.i() && left.f() == right.f() && left.s() == right.s();
}
inline bool operator!=(const MyPOD &left, const MyPOD &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const MyPOD &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, MyPOD &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class MyClassReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "f6d2be61301b7a80ee362f8d4109b5b7c0da7440")
    Q_PROPERTY(MyPOD myPOD READ myPOD NOTIFY myPODChanged)

public:
    MyClassReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<MyPOD>();
        qRegisterMetaTypeStreamOperators<MyPOD>();

    }

private:
    MyClassReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
        { initializeNode(node, name); }

    void initialize()
    {
        MyClassReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(1);
        properties << QVariant::fromValue(MyPOD());
        setProperties(properties);
    }

public:
    virtual ~MyClassReplica() {}

    MyPOD myPOD() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<MyPOD>()) {
            qWarning() << "QtRO cannot convert the property myPOD to type MyPOD";
        }
        return variant.value<MyPOD >();
    }


Q_SIGNALS:
    void myPODChanged(MyPOD);

public Q_SLOTS:
    void pushMyPOD(MyPOD myPOD)
    {
        static int __repc_index = MyClassReplica::staticMetaObject.indexOfSlot("pushMyPOD(MyPOD)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(myPOD);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class MyClassSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "f6d2be61301b7a80ee362f8d4109b5b7c0da7440")
    Q_PROPERTY(MyPOD myPOD READ myPOD WRITE setMyPOD NOTIFY myPODChanged)

public:
    explicit MyClassSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<MyPOD>();
        qRegisterMetaTypeStreamOperators<MyPOD>();

    }

public:
    virtual ~MyClassSource() {}

    virtual MyPOD myPOD() const = 0;
    virtual void setMyPOD(MyPOD myPOD) = 0;

Q_SIGNALS:
    void myPODChanged(MyPOD);

public Q_SLOTS:
    virtual void pushMyPOD(MyPOD myPOD)
    {
        setMyPOD(myPOD);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class MyClassSimpleSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "f6d2be61301b7a80ee362f8d4109b5b7c0da7440")
    Q_PROPERTY(MyPOD myPOD READ myPOD WRITE setMyPOD NOTIFY myPODChanged)

public:
    explicit MyClassSimpleSource(QObject *parent = nullptr) : QObject(parent)
        , _myPOD()
    {
        qRegisterMetaType<MyPOD>();
        qRegisterMetaTypeStreamOperators<MyPOD>();

    }

public:
    virtual ~MyClassSimpleSource() {}

    virtual MyPOD myPOD() const { return _myPOD; }
    virtual void setMyPOD(MyPOD myPOD)
    {
        if (myPOD != _myPOD) { 
            _myPOD = myPOD;
            Q_EMIT myPODChanged(_myPOD);
        }
    }

Q_SIGNALS:
    void myPODChanged(MyPOD);

public Q_SLOTS:
    virtual void pushMyPOD(MyPOD myPOD)
    {
        setMyPOD(myPOD);
    }

private:
    MyPOD _myPOD;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


template <class ObjectType>
struct MyClassSourceAPI : public SourceApiMap
{
    MyClassSourceAPI(ObjectType *object)
        : SourceApiMap()
    {
        Q_UNUSED(object);
        _properties[0] = 1;
        _properties[1] = qtro_prop_index<ObjectType>(&ObjectType::myPOD, static_cast<MyPOD (QObject::*)()>(0),"myPOD");
        qtro_method_test<ObjectType>(&ObjectType::myPODChanged, static_cast<void (QObject::*)()>(0));
        _signals[0] = 1;
        _signals[1] = qtro_signal_index<ObjectType>(&ObjectType::myPODChanged, static_cast<void (QObject::*)()>(0),signalArgCount+0,&signalArgTypes[0]);
        _methods[0] = 1;
        _methods[1] = qtro_method_index<ObjectType>(&ObjectType::pushMyPOD, static_cast<void (QObject::*)(MyPOD)>(0),"pushMyPOD(MyPOD)",methodArgCount+0,&methodArgTypes[0]);
        _modelCount = 0;
    }

    QString name() const override { return QStringLiteral("MyClass"); }
    QString typeName() const override { return QStringLiteral("MyClass"); }
    int propertyCount() const override { return _properties[0]; }
    int signalCount() const override { return _signals[0]; }
    int methodCount() const override { return _methods[0]; }
    int modelCount() const override { return _modelCount; }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= _properties[0])
            return -1;
        return _properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return _signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return _methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= _signals[0] || paramIndex < 0 || paramIndex >= signalArgCount[sigIndex])
            return -1;
        return signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= _methods[0] || paramIndex < 0 || paramIndex >= methodArgCount[methodIndex])
            return -1;
        return methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return _properties[1];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 1;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("myPODChanged()");
        }
        return QByteArrayLiteral("");
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushMyPOD(MyPOD)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"f6d2be61301b7a80ee362f8d4109b5b7c0da7440"}; }

    int _properties[2];
    int _signals[2];
    int _methods[2];
    int signalArgCount[1];
    const int* signalArgTypes[1];
    int methodArgCount[1];
    const int* methodArgTypes[1];
    int _modelCount;
};
QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_POD_MERGED_H
