#ifndef REP_TCPDATACENTER_REPLICA_H
#define REP_TCPDATACENTER_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class TcpDataCenterReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "TcpDataCenter")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "74c97ce2d11992e333571d1e53f1b76d2abb6623")
    Q_PROPERTY(int data1 READ data1 NOTIFY data1Changed)
    Q_PROPERTY(float data2 READ data2 NOTIFY data2Changed)
    Q_PROPERTY(QString data3 READ data3 NOTIFY data3Changed)
    Q_PROPERTY(QVector<int> data4 READ data4 NOTIFY data4Changed)

public:
    TcpDataCenterReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<QVector<int>>();
        qRegisterMetaTypeStreamOperators<QVector<int>>();

    }

private:
    TcpDataCenterReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
        { initializeNode(node, name); }

    void initialize()
    {
        TcpDataCenterReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(4);
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(float());
        properties << QVariant::fromValue(QString());
        properties << QVariant::fromValue(QVector<int>());
        setProperties(properties);
    }

public:
    virtual ~TcpDataCenterReplica() {}

    int data1() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property data1 to type int";
        }
        return variant.value<int >();
    }

    float data2() const
    {
        const QVariant variant = propAsVariant(1);
        if (!variant.canConvert<float>()) {
            qWarning() << "QtRO cannot convert the property data2 to type float";
        }
        return variant.value<float >();
    }

    QString data3() const
    {
        const QVariant variant = propAsVariant(2);
        if (!variant.canConvert<QString>()) {
            qWarning() << "QtRO cannot convert the property data3 to type QString";
        }
        return variant.value<QString >();
    }

    QVector<int> data4() const
    {
        const QVariant variant = propAsVariant(3);
        if (!variant.canConvert<QVector<int>>()) {
            qWarning() << "QtRO cannot convert the property data4 to type QVector<int>";
        }
        return variant.value<QVector<int> >();
    }


Q_SIGNALS:
    void data1Changed(int);
    void data2Changed(float);
    void data3Changed(QString);
    void data4Changed(QVector<int>);

public Q_SLOTS:
    void pushData1(int data1)
    {
        static int __repc_index = TcpDataCenterReplica::staticMetaObject.indexOfSlot("pushData1(int)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(data1);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void pushData2(float data2)
    {
        static int __repc_index = TcpDataCenterReplica::staticMetaObject.indexOfSlot("pushData2(float)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(data2);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void pushData3(QString data3)
    {
        static int __repc_index = TcpDataCenterReplica::staticMetaObject.indexOfSlot("pushData3(QString)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(data3);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void pushData4(QVector<int> data4)
    {
        static int __repc_index = TcpDataCenterReplica::staticMetaObject.indexOfSlot("pushData4(QVector<int>)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(data4);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_TCPDATACENTER_REPLICA_H
