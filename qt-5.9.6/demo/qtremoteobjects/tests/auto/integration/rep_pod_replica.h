#ifndef REP_POD_REPLICA_H
#define REP_POD_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class MyPOD
{
    Q_GADGET

    Q_PROPERTY(int i READ i WRITE setI)
    Q_PROPERTY(float f READ f WRITE setF)
    Q_PROPERTY(QString s READ s WRITE setS)
public:
    MyPOD() : _i(), _f(), _s() {}
    explicit MyPOD(int i, float f, QString s) : _i(i), _f(f), _s(s) {}
    int i() const { return _i; }
    void setI(int i) { if (i != _i) { _i = i; } }
    float f() const { return _f; }
    void setF(float f) { if (f != _f) { _f = f; } }
    QString s() const { return _s; }
    void setS(QString s) { if (s != _s) { _s = s; } }
private:
    int _i;
    float _f;
    QString _s;
};

inline bool operator==(const MyPOD &left, const MyPOD &right) Q_DECL_NOTHROW {
    return left.i() == right.i() && left.f() == right.f() && left.s() == right.s();
}
inline bool operator!=(const MyPOD &left, const MyPOD &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const MyPOD &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, MyPOD &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class MyClassReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MyClass")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "f6d2be61301b7a80ee362f8d4109b5b7c0da7440")
    Q_PROPERTY(MyPOD myPOD READ myPOD NOTIFY myPODChanged)

public:
    MyClassReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<MyPOD>();
        qRegisterMetaTypeStreamOperators<MyPOD>();

    }

private:
    MyClassReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
        { initializeNode(node, name); }

    void initialize()
    {
        MyClassReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(1);
        properties << QVariant::fromValue(MyPOD());
        setProperties(properties);
    }

public:
    virtual ~MyClassReplica() {}

    MyPOD myPOD() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<MyPOD>()) {
            qWarning() << "QtRO cannot convert the property myPOD to type MyPOD";
        }
        return variant.value<MyPOD >();
    }


Q_SIGNALS:
    void myPODChanged(MyPOD);

public Q_SLOTS:
    void pushMyPOD(MyPOD myPOD)
    {
        static int __repc_index = MyClassReplica::staticMetaObject.indexOfSlot("pushMyPOD(MyPOD)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(myPOD);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_POD_REPLICA_H
