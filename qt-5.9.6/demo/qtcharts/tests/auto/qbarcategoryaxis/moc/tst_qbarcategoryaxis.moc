/****************************************************************************
** Meta object code from reading C++ file 'tst_qbarcategoryaxis.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qbarcategoryaxis.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QBarCategoriesAxis_t {
    QByteArrayData data[46];
    char stringdata0[522];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QBarCategoriesAxis_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QBarCategoriesAxis_t qt_meta_stringdata_tst_QBarCategoriesAxis = {
    {
QT_MOC_LITERAL(0, 0, 22), // "tst_QBarCategoriesAxis"
QT_MOC_LITERAL(1, 23, 12), // "initTestCase"
QT_MOC_LITERAL(2, 36, 0), // ""
QT_MOC_LITERAL(3, 37, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 53, 4), // "init"
QT_MOC_LITERAL(5, 58, 7), // "cleanup"
QT_MOC_LITERAL(6, 66, 21), // "qbarcategoryaxis_data"
QT_MOC_LITERAL(7, 88, 16), // "qbarcategoryaxis"
QT_MOC_LITERAL(8, 105, 12), // "append2_data"
QT_MOC_LITERAL(9, 118, 7), // "append2"
QT_MOC_LITERAL(10, 126, 11), // "append_data"
QT_MOC_LITERAL(11, 138, 6), // "append"
QT_MOC_LITERAL(12, 145, 7), // "at_data"
QT_MOC_LITERAL(13, 153, 2), // "at"
QT_MOC_LITERAL(14, 156, 15), // "categories_data"
QT_MOC_LITERAL(15, 172, 10), // "categories"
QT_MOC_LITERAL(16, 183, 10), // "clear_data"
QT_MOC_LITERAL(17, 194, 5), // "clear"
QT_MOC_LITERAL(18, 200, 10), // "count_data"
QT_MOC_LITERAL(19, 211, 5), // "count"
QT_MOC_LITERAL(20, 217, 11), // "insert_data"
QT_MOC_LITERAL(21, 229, 6), // "insert"
QT_MOC_LITERAL(22, 236, 11), // "remove_data"
QT_MOC_LITERAL(23, 248, 6), // "remove"
QT_MOC_LITERAL(24, 255, 12), // "max_raw_data"
QT_MOC_LITERAL(25, 268, 7), // "max_raw"
QT_MOC_LITERAL(26, 276, 8), // "max_data"
QT_MOC_LITERAL(27, 285, 3), // "max"
QT_MOC_LITERAL(28, 289, 18), // "max_animation_data"
QT_MOC_LITERAL(29, 308, 13), // "max_animation"
QT_MOC_LITERAL(30, 322, 12), // "min_raw_data"
QT_MOC_LITERAL(31, 335, 7), // "min_raw"
QT_MOC_LITERAL(32, 343, 8), // "min_data"
QT_MOC_LITERAL(33, 352, 3), // "min"
QT_MOC_LITERAL(34, 356, 18), // "min_animation_data"
QT_MOC_LITERAL(35, 375, 13), // "min_animation"
QT_MOC_LITERAL(36, 389, 14), // "range_raw_data"
QT_MOC_LITERAL(37, 404, 9), // "range_raw"
QT_MOC_LITERAL(38, 414, 10), // "range_data"
QT_MOC_LITERAL(39, 425, 5), // "range"
QT_MOC_LITERAL(40, 431, 20), // "range_animation_data"
QT_MOC_LITERAL(41, 452, 15), // "range_animation"
QT_MOC_LITERAL(42, 468, 16), // "noautoscale_data"
QT_MOC_LITERAL(43, 485, 11), // "noautoscale"
QT_MOC_LITERAL(44, 497, 14), // "autoscale_data"
QT_MOC_LITERAL(45, 512, 9) // "autoscale"

    },
    "tst_QBarCategoriesAxis\0initTestCase\0"
    "\0cleanupTestCase\0init\0cleanup\0"
    "qbarcategoryaxis_data\0qbarcategoryaxis\0"
    "append2_data\0append2\0append_data\0"
    "append\0at_data\0at\0categories_data\0"
    "categories\0clear_data\0clear\0count_data\0"
    "count\0insert_data\0insert\0remove_data\0"
    "remove\0max_raw_data\0max_raw\0max_data\0"
    "max\0max_animation_data\0max_animation\0"
    "min_raw_data\0min_raw\0min_data\0min\0"
    "min_animation_data\0min_animation\0"
    "range_raw_data\0range_raw\0range_data\0"
    "range\0range_animation_data\0range_animation\0"
    "noautoscale_data\0noautoscale\0"
    "autoscale_data\0autoscale"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QBarCategoriesAxis[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      44,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  234,    2, 0x0a /* Public */,
       3,    0,  235,    2, 0x0a /* Public */,
       4,    0,  236,    2, 0x0a /* Public */,
       5,    0,  237,    2, 0x0a /* Public */,
       6,    0,  238,    2, 0x08 /* Private */,
       7,    0,  239,    2, 0x08 /* Private */,
       8,    0,  240,    2, 0x08 /* Private */,
       9,    0,  241,    2, 0x08 /* Private */,
      10,    0,  242,    2, 0x08 /* Private */,
      11,    0,  243,    2, 0x08 /* Private */,
      12,    0,  244,    2, 0x08 /* Private */,
      13,    0,  245,    2, 0x08 /* Private */,
      14,    0,  246,    2, 0x08 /* Private */,
      15,    0,  247,    2, 0x08 /* Private */,
      16,    0,  248,    2, 0x08 /* Private */,
      17,    0,  249,    2, 0x08 /* Private */,
      18,    0,  250,    2, 0x08 /* Private */,
      19,    0,  251,    2, 0x08 /* Private */,
      20,    0,  252,    2, 0x08 /* Private */,
      21,    0,  253,    2, 0x08 /* Private */,
      22,    0,  254,    2, 0x08 /* Private */,
      23,    0,  255,    2, 0x08 /* Private */,
      24,    0,  256,    2, 0x08 /* Private */,
      25,    0,  257,    2, 0x08 /* Private */,
      26,    0,  258,    2, 0x08 /* Private */,
      27,    0,  259,    2, 0x08 /* Private */,
      28,    0,  260,    2, 0x08 /* Private */,
      29,    0,  261,    2, 0x08 /* Private */,
      30,    0,  262,    2, 0x08 /* Private */,
      31,    0,  263,    2, 0x08 /* Private */,
      32,    0,  264,    2, 0x08 /* Private */,
      33,    0,  265,    2, 0x08 /* Private */,
      34,    0,  266,    2, 0x08 /* Private */,
      35,    0,  267,    2, 0x08 /* Private */,
      36,    0,  268,    2, 0x08 /* Private */,
      37,    0,  269,    2, 0x08 /* Private */,
      38,    0,  270,    2, 0x08 /* Private */,
      39,    0,  271,    2, 0x08 /* Private */,
      40,    0,  272,    2, 0x08 /* Private */,
      41,    0,  273,    2, 0x08 /* Private */,
      42,    0,  274,    2, 0x08 /* Private */,
      43,    0,  275,    2, 0x08 /* Private */,
      44,    0,  276,    2, 0x08 /* Private */,
      45,    0,  277,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QBarCategoriesAxis::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QBarCategoriesAxis *_t = static_cast<tst_QBarCategoriesAxis *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->qbarcategoryaxis_data(); break;
        case 5: _t->qbarcategoryaxis(); break;
        case 6: _t->append2_data(); break;
        case 7: _t->append2(); break;
        case 8: _t->append_data(); break;
        case 9: _t->append(); break;
        case 10: _t->at_data(); break;
        case 11: _t->at(); break;
        case 12: _t->categories_data(); break;
        case 13: _t->categories(); break;
        case 14: _t->clear_data(); break;
        case 15: _t->clear(); break;
        case 16: _t->count_data(); break;
        case 17: _t->count(); break;
        case 18: _t->insert_data(); break;
        case 19: _t->insert(); break;
        case 20: _t->remove_data(); break;
        case 21: _t->remove(); break;
        case 22: _t->max_raw_data(); break;
        case 23: _t->max_raw(); break;
        case 24: _t->max_data(); break;
        case 25: _t->max(); break;
        case 26: _t->max_animation_data(); break;
        case 27: _t->max_animation(); break;
        case 28: _t->min_raw_data(); break;
        case 29: _t->min_raw(); break;
        case 30: _t->min_data(); break;
        case 31: _t->min(); break;
        case 32: _t->min_animation_data(); break;
        case 33: _t->min_animation(); break;
        case 34: _t->range_raw_data(); break;
        case 35: _t->range_raw(); break;
        case 36: _t->range_data(); break;
        case 37: _t->range(); break;
        case 38: _t->range_animation_data(); break;
        case 39: _t->range_animation(); break;
        case 40: _t->noautoscale_data(); break;
        case 41: _t->noautoscale(); break;
        case 42: _t->autoscale_data(); break;
        case 43: _t->autoscale(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_QBarCategoriesAxis::staticMetaObject = {
    { &tst_QAbstractAxis::staticMetaObject, qt_meta_stringdata_tst_QBarCategoriesAxis.data,
      qt_meta_data_tst_QBarCategoriesAxis,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QBarCategoriesAxis::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QBarCategoriesAxis::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QBarCategoriesAxis.stringdata0))
        return static_cast<void*>(this);
    return tst_QAbstractAxis::qt_metacast(_clname);
}

int tst_QBarCategoriesAxis::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = tst_QAbstractAxis::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 44)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 44;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 44)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 44;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
