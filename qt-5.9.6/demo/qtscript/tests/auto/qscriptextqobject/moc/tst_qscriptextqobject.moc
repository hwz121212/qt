/****************************************************************************
** Meta object code from reading C++ file 'tst_qscriptextqobject.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#include <QtCore/QList>
#include <QtCore/QVector>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qscriptextqobject.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_MyNS__A_t {
    QByteArrayData data[8];
    char stringdata0[62];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MyNS__A_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MyNS__A_t qt_meta_stringdata_MyNS__A = {
    {
QT_MOC_LITERAL(0, 0, 7), // "MyNS::A"
QT_MOC_LITERAL(1, 8, 23), // "slotTakingScopedEnumArg"
QT_MOC_LITERAL(2, 32, 0), // ""
QT_MOC_LITERAL(3, 33, 13), // "MyNS::A::Type"
QT_MOC_LITERAL(4, 47, 1), // "t"
QT_MOC_LITERAL(5, 49, 4), // "Type"
QT_MOC_LITERAL(6, 54, 3), // "Foo"
QT_MOC_LITERAL(7, 58, 3) // "Bar"

    },
    "MyNS::A\0slotTakingScopedEnumArg\0\0"
    "MyNS::A::Type\0t\0Type\0Foo\0Bar"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MyNS__A[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       1,   14, // methods
       0,    0, // properties
       1,   22, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    1,   19,    2, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Int, 0x80000000 | 3,    4,

 // enums: name, flags, count, data
       5, 0x0,    2,   26,

 // enum data: key, value
       6, uint(MyNS::A::Foo),
       7, uint(MyNS::A::Bar),

       0        // eod
};

void MyNS::A::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        A *_t = static_cast<A *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: { int _r = _t->slotTakingScopedEnumArg((*reinterpret_cast< MyNS::A::Type(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    }
}

const QMetaObject MyNS::A::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_MyNS__A.data,
      qt_meta_data_MyNS__A,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *MyNS::A::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyNS::A::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MyNS__A.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MyNS::A::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 1;
    }
    return _id;
}
struct qt_meta_stringdata_MyQObject_t {
    QByteArrayData data[125];
    char stringdata0[2311];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MyQObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MyQObject_t qt_meta_stringdata_MyQObject = {
    {
QT_MOC_LITERAL(0, 0, 9), // "MyQObject"
QT_MOC_LITERAL(1, 10, 8), // "mySignal"
QT_MOC_LITERAL(2, 19, 0), // ""
QT_MOC_LITERAL(3, 20, 18), // "mySignalWithIntArg"
QT_MOC_LITERAL(4, 39, 3), // "arg"
QT_MOC_LITERAL(5, 43, 21), // "mySignalWithDoubleArg"
QT_MOC_LITERAL(6, 65, 9), // "mySignal2"
QT_MOC_LITERAL(7, 75, 18), // "myOverloadedSignal"
QT_MOC_LITERAL(8, 94, 23), // "myOtherOverloadedSignal"
QT_MOC_LITERAL(9, 118, 22), // "mySignalWithDefaultArg"
QT_MOC_LITERAL(10, 141, 22), // "mySignalWithVariantArg"
QT_MOC_LITERAL(11, 164, 27), // "mySignalWithScriptEngineArg"
QT_MOC_LITERAL(12, 192, 14), // "QScriptEngine*"
QT_MOC_LITERAL(13, 207, 6), // "mySlot"
QT_MOC_LITERAL(14, 214, 16), // "mySlotWithIntArg"
QT_MOC_LITERAL(15, 231, 19), // "mySlotWithDoubleArg"
QT_MOC_LITERAL(16, 251, 19), // "mySlotWithStringArg"
QT_MOC_LITERAL(17, 271, 16), // "myOverloadedSlot"
QT_MOC_LITERAL(18, 288, 13), // "myVirtualSlot"
QT_MOC_LITERAL(19, 302, 12), // "qscript_call"
QT_MOC_LITERAL(20, 315, 15), // "myProtectedSlot"
QT_MOC_LITERAL(21, 331, 13), // "myPrivateSlot"
QT_MOC_LITERAL(22, 345, 16), // "setBrushProperty"
QT_MOC_LITERAL(23, 362, 5), // "value"
QT_MOC_LITERAL(24, 368, 11), // "myInvokable"
QT_MOC_LITERAL(25, 380, 21), // "myInvokableWithIntArg"
QT_MOC_LITERAL(26, 402, 26), // "myInvokableWithLonglongArg"
QT_MOC_LITERAL(27, 429, 23), // "myInvokableWithFloatArg"
QT_MOC_LITERAL(28, 453, 24), // "myInvokableWithDoubleArg"
QT_MOC_LITERAL(29, 478, 24), // "myInvokableWithStringArg"
QT_MOC_LITERAL(30, 503, 22), // "myInvokableWithIntArgs"
QT_MOC_LITERAL(31, 526, 4), // "arg1"
QT_MOC_LITERAL(32, 531, 4), // "arg2"
QT_MOC_LITERAL(33, 536, 23), // "myInvokableReturningInt"
QT_MOC_LITERAL(34, 560, 28), // "myInvokableReturningLongLong"
QT_MOC_LITERAL(35, 589, 26), // "myInvokableReturningString"
QT_MOC_LITERAL(36, 616, 27), // "myInvokableReturningVariant"
QT_MOC_LITERAL(37, 644, 31), // "myInvokableReturningScriptValue"
QT_MOC_LITERAL(38, 676, 12), // "QScriptValue"
QT_MOC_LITERAL(39, 689, 22), // "myInvokableWithEnumArg"
QT_MOC_LITERAL(40, 712, 6), // "Policy"
QT_MOC_LITERAL(41, 719, 6), // "policy"
QT_MOC_LITERAL(42, 726, 31), // "myInvokableWithQualifiedEnumArg"
QT_MOC_LITERAL(43, 758, 17), // "MyQObject::Policy"
QT_MOC_LITERAL(44, 776, 24), // "myInvokableReturningEnum"
QT_MOC_LITERAL(45, 801, 33), // "myInvokableReturningQualified..."
QT_MOC_LITERAL(46, 835, 19), // "MyQObject::Strategy"
QT_MOC_LITERAL(47, 855, 31), // "myInvokableReturningVectorOfInt"
QT_MOC_LITERAL(48, 887, 12), // "QVector<int>"
QT_MOC_LITERAL(49, 900, 29), // "myInvokableWithVectorOfIntArg"
QT_MOC_LITERAL(50, 930, 31), // "myInvokableReturningQObjectStar"
QT_MOC_LITERAL(51, 962, 29), // "myInvokableWithQObjectListArg"
QT_MOC_LITERAL(52, 992, 11), // "QObjectList"
QT_MOC_LITERAL(53, 1004, 3), // "lst"
QT_MOC_LITERAL(54, 1008, 25), // "myInvokableWithVariantArg"
QT_MOC_LITERAL(55, 1034, 1), // "v"
QT_MOC_LITERAL(56, 1036, 28), // "myInvokableWithVariantMapArg"
QT_MOC_LITERAL(57, 1065, 2), // "vm"
QT_MOC_LITERAL(58, 1068, 29), // "myInvokableWithVariantListArg"
QT_MOC_LITERAL(59, 1098, 27), // "myInvokableWithListOfIntArg"
QT_MOC_LITERAL(60, 1126, 10), // "QList<int>"
QT_MOC_LITERAL(61, 1137, 29), // "myInvokableWithQObjectStarArg"
QT_MOC_LITERAL(62, 1167, 3), // "obj"
QT_MOC_LITERAL(63, 1171, 24), // "myInvokableWithQBrushArg"
QT_MOC_LITERAL(64, 1196, 5), // "brush"
QT_MOC_LITERAL(65, 1202, 28), // "myInvokableWithBrushStyleArg"
QT_MOC_LITERAL(66, 1231, 14), // "Qt::BrushStyle"
QT_MOC_LITERAL(67, 1246, 5), // "style"
QT_MOC_LITERAL(68, 1252, 26), // "myInvokableWithVoidStarArg"
QT_MOC_LITERAL(69, 1279, 27), // "myInvokableWithAmbiguousArg"
QT_MOC_LITERAL(70, 1307, 26), // "myInvokableWithDefaultArgs"
QT_MOC_LITERAL(71, 1334, 23), // "myInvokableReturningRef"
QT_MOC_LITERAL(72, 1358, 28), // "myInvokableReturningConstRef"
QT_MOC_LITERAL(73, 1387, 23), // "myInvokableWithPointArg"
QT_MOC_LITERAL(74, 1411, 27), // "myInvokableWithMyQObjectArg"
QT_MOC_LITERAL(75, 1439, 10), // "MyQObject*"
QT_MOC_LITERAL(76, 1450, 29), // "myInvokableReturningMyQObject"
QT_MOC_LITERAL(77, 1480, 32), // "myInvokableWithConstMyQObjectArg"
QT_MOC_LITERAL(78, 1513, 16), // "const MyQObject*"
QT_MOC_LITERAL(79, 1530, 22), // "myInvokableWithQDirArg"
QT_MOC_LITERAL(80, 1553, 4), // "QDir"
QT_MOC_LITERAL(81, 1558, 29), // "myInvokableWithScriptValueArg"
QT_MOC_LITERAL(82, 1588, 38), // "myInvokableReturningMyQObject..."
QT_MOC_LITERAL(83, 1627, 23), // "myInvokableWithFlagsArg"
QT_MOC_LITERAL(84, 1651, 7), // "Ability"
QT_MOC_LITERAL(85, 1659, 32), // "myInvokableWithQualifiedFlagsArg"
QT_MOC_LITERAL(86, 1692, 18), // "MyQObject::Ability"
QT_MOC_LITERAL(87, 1711, 29), // "myInvokableWithQWidgetStarArg"
QT_MOC_LITERAL(88, 1741, 8), // "QWidget*"
QT_MOC_LITERAL(89, 1750, 23), // "myInvokableWithShortArg"
QT_MOC_LITERAL(90, 1774, 24), // "myInvokableWithUShortArg"
QT_MOC_LITERAL(91, 1799, 22), // "myInvokableWithCharArg"
QT_MOC_LITERAL(92, 1822, 23), // "myInvokableWithUCharArg"
QT_MOC_LITERAL(93, 1846, 27), // "myInvokableWithULonglongArg"
QT_MOC_LITERAL(94, 1874, 22), // "myInvokableWithLongArg"
QT_MOC_LITERAL(95, 1897, 23), // "myInvokableWithULongArg"
QT_MOC_LITERAL(96, 1921, 11), // "findObjects"
QT_MOC_LITERAL(97, 1933, 18), // "myInvokableNumbers"
QT_MOC_LITERAL(98, 1952, 11), // "intProperty"
QT_MOC_LITERAL(99, 1964, 15), // "variantProperty"
QT_MOC_LITERAL(100, 1980, 19), // "variantListProperty"
QT_MOC_LITERAL(101, 2000, 14), // "stringProperty"
QT_MOC_LITERAL(102, 2015, 18), // "stringListProperty"
QT_MOC_LITERAL(103, 2034, 17), // "byteArrayProperty"
QT_MOC_LITERAL(104, 2052, 13), // "brushProperty"
QT_MOC_LITERAL(105, 2066, 14), // "hiddenProperty"
QT_MOC_LITERAL(106, 2081, 17), // "writeOnlyProperty"
QT_MOC_LITERAL(107, 2099, 16), // "readOnlyProperty"
QT_MOC_LITERAL(108, 2116, 8), // "shortcut"
QT_MOC_LITERAL(109, 2125, 18), // "propWithCustomType"
QT_MOC_LITERAL(110, 2144, 10), // "CustomType"
QT_MOC_LITERAL(111, 2155, 12), // "enumProperty"
QT_MOC_LITERAL(112, 2168, 13), // "flagsProperty"
QT_MOC_LITERAL(113, 2182, 9), // "FooPolicy"
QT_MOC_LITERAL(114, 2192, 9), // "BarPolicy"
QT_MOC_LITERAL(115, 2202, 9), // "BazPolicy"
QT_MOC_LITERAL(116, 2212, 8), // "Strategy"
QT_MOC_LITERAL(117, 2221, 11), // "FooStrategy"
QT_MOC_LITERAL(118, 2233, 11), // "BarStrategy"
QT_MOC_LITERAL(119, 2245, 11), // "BazStrategy"
QT_MOC_LITERAL(120, 2257, 9), // "NoAbility"
QT_MOC_LITERAL(121, 2267, 10), // "FooAbility"
QT_MOC_LITERAL(122, 2278, 10), // "BarAbility"
QT_MOC_LITERAL(123, 2289, 10), // "BazAbility"
QT_MOC_LITERAL(124, 2300, 10) // "AllAbility"

    },
    "MyQObject\0mySignal\0\0mySignalWithIntArg\0"
    "arg\0mySignalWithDoubleArg\0mySignal2\0"
    "myOverloadedSignal\0myOtherOverloadedSignal\0"
    "mySignalWithDefaultArg\0mySignalWithVariantArg\0"
    "mySignalWithScriptEngineArg\0QScriptEngine*\0"
    "mySlot\0mySlotWithIntArg\0mySlotWithDoubleArg\0"
    "mySlotWithStringArg\0myOverloadedSlot\0"
    "myVirtualSlot\0qscript_call\0myProtectedSlot\0"
    "myPrivateSlot\0setBrushProperty\0value\0"
    "myInvokable\0myInvokableWithIntArg\0"
    "myInvokableWithLonglongArg\0"
    "myInvokableWithFloatArg\0"
    "myInvokableWithDoubleArg\0"
    "myInvokableWithStringArg\0"
    "myInvokableWithIntArgs\0arg1\0arg2\0"
    "myInvokableReturningInt\0"
    "myInvokableReturningLongLong\0"
    "myInvokableReturningString\0"
    "myInvokableReturningVariant\0"
    "myInvokableReturningScriptValue\0"
    "QScriptValue\0myInvokableWithEnumArg\0"
    "Policy\0policy\0myInvokableWithQualifiedEnumArg\0"
    "MyQObject::Policy\0myInvokableReturningEnum\0"
    "myInvokableReturningQualifiedEnum\0"
    "MyQObject::Strategy\0myInvokableReturningVectorOfInt\0"
    "QVector<int>\0myInvokableWithVectorOfIntArg\0"
    "myInvokableReturningQObjectStar\0"
    "myInvokableWithQObjectListArg\0QObjectList\0"
    "lst\0myInvokableWithVariantArg\0v\0"
    "myInvokableWithVariantMapArg\0vm\0"
    "myInvokableWithVariantListArg\0"
    "myInvokableWithListOfIntArg\0QList<int>\0"
    "myInvokableWithQObjectStarArg\0obj\0"
    "myInvokableWithQBrushArg\0brush\0"
    "myInvokableWithBrushStyleArg\0"
    "Qt::BrushStyle\0style\0myInvokableWithVoidStarArg\0"
    "myInvokableWithAmbiguousArg\0"
    "myInvokableWithDefaultArgs\0"
    "myInvokableReturningRef\0"
    "myInvokableReturningConstRef\0"
    "myInvokableWithPointArg\0"
    "myInvokableWithMyQObjectArg\0MyQObject*\0"
    "myInvokableReturningMyQObject\0"
    "myInvokableWithConstMyQObjectArg\0"
    "const MyQObject*\0myInvokableWithQDirArg\0"
    "QDir\0myInvokableWithScriptValueArg\0"
    "myInvokableReturningMyQObjectAsQObject\0"
    "myInvokableWithFlagsArg\0Ability\0"
    "myInvokableWithQualifiedFlagsArg\0"
    "MyQObject::Ability\0myInvokableWithQWidgetStarArg\0"
    "QWidget*\0myInvokableWithShortArg\0"
    "myInvokableWithUShortArg\0"
    "myInvokableWithCharArg\0myInvokableWithUCharArg\0"
    "myInvokableWithULonglongArg\0"
    "myInvokableWithLongArg\0myInvokableWithULongArg\0"
    "findObjects\0myInvokableNumbers\0"
    "intProperty\0variantProperty\0"
    "variantListProperty\0stringProperty\0"
    "stringListProperty\0byteArrayProperty\0"
    "brushProperty\0hiddenProperty\0"
    "writeOnlyProperty\0readOnlyProperty\0"
    "shortcut\0propWithCustomType\0CustomType\0"
    "enumProperty\0flagsProperty\0FooPolicy\0"
    "BarPolicy\0BazPolicy\0Strategy\0FooStrategy\0"
    "BarStrategy\0BazStrategy\0NoAbility\0"
    "FooAbility\0BarAbility\0BazAbility\0"
    "AllAbility"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MyQObject[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      92,   14, // methods
      14,  710, // properties
       3,  752, // enums/sets
       0,    0, // constructors
       0,       // flags
      13,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,  474,    2, 0x06 /* Public */,
       3,    1,  475,    2, 0x06 /* Public */,
       5,    1,  478,    2, 0x06 /* Public */,
       6,    1,  481,    2, 0x06 /* Public */,
       6,    0,  484,    2, 0x26 /* Public | MethodCloned */,
       7,    1,  485,    2, 0x06 /* Public */,
       7,    1,  488,    2, 0x06 /* Public */,
       8,    1,  491,    2, 0x06 /* Public */,
       8,    1,  494,    2, 0x06 /* Public */,
       9,    1,  497,    2, 0x06 /* Public */,
       9,    0,  500,    2, 0x26 /* Public | MethodCloned */,
      10,    1,  501,    2, 0x06 /* Public */,
      11,    1,  504,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
      13,    0,  507,    2, 0x0a /* Public */,
      14,    1,  508,    2, 0x0a /* Public */,
      15,    1,  511,    2, 0x0a /* Public */,
      16,    1,  514,    2, 0x0a /* Public */,
      17,    0,  517,    2, 0x0a /* Public */,
      17,    1,  518,    2, 0x0a /* Public */,
      17,    1,  521,    2, 0x0a /* Public */,
      17,    1,  524,    2, 0x0a /* Public */,
      17,    1,  527,    2, 0x0a /* Public */,
      17,    1,  530,    2, 0x0a /* Public */,
      17,    1,  533,    2, 0x0a /* Public */,
      17,    1,  536,    2, 0x0a /* Public */,
      17,    1,  539,    2, 0x0a /* Public */,
      17,    1,  542,    2, 0x0a /* Public */,
      17,    1,  545,    2, 0x0a /* Public */,
      17,    1,  548,    2, 0x0a /* Public */,
      17,    1,  551,    2, 0x0a /* Public */,
      17,    1,  554,    2, 0x0a /* Public */,
      17,    1,  557,    2, 0x0a /* Public */,
      18,    1,  560,    2, 0x0a /* Public */,
      19,    1,  563,    2, 0x0a /* Public */,
      20,    0,  566,    2, 0x09 /* Protected */,
      21,    0,  567,    2, 0x08 /* Private */,

 // methods: name, argc, parameters, tag, flags
      22,    1,  568,    2, 0x02 /* Public */,
      24,    0,  571,    2, 0x02 /* Public */,
      25,    1,  572,    2, 0x02 /* Public */,
      26,    1,  575,    2, 0x02 /* Public */,
      27,    1,  578,    2, 0x02 /* Public */,
      28,    1,  581,    2, 0x02 /* Public */,
      29,    1,  584,    2, 0x02 /* Public */,
      30,    2,  587,    2, 0x02 /* Public */,
      33,    0,  592,    2, 0x02 /* Public */,
      34,    0,  593,    2, 0x02 /* Public */,
      35,    0,  594,    2, 0x02 /* Public */,
      36,    0,  595,    2, 0x02 /* Public */,
      37,    0,  596,    2, 0x02 /* Public */,
      25,    2,  597,    2, 0x02 /* Public */,
      39,    1,  602,    2, 0x02 /* Public */,
      42,    1,  605,    2, 0x02 /* Public */,
      44,    0,  608,    2, 0x02 /* Public */,
      45,    0,  609,    2, 0x02 /* Public */,
      47,    0,  610,    2, 0x02 /* Public */,
      49,    1,  611,    2, 0x02 /* Public */,
      50,    0,  614,    2, 0x02 /* Public */,
      51,    1,  615,    2, 0x02 /* Public */,
      54,    1,  618,    2, 0x02 /* Public */,
      56,    1,  621,    2, 0x02 /* Public */,
      58,    1,  624,    2, 0x02 /* Public */,
      59,    1,  627,    2, 0x02 /* Public */,
      61,    1,  630,    2, 0x02 /* Public */,
      63,    1,  633,    2, 0x02 /* Public */,
      65,    1,  636,    2, 0x02 /* Public */,
      68,    1,  639,    2, 0x02 /* Public */,
      69,    1,  642,    2, 0x02 /* Public */,
      69,    1,  645,    2, 0x02 /* Public */,
      70,    2,  648,    2, 0x02 /* Public */,
      70,    1,  653,    2, 0x22 /* Public | MethodCloned */,
      71,    0,  656,    2, 0x02 /* Public */,
      72,    0,  657,    2, 0x02 /* Public */,
      73,    1,  658,    2, 0x02 /* Public */,
      73,    1,  661,    2, 0x02 /* Public */,
      74,    1,  664,    2, 0x02 /* Public */,
      76,    0,  667,    2, 0x02 /* Public */,
      77,    1,  668,    2, 0x02 /* Public */,
      79,    1,  671,    2, 0x02 /* Public */,
      81,    1,  674,    2, 0x02 /* Public */,
      82,    0,  677,    2, 0x02 /* Public */,
      83,    1,  678,    2, 0x02 /* Public */,
      85,    1,  681,    2, 0x02 /* Public */,
      87,    1,  684,    2, 0x02 /* Public */,
      89,    1,  687,    2, 0x02 /* Public */,
      90,    1,  690,    2, 0x02 /* Public */,
      91,    1,  693,    2, 0x02 /* Public */,
      92,    1,  696,    2, 0x02 /* Public */,
      93,    1,  699,    2, 0x02 /* Public */,
      94,    1,  702,    2, 0x02 /* Public */,
      95,    1,  705,    2, 0x02 /* Public */,
      96,    0,  708,    2, 0x02 /* Public */,
      97,    0,  709,    2, 0x02 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::Double,    4,
    QMetaType::Void, QMetaType::Bool,    4,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QVariant,    4,
    QMetaType::Void, 0x80000000 | 12,    4,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::Double,    4,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QObjectStar,    4,
    QMetaType::Void, QMetaType::Bool,    4,
    QMetaType::Void, QMetaType::QStringList,    4,
    QMetaType::Void, QMetaType::Double,    4,
    QMetaType::Void, QMetaType::Float,    4,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void, QMetaType::QColor,    4,
    QMetaType::Void, QMetaType::QBrush,    4,
    QMetaType::Void, QMetaType::QDateTime,    4,
    QMetaType::Void, QMetaType::QDate,    4,
    QMetaType::Void, QMetaType::QTime,    4,
    QMetaType::Void, QMetaType::QRegExp,    4,
    QMetaType::Void, QMetaType::QVariant,    4,
    QMetaType::Int, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void,
    QMetaType::Void,

 // methods: parameters
    QMetaType::Void, QMetaType::QBrush,   23,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::LongLong,    4,
    QMetaType::Void, QMetaType::Float,    4,
    QMetaType::Void, QMetaType::Double,    4,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void, QMetaType::Int, QMetaType::Int,   31,   32,
    QMetaType::Int,
    QMetaType::LongLong,
    QMetaType::QString,
    QMetaType::QVariant,
    0x80000000 | 38,
    QMetaType::Void, QMetaType::Int, QMetaType::Int,   31,   32,
    QMetaType::Void, 0x80000000 | 40,   41,
    QMetaType::Void, 0x80000000 | 43,   41,
    0x80000000 | 40,
    0x80000000 | 46,
    0x80000000 | 48,
    QMetaType::Void, 0x80000000 | 48,    2,
    QMetaType::QObjectStar,
    0x80000000 | 52, 0x80000000 | 52,   53,
    QMetaType::QVariant, QMetaType::QVariant,   55,
    QMetaType::QVariantMap, QMetaType::QVariantMap,   57,
    QMetaType::QVariantList, QMetaType::QVariantList,   53,
    0x80000000 | 60, 0x80000000 | 60,   53,
    QMetaType::QObjectStar, QMetaType::QObjectStar,   62,
    QMetaType::QBrush, QMetaType::QBrush,   64,
    QMetaType::Void, 0x80000000 | 66,   67,
    QMetaType::Void, QMetaType::VoidStar,    4,
    QMetaType::Void, QMetaType::Int,    4,
    QMetaType::Void, QMetaType::UInt,    4,
    QMetaType::Void, QMetaType::Int, QMetaType::QString,   31,   32,
    QMetaType::Void, QMetaType::Int,   31,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QPoint,    4,
    QMetaType::Void, QMetaType::QPointF,    4,
    QMetaType::Void, 0x80000000 | 75,    4,
    0x80000000 | 75,
    QMetaType::Void, 0x80000000 | 78,    4,
    QMetaType::Void, 0x80000000 | 80,    4,
    0x80000000 | 38, 0x80000000 | 38,    4,
    QMetaType::QObjectStar,
    0x80000000 | 84, 0x80000000 | 84,    4,
    0x80000000 | 86, 0x80000000 | 86,    4,
    0x80000000 | 88, 0x80000000 | 88,    4,
    QMetaType::Short, QMetaType::Short,    4,
    QMetaType::UShort, QMetaType::UShort,    4,
    QMetaType::Char, QMetaType::Char,    4,
    QMetaType::UChar, QMetaType::UChar,    4,
    QMetaType::ULongLong, QMetaType::ULongLong,    4,
    QMetaType::Long, QMetaType::Long,    4,
    QMetaType::ULong, QMetaType::ULong,    4,
    0x80000000 | 52,
    0x80000000 | 60,

 // properties: name, type, flags
      98, QMetaType::Int, 0x00095103,
      99, QMetaType::QVariant, 0x00095103,
     100, QMetaType::QVariantList, 0x00095103,
     101, QMetaType::QString, 0x00095103,
     102, QMetaType::QStringList, 0x00095103,
     103, QMetaType::QByteArray, 0x00095103,
     104, QMetaType::QBrush, 0x00095103,
     105, QMetaType::Double, 0x00091103,
     106, QMetaType::Int, 0x00095102,
     107, QMetaType::Int, 0x00095001,
     108, QMetaType::QKeySequence, 0x00095103,
     109, 0x80000000 | 110, 0x0009510b,
     111, 0x80000000 | 40, 0x0009510b,
     112, 0x80000000 | 84, 0x0009510b,

 // enums: name, flags, count, data
      40, 0x0,    3,  764,
     116, 0x0,    3,  770,
      84, 0x1,    5,  776,

 // enum data: key, value
     113, uint(MyQObject::FooPolicy),
     114, uint(MyQObject::BarPolicy),
     115, uint(MyQObject::BazPolicy),
     117, uint(MyQObject::FooStrategy),
     118, uint(MyQObject::BarStrategy),
     119, uint(MyQObject::BazStrategy),
     120, uint(MyQObject::NoAbility),
     121, uint(MyQObject::FooAbility),
     122, uint(MyQObject::BarAbility),
     123, uint(MyQObject::BazAbility),
     124, uint(MyQObject::AllAbility),

       0        // eod
};

void MyQObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        MyQObject *_t = static_cast<MyQObject *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->mySignal(); break;
        case 1: _t->mySignalWithIntArg((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 2: _t->mySignalWithDoubleArg((*reinterpret_cast< double(*)>(_a[1]))); break;
        case 3: _t->mySignal2((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 4: _t->mySignal2(); break;
        case 5: _t->myOverloadedSignal((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 6: _t->myOverloadedSignal((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 7: _t->myOtherOverloadedSignal((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 8: _t->myOtherOverloadedSignal((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 9: _t->mySignalWithDefaultArg((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 10: _t->mySignalWithDefaultArg(); break;
        case 11: _t->mySignalWithVariantArg((*reinterpret_cast< const QVariant(*)>(_a[1]))); break;
        case 12: _t->mySignalWithScriptEngineArg((*reinterpret_cast< QScriptEngine*(*)>(_a[1]))); break;
        case 13: _t->mySlot(); break;
        case 14: _t->mySlotWithIntArg((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 15: _t->mySlotWithDoubleArg((*reinterpret_cast< double(*)>(_a[1]))); break;
        case 16: _t->mySlotWithStringArg((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 17: _t->myOverloadedSlot(); break;
        case 18: _t->myOverloadedSlot((*reinterpret_cast< QObject*(*)>(_a[1]))); break;
        case 19: _t->myOverloadedSlot((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 20: _t->myOverloadedSlot((*reinterpret_cast< const QStringList(*)>(_a[1]))); break;
        case 21: _t->myOverloadedSlot((*reinterpret_cast< double(*)>(_a[1]))); break;
        case 22: _t->myOverloadedSlot((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 23: _t->myOverloadedSlot((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 24: _t->myOverloadedSlot((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 25: _t->myOverloadedSlot((*reinterpret_cast< const QColor(*)>(_a[1]))); break;
        case 26: _t->myOverloadedSlot((*reinterpret_cast< const QBrush(*)>(_a[1]))); break;
        case 27: _t->myOverloadedSlot((*reinterpret_cast< const QDateTime(*)>(_a[1]))); break;
        case 28: _t->myOverloadedSlot((*reinterpret_cast< const QDate(*)>(_a[1]))); break;
        case 29: _t->myOverloadedSlot((*reinterpret_cast< const QTime(*)>(_a[1]))); break;
        case 30: _t->myOverloadedSlot((*reinterpret_cast< const QRegExp(*)>(_a[1]))); break;
        case 31: _t->myOverloadedSlot((*reinterpret_cast< const QVariant(*)>(_a[1]))); break;
        case 32: { int _r = _t->myVirtualSlot((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = std::move(_r); }  break;
        case 33: _t->qscript_call((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 34: _t->myProtectedSlot(); break;
        case 35: _t->myPrivateSlot(); break;
        case 36: _t->setBrushProperty((*reinterpret_cast< const QBrush(*)>(_a[1]))); break;
        case 37: _t->myInvokable(); break;
        case 38: _t->myInvokableWithIntArg((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 39: _t->myInvokableWithLonglongArg((*reinterpret_cast< qlonglong(*)>(_a[1]))); break;
        case 40: _t->myInvokableWithFloatArg((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 41: _t->myInvokableWithDoubleArg((*reinterpret_cast< double(*)>(_a[1]))); break;
        case 42: _t->myInvokableWithStringArg((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 43: _t->myInvokableWithIntArgs((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2]))); break;
        case 44: { int _r = _t->myInvokableReturningInt();
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = std::move(_r); }  break;
        case 45: { qlonglong _r = _t->myInvokableReturningLongLong();
            if (_a[0]) *reinterpret_cast< qlonglong*>(_a[0]) = std::move(_r); }  break;
        case 46: { QString _r = _t->myInvokableReturningString();
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 47: { QVariant _r = _t->myInvokableReturningVariant();
            if (_a[0]) *reinterpret_cast< QVariant*>(_a[0]) = std::move(_r); }  break;
        case 48: { QScriptValue _r = _t->myInvokableReturningScriptValue();
            if (_a[0]) *reinterpret_cast< QScriptValue*>(_a[0]) = std::move(_r); }  break;
        case 49: _t->myInvokableWithIntArg((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2]))); break;
        case 50: _t->myInvokableWithEnumArg((*reinterpret_cast< Policy(*)>(_a[1]))); break;
        case 51: _t->myInvokableWithQualifiedEnumArg((*reinterpret_cast< MyQObject::Policy(*)>(_a[1]))); break;
        case 52: { Policy _r = _t->myInvokableReturningEnum();
            if (_a[0]) *reinterpret_cast< Policy*>(_a[0]) = std::move(_r); }  break;
        case 53: { MyQObject::Strategy _r = _t->myInvokableReturningQualifiedEnum();
            if (_a[0]) *reinterpret_cast< MyQObject::Strategy*>(_a[0]) = std::move(_r); }  break;
        case 54: { QVector<int> _r = _t->myInvokableReturningVectorOfInt();
            if (_a[0]) *reinterpret_cast< QVector<int>*>(_a[0]) = std::move(_r); }  break;
        case 55: _t->myInvokableWithVectorOfIntArg((*reinterpret_cast< const QVector<int>(*)>(_a[1]))); break;
        case 56: { QObject* _r = _t->myInvokableReturningQObjectStar();
            if (_a[0]) *reinterpret_cast< QObject**>(_a[0]) = std::move(_r); }  break;
        case 57: { QObjectList _r = _t->myInvokableWithQObjectListArg((*reinterpret_cast< const QObjectList(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QObjectList*>(_a[0]) = std::move(_r); }  break;
        case 58: { QVariant _r = _t->myInvokableWithVariantArg((*reinterpret_cast< const QVariant(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QVariant*>(_a[0]) = std::move(_r); }  break;
        case 59: { QVariantMap _r = _t->myInvokableWithVariantMapArg((*reinterpret_cast< const QVariantMap(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QVariantMap*>(_a[0]) = std::move(_r); }  break;
        case 60: { QVariantList _r = _t->myInvokableWithVariantListArg((*reinterpret_cast< const QVariantList(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QVariantList*>(_a[0]) = std::move(_r); }  break;
        case 61: { QList<int> _r = _t->myInvokableWithListOfIntArg((*reinterpret_cast< const QList<int>(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QList<int>*>(_a[0]) = std::move(_r); }  break;
        case 62: { QObject* _r = _t->myInvokableWithQObjectStarArg((*reinterpret_cast< QObject*(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QObject**>(_a[0]) = std::move(_r); }  break;
        case 63: { QBrush _r = _t->myInvokableWithQBrushArg((*reinterpret_cast< const QBrush(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QBrush*>(_a[0]) = std::move(_r); }  break;
        case 64: _t->myInvokableWithBrushStyleArg((*reinterpret_cast< Qt::BrushStyle(*)>(_a[1]))); break;
        case 65: _t->myInvokableWithVoidStarArg((*reinterpret_cast< void*(*)>(_a[1]))); break;
        case 66: _t->myInvokableWithAmbiguousArg((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 67: _t->myInvokableWithAmbiguousArg((*reinterpret_cast< uint(*)>(_a[1]))); break;
        case 68: _t->myInvokableWithDefaultArgs((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2]))); break;
        case 69: _t->myInvokableWithDefaultArgs((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 70: _t->myInvokableReturningRef(); break;
        case 71: _t->myInvokableReturningConstRef(); break;
        case 72: _t->myInvokableWithPointArg((*reinterpret_cast< const QPoint(*)>(_a[1]))); break;
        case 73: _t->myInvokableWithPointArg((*reinterpret_cast< const QPointF(*)>(_a[1]))); break;
        case 74: _t->myInvokableWithMyQObjectArg((*reinterpret_cast< MyQObject*(*)>(_a[1]))); break;
        case 75: { MyQObject* _r = _t->myInvokableReturningMyQObject();
            if (_a[0]) *reinterpret_cast< MyQObject**>(_a[0]) = std::move(_r); }  break;
        case 76: _t->myInvokableWithConstMyQObjectArg((*reinterpret_cast< const MyQObject*(*)>(_a[1]))); break;
        case 77: _t->myInvokableWithQDirArg((*reinterpret_cast< const QDir(*)>(_a[1]))); break;
        case 78: { QScriptValue _r = _t->myInvokableWithScriptValueArg((*reinterpret_cast< const QScriptValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QScriptValue*>(_a[0]) = std::move(_r); }  break;
        case 79: { QObject* _r = _t->myInvokableReturningMyQObjectAsQObject();
            if (_a[0]) *reinterpret_cast< QObject**>(_a[0]) = std::move(_r); }  break;
        case 80: { Ability _r = _t->myInvokableWithFlagsArg((*reinterpret_cast< Ability(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< Ability*>(_a[0]) = std::move(_r); }  break;
        case 81: { MyQObject::Ability _r = _t->myInvokableWithQualifiedFlagsArg((*reinterpret_cast< MyQObject::Ability(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< MyQObject::Ability*>(_a[0]) = std::move(_r); }  break;
        case 82: { QWidget* _r = _t->myInvokableWithQWidgetStarArg((*reinterpret_cast< QWidget*(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QWidget**>(_a[0]) = std::move(_r); }  break;
        case 83: { short _r = _t->myInvokableWithShortArg((*reinterpret_cast< short(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< short*>(_a[0]) = std::move(_r); }  break;
        case 84: { unsigned short _r = _t->myInvokableWithUShortArg((*reinterpret_cast< unsigned short(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< unsigned short*>(_a[0]) = std::move(_r); }  break;
        case 85: { char _r = _t->myInvokableWithCharArg((*reinterpret_cast< char(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< char*>(_a[0]) = std::move(_r); }  break;
        case 86: { unsigned char _r = _t->myInvokableWithUCharArg((*reinterpret_cast< unsigned char(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< unsigned char*>(_a[0]) = std::move(_r); }  break;
        case 87: { qulonglong _r = _t->myInvokableWithULonglongArg((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< qulonglong*>(_a[0]) = std::move(_r); }  break;
        case 88: { long _r = _t->myInvokableWithLongArg((*reinterpret_cast< long(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< long*>(_a[0]) = std::move(_r); }  break;
        case 89: { ulong _r = _t->myInvokableWithULongArg((*reinterpret_cast< ulong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< ulong*>(_a[0]) = std::move(_r); }  break;
        case 90: { QObjectList _r = _t->findObjects();
            if (_a[0]) *reinterpret_cast< QObjectList*>(_a[0]) = std::move(_r); }  break;
        case 91: { QList<int> _r = _t->myInvokableNumbers();
            if (_a[0]) *reinterpret_cast< QList<int>*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        switch (_id) {
        default: *reinterpret_cast<int*>(_a[0]) = -1; break;
        case 12:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QScriptEngine* >(); break;
            }
            break;
        case 51:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< MyQObject::Policy >(); break;
            }
            break;
        case 55:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QVector<int> >(); break;
            }
            break;
        case 57:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QObjectList >(); break;
            }
            break;
        case 61:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QList<int> >(); break;
            }
            break;
        case 64:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< Qt::BrushStyle >(); break;
            }
            break;
        case 74:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< MyQObject* >(); break;
            }
            break;
        case 77:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QDir >(); break;
            }
            break;
        case 82:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QWidget* >(); break;
            }
            break;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (MyQObject::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignal)) {
                *result = 0;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(int );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignalWithIntArg)) {
                *result = 1;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(double );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignalWithDoubleArg)) {
                *result = 2;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(bool );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignal2)) {
                *result = 3;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(int );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::myOverloadedSignal)) {
                *result = 5;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(const QString & );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::myOverloadedSignal)) {
                *result = 6;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(const QString & );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::myOtherOverloadedSignal)) {
                *result = 7;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(int );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::myOtherOverloadedSignal)) {
                *result = 8;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(int );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignalWithDefaultArg)) {
                *result = 9;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(const QVariant & );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignalWithVariantArg)) {
                *result = 11;
                return;
            }
        }
        {
            typedef void (MyQObject::*_t)(QScriptEngine * );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyQObject::mySignalWithScriptEngineArg)) {
                *result = 12;
                return;
            }
        }
    } else if (_c == QMetaObject::RegisterPropertyMetaType) {
        switch (_id) {
        default: *reinterpret_cast<int*>(_a[0]) = -1; break;
        case 11:
            *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< CustomType >(); break;
        }
    }

#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        MyQObject *_t = static_cast<MyQObject *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< int*>(_v) = _t->intProperty(); break;
        case 1: *reinterpret_cast< QVariant*>(_v) = _t->variantProperty(); break;
        case 2: *reinterpret_cast< QVariantList*>(_v) = _t->variantListProperty(); break;
        case 3: *reinterpret_cast< QString*>(_v) = _t->stringProperty(); break;
        case 4: *reinterpret_cast< QStringList*>(_v) = _t->stringListProperty(); break;
        case 5: *reinterpret_cast< QByteArray*>(_v) = _t->byteArrayProperty(); break;
        case 6: *reinterpret_cast< QBrush*>(_v) = _t->brushProperty(); break;
        case 7: *reinterpret_cast< double*>(_v) = _t->hiddenProperty(); break;
        case 9: *reinterpret_cast< int*>(_v) = _t->readOnlyProperty(); break;
        case 10: *reinterpret_cast< QKeySequence*>(_v) = _t->shortcut(); break;
        case 11: *reinterpret_cast< CustomType*>(_v) = _t->propWithCustomType(); break;
        case 12: *reinterpret_cast< Policy*>(_v) = _t->enumProperty(); break;
        case 13: *reinterpret_cast<int*>(_v) = QFlag(_t->flagsProperty()); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        MyQObject *_t = static_cast<MyQObject *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setIntProperty(*reinterpret_cast< int*>(_v)); break;
        case 1: _t->setVariantProperty(*reinterpret_cast< QVariant*>(_v)); break;
        case 2: _t->setVariantListProperty(*reinterpret_cast< QVariantList*>(_v)); break;
        case 3: _t->setStringProperty(*reinterpret_cast< QString*>(_v)); break;
        case 4: _t->setStringListProperty(*reinterpret_cast< QStringList*>(_v)); break;
        case 5: _t->setByteArrayProperty(*reinterpret_cast< QByteArray*>(_v)); break;
        case 6: _t->setBrushProperty(*reinterpret_cast< QBrush*>(_v)); break;
        case 7: _t->setHiddenProperty(*reinterpret_cast< double*>(_v)); break;
        case 8: _t->setWriteOnlyProperty(*reinterpret_cast< int*>(_v)); break;
        case 10: _t->setShortcut(*reinterpret_cast< QKeySequence*>(_v)); break;
        case 11: _t->setPropWithCustomType(*reinterpret_cast< CustomType*>(_v)); break;
        case 12: _t->setEnumProperty(*reinterpret_cast< Policy*>(_v)); break;
        case 13: _t->setFlagsProperty(QFlag(*reinterpret_cast<int*>(_v))); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
}

const QMetaObject MyQObject::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_MyQObject.data,
      qt_meta_data_MyQObject,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *MyQObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyQObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MyQObject.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MyQObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 92)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 92;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 92)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 92;
    }
#ifndef QT_NO_PROPERTIES
   else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 14;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 14;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 14;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 14;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 14;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 14;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void MyQObject::mySignal()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void MyQObject::mySignalWithIntArg(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 1, _a);
}

// SIGNAL 2
void MyQObject::mySignalWithDoubleArg(double _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
}

// SIGNAL 3
void MyQObject::mySignal2(bool _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 3, _a);
}

// SIGNAL 5
void MyQObject::myOverloadedSignal(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 5, _a);
}

// SIGNAL 6
void MyQObject::myOverloadedSignal(const QString & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 6, _a);
}

// SIGNAL 7
void MyQObject::myOtherOverloadedSignal(const QString & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 7, _a);
}

// SIGNAL 8
void MyQObject::myOtherOverloadedSignal(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 8, _a);
}

// SIGNAL 9
void MyQObject::mySignalWithDefaultArg(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 9, _a);
}

// SIGNAL 11
void MyQObject::mySignalWithVariantArg(const QVariant & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 11, _a);
}

// SIGNAL 12
void MyQObject::mySignalWithScriptEngineArg(QScriptEngine * _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 12, _a);
}
struct qt_meta_stringdata_MyOtherQObject_t {
    QByteArrayData data[4];
    char stringdata0[34];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MyOtherQObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MyOtherQObject_t qt_meta_stringdata_MyOtherQObject = {
    {
QT_MOC_LITERAL(0, 0, 14), // "MyOtherQObject"
QT_MOC_LITERAL(1, 15, 13), // "myVirtualSlot"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 3) // "arg"

    },
    "MyOtherQObject\0myVirtualSlot\0\0arg"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MyOtherQObject[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       1,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    1,   19,    2, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Int, QMetaType::Int,    3,

       0        // eod
};

void MyOtherQObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        MyOtherQObject *_t = static_cast<MyOtherQObject *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: { int _r = _t->myVirtualSlot((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    }
}

const QMetaObject MyOtherQObject::staticMetaObject = {
    { &MyQObject::staticMetaObject, qt_meta_stringdata_MyOtherQObject.data,
      qt_meta_data_MyOtherQObject,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *MyOtherQObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyOtherQObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MyOtherQObject.stringdata0))
        return static_cast<void*>(this);
    return MyQObject::qt_metacast(_clname);
}

int MyOtherQObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = MyQObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 1;
    }
    return _id;
}
struct qt_meta_stringdata_MyEnumTestQObject_t {
    QByteArrayData data[11];
    char stringdata0[65];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MyEnumTestQObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MyEnumTestQObject_t qt_meta_stringdata_MyEnumTestQObject = {
    {
QT_MOC_LITERAL(0, 0, 17), // "MyEnumTestQObject"
QT_MOC_LITERAL(1, 18, 8), // "mySignal"
QT_MOC_LITERAL(2, 27, 0), // ""
QT_MOC_LITERAL(3, 28, 6), // "mySlot"
QT_MOC_LITERAL(4, 35, 11), // "myOtherSlot"
QT_MOC_LITERAL(5, 47, 2), // "p1"
QT_MOC_LITERAL(6, 50, 2), // "p2"
QT_MOC_LITERAL(7, 53, 2), // "p3"
QT_MOC_LITERAL(8, 56, 2), // "p4"
QT_MOC_LITERAL(9, 59, 2), // "p5"
QT_MOC_LITERAL(10, 62, 2) // "p6"

    },
    "MyEnumTestQObject\0mySignal\0\0mySlot\0"
    "myOtherSlot\0p1\0p2\0p3\0p4\0p5\0p6"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MyEnumTestQObject[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       3,   14, // methods
       6,   32, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   29,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
       3,    0,   30,    2, 0x0a /* Public */,
       4,    0,   31,    2, 0x0a /* Public */,

 // signals: parameters
    QMetaType::Void,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,

 // properties: name, type, flags
       5, QMetaType::QString, 0x00095001,
       6, QMetaType::QString, 0x00095001,
       7, QMetaType::QString, 0x00091001,
       8, QMetaType::QString, 0x00095001,
       9, QMetaType::QString, 0x00091001,
      10, QMetaType::QString, 0x00095001,

       0        // eod
};

void MyEnumTestQObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        MyEnumTestQObject *_t = static_cast<MyEnumTestQObject *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->mySignal(); break;
        case 1: _t->mySlot(); break;
        case 2: _t->myOtherSlot(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (MyEnumTestQObject::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyEnumTestQObject::mySignal)) {
                *result = 0;
                return;
            }
        }
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        MyEnumTestQObject *_t = static_cast<MyEnumTestQObject *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->p1(); break;
        case 1: *reinterpret_cast< QString*>(_v) = _t->p2(); break;
        case 2: *reinterpret_cast< QString*>(_v) = _t->p3(); break;
        case 3: *reinterpret_cast< QString*>(_v) = _t->p4(); break;
        case 4: *reinterpret_cast< QString*>(_v) = _t->p5(); break;
        case 5: *reinterpret_cast< QString*>(_v) = _t->p6(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_a);
}

const QMetaObject MyEnumTestQObject::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_MyEnumTestQObject.data,
      qt_meta_data_MyEnumTestQObject,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *MyEnumTestQObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyEnumTestQObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MyEnumTestQObject.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MyEnumTestQObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 3)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 3;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 3)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 3;
    }
#ifndef QT_NO_PROPERTIES
   else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 6;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void MyEnumTestQObject::mySignal()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
struct qt_meta_stringdata_tst_QScriptExtQObject_t {
    QByteArrayData data[69];
    char stringdata0[1635];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QScriptExtQObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QScriptExtQObject_t qt_meta_stringdata_tst_QScriptExtQObject = {
    {
QT_MOC_LITERAL(0, 0, 21), // "tst_QScriptExtQObject"
QT_MOC_LITERAL(1, 22, 4), // "init"
QT_MOC_LITERAL(2, 27, 0), // ""
QT_MOC_LITERAL(3, 28, 7), // "cleanup"
QT_MOC_LITERAL(4, 36, 24), // "onSignalHandlerException"
QT_MOC_LITERAL(5, 61, 12), // "QScriptValue"
QT_MOC_LITERAL(6, 74, 9), // "exception"
QT_MOC_LITERAL(7, 84, 15), // "registeredTypes"
QT_MOC_LITERAL(8, 100, 20), // "getSetStaticProperty"
QT_MOC_LITERAL(9, 121, 34), // "getSetStaticProperty_property..."
QT_MOC_LITERAL(10, 156, 32), // "getSetStaticProperty_changeInCpp"
QT_MOC_LITERAL(11, 189, 31), // "getSetStaticProperty_changeInJS"
QT_MOC_LITERAL(12, 221, 43), // "getSetStaticProperty_compatib..."
QT_MOC_LITERAL(13, 265, 31), // "getSetStaticProperty_conversion"
QT_MOC_LITERAL(14, 297, 27), // "getSetStaticProperty_delete"
QT_MOC_LITERAL(15, 325, 34), // "getSetStaticProperty_nonScrip..."
QT_MOC_LITERAL(16, 360, 30), // "getSetStaticProperty_writeOnly"
QT_MOC_LITERAL(17, 391, 29), // "getSetStaticProperty_readOnly"
QT_MOC_LITERAL(18, 421, 25), // "getSetStaticProperty_enum"
QT_MOC_LITERAL(19, 447, 27), // "getSetStaticProperty_qflags"
QT_MOC_LITERAL(20, 475, 33), // "getSetStaticProperty_pointerD..."
QT_MOC_LITERAL(21, 509, 39), // "getSetStaticProperty_customGe..."
QT_MOC_LITERAL(22, 549, 38), // "getSetStaticProperty_methodPe..."
QT_MOC_LITERAL(23, 588, 21), // "getSetDynamicProperty"
QT_MOC_LITERAL(24, 610, 35), // "getSetDynamicProperty_deleteF..."
QT_MOC_LITERAL(25, 646, 37), // "getSetDynamicProperty_hideChi..."
QT_MOC_LITERAL(26, 684, 34), // "getSetDynamicProperty_setBefo..."
QT_MOC_LITERAL(27, 719, 41), // "getSetDynamicProperty_doNotHi..."
QT_MOC_LITERAL(28, 761, 14), // "getSetChildren"
QT_MOC_LITERAL(29, 776, 15), // "callQtInvokable"
QT_MOC_LITERAL(30, 792, 16), // "callQtInvokable2"
QT_MOC_LITERAL(31, 809, 16), // "callQtInvokable3"
QT_MOC_LITERAL(32, 826, 16), // "callQtInvokable4"
QT_MOC_LITERAL(33, 843, 16), // "callQtInvokable5"
QT_MOC_LITERAL(34, 860, 16), // "callQtInvokable6"
QT_MOC_LITERAL(35, 877, 16), // "callQtInvokable7"
QT_MOC_LITERAL(36, 894, 20), // "connectAndDisconnect"
QT_MOC_LITERAL(37, 915, 31), // "connectAndDisconnect_emitFromJS"
QT_MOC_LITERAL(38, 947, 43), // "connectAndDisconnect_senderWr..."
QT_MOC_LITERAL(39, 991, 31), // "connectAndDisconnectWithBadArgs"
QT_MOC_LITERAL(40, 1023, 34), // "connectAndDisconnect_senderDe..."
QT_MOC_LITERAL(41, 1058, 23), // "cppConnectAndDisconnect"
QT_MOC_LITERAL(42, 1082, 24), // "cppConnectAndDisconnect2"
QT_MOC_LITERAL(43, 1107, 10), // "classEnums"
QT_MOC_LITERAL(44, 1118, 16), // "classConstructor"
QT_MOC_LITERAL(45, 1135, 17), // "overrideInvokable"
QT_MOC_LITERAL(46, 1153, 17), // "transferInvokable"
QT_MOC_LITERAL(47, 1171, 9), // "findChild"
QT_MOC_LITERAL(48, 1181, 12), // "findChildren"
QT_MOC_LITERAL(49, 1194, 12), // "childObjects"
QT_MOC_LITERAL(50, 1207, 15), // "overloadedSlots"
QT_MOC_LITERAL(51, 1223, 14), // "enumerate_data"
QT_MOC_LITERAL(52, 1238, 9), // "enumerate"
QT_MOC_LITERAL(53, 1248, 16), // "enumerateSpecial"
QT_MOC_LITERAL(54, 1265, 11), // "wrapOptions"
QT_MOC_LITERAL(55, 1277, 10), // "prototypes"
QT_MOC_LITERAL(56, 1288, 13), // "objectDeleted"
QT_MOC_LITERAL(57, 1302, 24), // "connectToDestroyedSignal"
QT_MOC_LITERAL(58, 1327, 24), // "emitAfterReceiverDeleted"
QT_MOC_LITERAL(59, 1352, 14), // "inheritedSlots"
QT_MOC_LITERAL(60, 1367, 19), // "enumerateMetaObject"
QT_MOC_LITERAL(61, 1387, 30), // "nestedArrayAsSlotArgument_data"
QT_MOC_LITERAL(62, 1418, 25), // "nestedArrayAsSlotArgument"
QT_MOC_LITERAL(63, 1444, 31), // "nestedObjectAsSlotArgument_data"
QT_MOC_LITERAL(64, 1476, 26), // "nestedObjectAsSlotArgument"
QT_MOC_LITERAL(65, 1503, 37), // "propertyAccessThroughActivati..."
QT_MOC_LITERAL(66, 1541, 32), // "connectionRemovedAfterQueuedCall"
QT_MOC_LITERAL(67, 1574, 29), // "collectQObjectWithClosureSlot"
QT_MOC_LITERAL(68, 1604, 30) // "collectQObjectWithClosureSlot2"

    },
    "tst_QScriptExtQObject\0init\0\0cleanup\0"
    "onSignalHandlerException\0QScriptValue\0"
    "exception\0registeredTypes\0"
    "getSetStaticProperty\0"
    "getSetStaticProperty_propertyFlags\0"
    "getSetStaticProperty_changeInCpp\0"
    "getSetStaticProperty_changeInJS\0"
    "getSetStaticProperty_compatibleVariantTypes\0"
    "getSetStaticProperty_conversion\0"
    "getSetStaticProperty_delete\0"
    "getSetStaticProperty_nonScriptable\0"
    "getSetStaticProperty_writeOnly\0"
    "getSetStaticProperty_readOnly\0"
    "getSetStaticProperty_enum\0"
    "getSetStaticProperty_qflags\0"
    "getSetStaticProperty_pointerDeref\0"
    "getSetStaticProperty_customGetterSetter\0"
    "getSetStaticProperty_methodPersistence\0"
    "getSetDynamicProperty\0"
    "getSetDynamicProperty_deleteFromCpp\0"
    "getSetDynamicProperty_hideChildObject\0"
    "getSetDynamicProperty_setBeforeGet\0"
    "getSetDynamicProperty_doNotHideJSProperty\0"
    "getSetChildren\0callQtInvokable\0"
    "callQtInvokable2\0callQtInvokable3\0"
    "callQtInvokable4\0callQtInvokable5\0"
    "callQtInvokable6\0callQtInvokable7\0"
    "connectAndDisconnect\0"
    "connectAndDisconnect_emitFromJS\0"
    "connectAndDisconnect_senderWrapperCollected\0"
    "connectAndDisconnectWithBadArgs\0"
    "connectAndDisconnect_senderDeleted\0"
    "cppConnectAndDisconnect\0"
    "cppConnectAndDisconnect2\0classEnums\0"
    "classConstructor\0overrideInvokable\0"
    "transferInvokable\0findChild\0findChildren\0"
    "childObjects\0overloadedSlots\0"
    "enumerate_data\0enumerate\0enumerateSpecial\0"
    "wrapOptions\0prototypes\0objectDeleted\0"
    "connectToDestroyedSignal\0"
    "emitAfterReceiverDeleted\0inheritedSlots\0"
    "enumerateMetaObject\0nestedArrayAsSlotArgument_data\0"
    "nestedArrayAsSlotArgument\0"
    "nestedObjectAsSlotArgument_data\0"
    "nestedObjectAsSlotArgument\0"
    "propertyAccessThroughActivationObject\0"
    "connectionRemovedAfterQueuedCall\0"
    "collectQObjectWithClosureSlot\0"
    "collectQObjectWithClosureSlot2"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QScriptExtQObject[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      65,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  339,    2, 0x0a /* Public */,
       3,    0,  340,    2, 0x0a /* Public */,
       4,    1,  341,    2, 0x09 /* Protected */,
       7,    0,  344,    2, 0x08 /* Private */,
       8,    0,  345,    2, 0x08 /* Private */,
       9,    0,  346,    2, 0x08 /* Private */,
      10,    0,  347,    2, 0x08 /* Private */,
      11,    0,  348,    2, 0x08 /* Private */,
      12,    0,  349,    2, 0x08 /* Private */,
      13,    0,  350,    2, 0x08 /* Private */,
      14,    0,  351,    2, 0x08 /* Private */,
      15,    0,  352,    2, 0x08 /* Private */,
      16,    0,  353,    2, 0x08 /* Private */,
      17,    0,  354,    2, 0x08 /* Private */,
      18,    0,  355,    2, 0x08 /* Private */,
      19,    0,  356,    2, 0x08 /* Private */,
      20,    0,  357,    2, 0x08 /* Private */,
      21,    0,  358,    2, 0x08 /* Private */,
      22,    0,  359,    2, 0x08 /* Private */,
      23,    0,  360,    2, 0x08 /* Private */,
      24,    0,  361,    2, 0x08 /* Private */,
      25,    0,  362,    2, 0x08 /* Private */,
      26,    0,  363,    2, 0x08 /* Private */,
      27,    0,  364,    2, 0x08 /* Private */,
      28,    0,  365,    2, 0x08 /* Private */,
      29,    0,  366,    2, 0x08 /* Private */,
      30,    0,  367,    2, 0x08 /* Private */,
      31,    0,  368,    2, 0x08 /* Private */,
      32,    0,  369,    2, 0x08 /* Private */,
      33,    0,  370,    2, 0x08 /* Private */,
      34,    0,  371,    2, 0x08 /* Private */,
      35,    0,  372,    2, 0x08 /* Private */,
      36,    0,  373,    2, 0x08 /* Private */,
      37,    0,  374,    2, 0x08 /* Private */,
      38,    0,  375,    2, 0x08 /* Private */,
      39,    0,  376,    2, 0x08 /* Private */,
      40,    0,  377,    2, 0x08 /* Private */,
      41,    0,  378,    2, 0x08 /* Private */,
      42,    0,  379,    2, 0x08 /* Private */,
      43,    0,  380,    2, 0x08 /* Private */,
      44,    0,  381,    2, 0x08 /* Private */,
      45,    0,  382,    2, 0x08 /* Private */,
      46,    0,  383,    2, 0x08 /* Private */,
      47,    0,  384,    2, 0x08 /* Private */,
      48,    0,  385,    2, 0x08 /* Private */,
      49,    0,  386,    2, 0x08 /* Private */,
      50,    0,  387,    2, 0x08 /* Private */,
      51,    0,  388,    2, 0x08 /* Private */,
      52,    0,  389,    2, 0x08 /* Private */,
      53,    0,  390,    2, 0x08 /* Private */,
      54,    0,  391,    2, 0x08 /* Private */,
      55,    0,  392,    2, 0x08 /* Private */,
      56,    0,  393,    2, 0x08 /* Private */,
      57,    0,  394,    2, 0x08 /* Private */,
      58,    0,  395,    2, 0x08 /* Private */,
      59,    0,  396,    2, 0x08 /* Private */,
      60,    0,  397,    2, 0x08 /* Private */,
      61,    0,  398,    2, 0x08 /* Private */,
      62,    0,  399,    2, 0x08 /* Private */,
      63,    0,  400,    2, 0x08 /* Private */,
      64,    0,  401,    2, 0x08 /* Private */,
      65,    0,  402,    2, 0x08 /* Private */,
      66,    0,  403,    2, 0x08 /* Private */,
      67,    0,  404,    2, 0x08 /* Private */,
      68,    0,  405,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 5,    6,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QScriptExtQObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_QScriptExtQObject *_t = static_cast<tst_QScriptExtQObject *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->onSignalHandlerException((*reinterpret_cast< const QScriptValue(*)>(_a[1]))); break;
        case 3: _t->registeredTypes(); break;
        case 4: _t->getSetStaticProperty(); break;
        case 5: _t->getSetStaticProperty_propertyFlags(); break;
        case 6: _t->getSetStaticProperty_changeInCpp(); break;
        case 7: _t->getSetStaticProperty_changeInJS(); break;
        case 8: _t->getSetStaticProperty_compatibleVariantTypes(); break;
        case 9: _t->getSetStaticProperty_conversion(); break;
        case 10: _t->getSetStaticProperty_delete(); break;
        case 11: _t->getSetStaticProperty_nonScriptable(); break;
        case 12: _t->getSetStaticProperty_writeOnly(); break;
        case 13: _t->getSetStaticProperty_readOnly(); break;
        case 14: _t->getSetStaticProperty_enum(); break;
        case 15: _t->getSetStaticProperty_qflags(); break;
        case 16: _t->getSetStaticProperty_pointerDeref(); break;
        case 17: _t->getSetStaticProperty_customGetterSetter(); break;
        case 18: _t->getSetStaticProperty_methodPersistence(); break;
        case 19: _t->getSetDynamicProperty(); break;
        case 20: _t->getSetDynamicProperty_deleteFromCpp(); break;
        case 21: _t->getSetDynamicProperty_hideChildObject(); break;
        case 22: _t->getSetDynamicProperty_setBeforeGet(); break;
        case 23: _t->getSetDynamicProperty_doNotHideJSProperty(); break;
        case 24: _t->getSetChildren(); break;
        case 25: _t->callQtInvokable(); break;
        case 26: _t->callQtInvokable2(); break;
        case 27: _t->callQtInvokable3(); break;
        case 28: _t->callQtInvokable4(); break;
        case 29: _t->callQtInvokable5(); break;
        case 30: _t->callQtInvokable6(); break;
        case 31: _t->callQtInvokable7(); break;
        case 32: _t->connectAndDisconnect(); break;
        case 33: _t->connectAndDisconnect_emitFromJS(); break;
        case 34: _t->connectAndDisconnect_senderWrapperCollected(); break;
        case 35: _t->connectAndDisconnectWithBadArgs(); break;
        case 36: _t->connectAndDisconnect_senderDeleted(); break;
        case 37: _t->cppConnectAndDisconnect(); break;
        case 38: _t->cppConnectAndDisconnect2(); break;
        case 39: _t->classEnums(); break;
        case 40: _t->classConstructor(); break;
        case 41: _t->overrideInvokable(); break;
        case 42: _t->transferInvokable(); break;
        case 43: _t->findChild(); break;
        case 44: _t->findChildren(); break;
        case 45: _t->childObjects(); break;
        case 46: _t->overloadedSlots(); break;
        case 47: _t->enumerate_data(); break;
        case 48: _t->enumerate(); break;
        case 49: _t->enumerateSpecial(); break;
        case 50: _t->wrapOptions(); break;
        case 51: _t->prototypes(); break;
        case 52: _t->objectDeleted(); break;
        case 53: _t->connectToDestroyedSignal(); break;
        case 54: _t->emitAfterReceiverDeleted(); break;
        case 55: _t->inheritedSlots(); break;
        case 56: _t->enumerateMetaObject(); break;
        case 57: _t->nestedArrayAsSlotArgument_data(); break;
        case 58: _t->nestedArrayAsSlotArgument(); break;
        case 59: _t->nestedObjectAsSlotArgument_data(); break;
        case 60: _t->nestedObjectAsSlotArgument(); break;
        case 61: _t->propertyAccessThroughActivationObject(); break;
        case 62: _t->connectionRemovedAfterQueuedCall(); break;
        case 63: _t->collectQObjectWithClosureSlot(); break;
        case 64: _t->collectQObjectWithClosureSlot2(); break;
        default: ;
        }
    }
}

const QMetaObject tst_QScriptExtQObject::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_QScriptExtQObject.data,
      qt_meta_data_tst_QScriptExtQObject,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_QScriptExtQObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QScriptExtQObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QScriptExtQObject.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int tst_QScriptExtQObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 65)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 65;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 65)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 65;
    }
    return _id;
}
struct qt_meta_stringdata_ConstructorTest_t {
    QByteArrayData data[5];
    char stringdata0[33];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_ConstructorTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_ConstructorTest_t qt_meta_stringdata_ConstructorTest = {
    {
QT_MOC_LITERAL(0, 0, 15), // "ConstructorTest"
QT_MOC_LITERAL(1, 16, 0), // ""
QT_MOC_LITERAL(2, 17, 6), // "parent"
QT_MOC_LITERAL(3, 24, 3), // "arg"
QT_MOC_LITERAL(4, 28, 4) // "arg2"

    },
    "ConstructorTest\0\0parent\0arg\0arg2"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_ConstructorTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       9,   53, // constructors
       0,       // flags
       0,       // signalCount

 // constructors: parameters
    0x80000000 | 1, QMetaType::QObjectStar,    2,
    0x80000000 | 1, QMetaType::Int, QMetaType::QObjectStar,    3,    2,
    0x80000000 | 1, QMetaType::Int,    3,
    0x80000000 | 1, QMetaType::QString, QMetaType::QObjectStar,    3,    2,
    0x80000000 | 1, QMetaType::QString,    3,
    0x80000000 | 1, QMetaType::Int, QMetaType::QString, QMetaType::QObjectStar,    3,    4,    2,
    0x80000000 | 1, QMetaType::Int, QMetaType::QString,    3,    4,
    0x80000000 | 1, QMetaType::QBrush, QMetaType::QObjectStar,    3,    2,
    0x80000000 | 1, QMetaType::QBrush,    3,

 // constructors: name, argc, parameters, tag, flags
       0,    1,   14,    1, 0x0e /* Public */,
       0,    2,   17,    1, 0x0e /* Public */,
       0,    1,   22,    1, 0x2e /* Public | MethodCloned */,
       0,    2,   25,    1, 0x0e /* Public */,
       0,    1,   30,    1, 0x2e /* Public | MethodCloned */,
       0,    3,   33,    1, 0x0e /* Public */,
       0,    2,   40,    1, 0x2e /* Public | MethodCloned */,
       0,    2,   45,    1, 0x0e /* Public */,
       0,    1,   50,    1, 0x2e /* Public | MethodCloned */,

       0        // eod
};

void ConstructorTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::CreateInstance) {
        switch (_id) {
        case 0: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< QObject*(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 1: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< QObject*(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 2: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 3: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< QObject*(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 4: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 5: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< QObject*(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 6: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 7: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< const QBrush(*)>(_a[1])),(*reinterpret_cast< QObject*(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        case 8: { ConstructorTest *_r = new ConstructorTest((*reinterpret_cast< const QBrush(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        default: break;
        }
    }
    Q_UNUSED(_o);
}

const QMetaObject ConstructorTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_ConstructorTest.data,
      qt_meta_data_ConstructorTest,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *ConstructorTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ConstructorTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_ConstructorTest.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int ConstructorTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    return _id;
}
struct qt_meta_stringdata_SpecialEnumTestObject_t {
    QByteArrayData data[2];
    char stringdata0[33];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_SpecialEnumTestObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_SpecialEnumTestObject_t qt_meta_stringdata_SpecialEnumTestObject = {
    {
QT_MOC_LITERAL(0, 0, 21), // "SpecialEnumTestObject"
QT_MOC_LITERAL(1, 22, 10) // "objectName"

    },
    "SpecialEnumTestObject\0objectName"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_SpecialEnumTestObject[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::QString, 0x00091001,

       0        // eod
};

void SpecialEnumTestObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        SpecialEnumTestObject *_t = static_cast<SpecialEnumTestObject *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->objectName(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject SpecialEnumTestObject::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_SpecialEnumTestObject.data,
      qt_meta_data_SpecialEnumTestObject,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *SpecialEnumTestObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SpecialEnumTestObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_SpecialEnumTestObject.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int SpecialEnumTestObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
   if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
struct qt_meta_stringdata_SpecialEnumTestObject2_t {
    QByteArrayData data[2];
    char stringdata0[34];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_SpecialEnumTestObject2_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_SpecialEnumTestObject2_t qt_meta_stringdata_SpecialEnumTestObject2 = {
    {
QT_MOC_LITERAL(0, 0, 22), // "SpecialEnumTestObject2"
QT_MOC_LITERAL(1, 23, 10) // "objectName"

    },
    "SpecialEnumTestObject2\0objectName"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_SpecialEnumTestObject2[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::QString, 0x00094001,

       0        // eod
};

void SpecialEnumTestObject2::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        SpecialEnumTestObject2 *_t = static_cast<SpecialEnumTestObject2 *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->objectName(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

const QMetaObject SpecialEnumTestObject2::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_SpecialEnumTestObject2.data,
      qt_meta_data_SpecialEnumTestObject2,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *SpecialEnumTestObject2::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SpecialEnumTestObject2::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_SpecialEnumTestObject2.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int SpecialEnumTestObject2::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
   if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
