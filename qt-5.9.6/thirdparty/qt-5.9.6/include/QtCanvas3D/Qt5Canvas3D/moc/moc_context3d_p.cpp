/****************************************************************************
** Meta object code from reading C++ file 'context3d_p.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../5.9.6/QtCanvas3D/private/context3d_p.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'context3d_p.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_QtCanvas3D__CanvasContext_t {
    QByteArrayData data[540];
    char stringdata0[7834];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_QtCanvas3D__CanvasContext_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_QtCanvas3D__CanvasContext_t qt_meta_stringdata_QtCanvas3D__CanvasContext = {
    {
QT_MOC_LITERAL(0, 0, 25), // "QtCanvas3D::CanvasContext"
QT_MOC_LITERAL(1, 26, 13), // "canvasChanged"
QT_MOC_LITERAL(2, 40, 0), // ""
QT_MOC_LITERAL(3, 41, 7), // "Canvas*"
QT_MOC_LITERAL(4, 49, 6), // "canvas"
QT_MOC_LITERAL(5, 56, 25), // "drawingBufferWidthChanged"
QT_MOC_LITERAL(6, 82, 26), // "drawingBufferHeightChanged"
QT_MOC_LITERAL(7, 109, 22), // "handleFullCommandQueue"
QT_MOC_LITERAL(8, 132, 23), // "handleTextureIdResolved"
QT_MOC_LITERAL(9, 156, 11), // "QQuickItem*"
QT_MOC_LITERAL(10, 168, 4), // "item"
QT_MOC_LITERAL(11, 173, 20), // "handleObjectDeletion"
QT_MOC_LITERAL(12, 194, 3), // "obj"
QT_MOC_LITERAL(13, 198, 22), // "getSupportedExtensions"
QT_MOC_LITERAL(14, 221, 12), // "getExtension"
QT_MOC_LITERAL(15, 234, 4), // "name"
QT_MOC_LITERAL(16, 239, 13), // "isContextLost"
QT_MOC_LITERAL(17, 253, 20), // "getContextAttributes"
QT_MOC_LITERAL(18, 274, 8), // "QJSValue"
QT_MOC_LITERAL(19, 283, 24), // "getShaderPrecisionFormat"
QT_MOC_LITERAL(20, 308, 7), // "glEnums"
QT_MOC_LITERAL(21, 316, 10), // "shadertype"
QT_MOC_LITERAL(22, 327, 13), // "precisiontype"
QT_MOC_LITERAL(23, 341, 5), // "flush"
QT_MOC_LITERAL(24, 347, 6), // "finish"
QT_MOC_LITERAL(25, 354, 13), // "createTexture"
QT_MOC_LITERAL(26, 368, 13), // "deleteTexture"
QT_MOC_LITERAL(27, 382, 7), // "texture"
QT_MOC_LITERAL(28, 390, 13), // "activeTexture"
QT_MOC_LITERAL(29, 404, 11), // "bindTexture"
QT_MOC_LITERAL(30, 416, 6), // "target"
QT_MOC_LITERAL(31, 423, 14), // "generateMipmap"
QT_MOC_LITERAL(32, 438, 9), // "isTexture"
QT_MOC_LITERAL(33, 448, 9), // "anyObject"
QT_MOC_LITERAL(34, 458, 20), // "compressedTexImage2D"
QT_MOC_LITERAL(35, 479, 5), // "level"
QT_MOC_LITERAL(36, 485, 14), // "internalformat"
QT_MOC_LITERAL(37, 500, 5), // "width"
QT_MOC_LITERAL(38, 506, 6), // "height"
QT_MOC_LITERAL(39, 513, 6), // "border"
QT_MOC_LITERAL(40, 520, 6), // "pixels"
QT_MOC_LITERAL(41, 527, 23), // "compressedTexSubImage2D"
QT_MOC_LITERAL(42, 551, 7), // "xoffset"
QT_MOC_LITERAL(43, 559, 7), // "yoffset"
QT_MOC_LITERAL(44, 567, 6), // "format"
QT_MOC_LITERAL(45, 574, 14), // "copyTexImage2D"
QT_MOC_LITERAL(46, 589, 1), // "x"
QT_MOC_LITERAL(47, 591, 1), // "y"
QT_MOC_LITERAL(48, 593, 17), // "copyTexSubImage2D"
QT_MOC_LITERAL(49, 611, 10), // "texImage2D"
QT_MOC_LITERAL(50, 622, 4), // "type"
QT_MOC_LITERAL(51, 627, 13), // "texSubImage2D"
QT_MOC_LITERAL(52, 641, 5), // "image"
QT_MOC_LITERAL(53, 647, 13), // "texParameterf"
QT_MOC_LITERAL(54, 661, 5), // "pname"
QT_MOC_LITERAL(55, 667, 5), // "param"
QT_MOC_LITERAL(56, 673, 13), // "texParameteri"
QT_MOC_LITERAL(57, 687, 17), // "createFramebuffer"
QT_MOC_LITERAL(58, 705, 17), // "deleteFramebuffer"
QT_MOC_LITERAL(59, 723, 6), // "buffer"
QT_MOC_LITERAL(60, 730, 15), // "bindFramebuffer"
QT_MOC_LITERAL(61, 746, 11), // "framebuffer"
QT_MOC_LITERAL(62, 758, 22), // "checkFramebufferStatus"
QT_MOC_LITERAL(63, 781, 23), // "framebufferRenderbuffer"
QT_MOC_LITERAL(64, 805, 10), // "attachment"
QT_MOC_LITERAL(65, 816, 18), // "renderbuffertarget"
QT_MOC_LITERAL(66, 835, 12), // "renderbuffer"
QT_MOC_LITERAL(67, 848, 20), // "framebufferTexture2D"
QT_MOC_LITERAL(68, 869, 9), // "textarget"
QT_MOC_LITERAL(69, 879, 13), // "isFramebuffer"
QT_MOC_LITERAL(70, 893, 18), // "createRenderbuffer"
QT_MOC_LITERAL(71, 912, 16), // "bindRenderbuffer"
QT_MOC_LITERAL(72, 929, 19), // "renderbufferStorage"
QT_MOC_LITERAL(73, 949, 14), // "isRenderbuffer"
QT_MOC_LITERAL(74, 964, 18), // "deleteRenderbuffer"
QT_MOC_LITERAL(75, 983, 14), // "sampleCoverage"
QT_MOC_LITERAL(76, 998, 5), // "value"
QT_MOC_LITERAL(77, 1004, 6), // "invert"
QT_MOC_LITERAL(78, 1011, 12), // "createShader"
QT_MOC_LITERAL(79, 1024, 8), // "isShader"
QT_MOC_LITERAL(80, 1033, 8), // "shader3D"
QT_MOC_LITERAL(81, 1042, 12), // "deleteShader"
QT_MOC_LITERAL(82, 1055, 12), // "shaderSource"
QT_MOC_LITERAL(83, 1068, 15), // "getShaderSource"
QT_MOC_LITERAL(84, 1084, 13), // "compileShader"
QT_MOC_LITERAL(85, 1098, 9), // "uniform1f"
QT_MOC_LITERAL(86, 1108, 8), // "location"
QT_MOC_LITERAL(87, 1117, 9), // "uniform1i"
QT_MOC_LITERAL(88, 1127, 9), // "uniform2f"
QT_MOC_LITERAL(89, 1137, 9), // "uniform2i"
QT_MOC_LITERAL(90, 1147, 9), // "uniform3f"
QT_MOC_LITERAL(91, 1157, 1), // "z"
QT_MOC_LITERAL(92, 1159, 9), // "uniform3i"
QT_MOC_LITERAL(93, 1169, 9), // "uniform4f"
QT_MOC_LITERAL(94, 1179, 1), // "w"
QT_MOC_LITERAL(95, 1181, 9), // "uniform4i"
QT_MOC_LITERAL(96, 1191, 10), // "uniform1fv"
QT_MOC_LITERAL(97, 1202, 5), // "array"
QT_MOC_LITERAL(98, 1208, 10), // "uniform1iv"
QT_MOC_LITERAL(99, 1219, 10), // "uniform2fv"
QT_MOC_LITERAL(100, 1230, 10), // "uniform2iv"
QT_MOC_LITERAL(101, 1241, 10), // "uniform3fv"
QT_MOC_LITERAL(102, 1252, 10), // "uniform3iv"
QT_MOC_LITERAL(103, 1263, 10), // "uniform4fv"
QT_MOC_LITERAL(104, 1274, 10), // "uniform4iv"
QT_MOC_LITERAL(105, 1285, 16), // "uniformMatrix2fv"
QT_MOC_LITERAL(106, 1302, 9), // "transpose"
QT_MOC_LITERAL(107, 1312, 16), // "uniformMatrix3fv"
QT_MOC_LITERAL(108, 1329, 16), // "uniformMatrix4fv"
QT_MOC_LITERAL(109, 1346, 13), // "createProgram"
QT_MOC_LITERAL(110, 1360, 12), // "attachShader"
QT_MOC_LITERAL(111, 1373, 7), // "program"
QT_MOC_LITERAL(112, 1381, 12), // "detachShader"
QT_MOC_LITERAL(113, 1394, 11), // "linkProgram"
QT_MOC_LITERAL(114, 1406, 10), // "useProgram"
QT_MOC_LITERAL(115, 1417, 15), // "validateProgram"
QT_MOC_LITERAL(116, 1433, 18), // "getUniformLocation"
QT_MOC_LITERAL(117, 1452, 17), // "getAttribLocation"
QT_MOC_LITERAL(118, 1470, 18), // "bindAttribLocation"
QT_MOC_LITERAL(119, 1489, 5), // "index"
QT_MOC_LITERAL(120, 1495, 17), // "getProgramInfoLog"
QT_MOC_LITERAL(121, 1513, 9), // "isProgram"
QT_MOC_LITERAL(122, 1523, 13), // "deleteProgram"
QT_MOC_LITERAL(123, 1537, 24), // "disableVertexAttribArray"
QT_MOC_LITERAL(124, 1562, 23), // "enableVertexAttribArray"
QT_MOC_LITERAL(125, 1586, 19), // "vertexAttribPointer"
QT_MOC_LITERAL(126, 1606, 4), // "indx"
QT_MOC_LITERAL(127, 1611, 4), // "size"
QT_MOC_LITERAL(128, 1616, 10), // "normalized"
QT_MOC_LITERAL(129, 1627, 6), // "stride"
QT_MOC_LITERAL(130, 1634, 6), // "offset"
QT_MOC_LITERAL(131, 1641, 14), // "vertexAttrib1f"
QT_MOC_LITERAL(132, 1656, 14), // "vertexAttrib2f"
QT_MOC_LITERAL(133, 1671, 14), // "vertexAttrib3f"
QT_MOC_LITERAL(134, 1686, 14), // "vertexAttrib4f"
QT_MOC_LITERAL(135, 1701, 15), // "vertexAttrib1fv"
QT_MOC_LITERAL(136, 1717, 15), // "vertexAttrib2fv"
QT_MOC_LITERAL(137, 1733, 15), // "vertexAttrib3fv"
QT_MOC_LITERAL(138, 1749, 15), // "vertexAttrib4fv"
QT_MOC_LITERAL(139, 1765, 18), // "getShaderParameter"
QT_MOC_LITERAL(140, 1784, 9), // "paramName"
QT_MOC_LITERAL(141, 1794, 19), // "getProgramParameter"
QT_MOC_LITERAL(142, 1814, 16), // "getShaderInfoLog"
QT_MOC_LITERAL(143, 1831, 12), // "createBuffer"
QT_MOC_LITERAL(144, 1844, 10), // "bindBuffer"
QT_MOC_LITERAL(145, 1855, 10), // "bufferData"
QT_MOC_LITERAL(146, 1866, 4), // "hint"
QT_MOC_LITERAL(147, 1871, 4), // "data"
QT_MOC_LITERAL(148, 1876, 13), // "bufferSubData"
QT_MOC_LITERAL(149, 1890, 18), // "getBufferParameter"
QT_MOC_LITERAL(150, 1909, 8), // "isBuffer"
QT_MOC_LITERAL(151, 1918, 12), // "deleteBuffer"
QT_MOC_LITERAL(152, 1931, 8), // "getError"
QT_MOC_LITERAL(153, 1940, 8), // "cullFace"
QT_MOC_LITERAL(154, 1949, 4), // "mode"
QT_MOC_LITERAL(155, 1954, 9), // "frontFace"
QT_MOC_LITERAL(156, 1964, 9), // "lineWidth"
QT_MOC_LITERAL(157, 1974, 11), // "pixelStorei"
QT_MOC_LITERAL(158, 1986, 13), // "polygonOffset"
QT_MOC_LITERAL(159, 2000, 6), // "factor"
QT_MOC_LITERAL(160, 2007, 5), // "units"
QT_MOC_LITERAL(161, 2013, 6), // "enable"
QT_MOC_LITERAL(162, 2020, 3), // "cap"
QT_MOC_LITERAL(163, 2024, 9), // "isEnabled"
QT_MOC_LITERAL(164, 2034, 7), // "disable"
QT_MOC_LITERAL(165, 2042, 12), // "getParameter"
QT_MOC_LITERAL(166, 2055, 5), // "clear"
QT_MOC_LITERAL(167, 2061, 5), // "flags"
QT_MOC_LITERAL(168, 2067, 9), // "depthMask"
QT_MOC_LITERAL(169, 2077, 4), // "flag"
QT_MOC_LITERAL(170, 2082, 9), // "depthFunc"
QT_MOC_LITERAL(171, 2092, 4), // "func"
QT_MOC_LITERAL(172, 2097, 10), // "depthRange"
QT_MOC_LITERAL(173, 2108, 5), // "zNear"
QT_MOC_LITERAL(174, 2114, 4), // "zFar"
QT_MOC_LITERAL(175, 2119, 10), // "clearDepth"
QT_MOC_LITERAL(176, 2130, 5), // "depth"
QT_MOC_LITERAL(177, 2136, 10), // "clearColor"
QT_MOC_LITERAL(178, 2147, 3), // "red"
QT_MOC_LITERAL(179, 2151, 5), // "green"
QT_MOC_LITERAL(180, 2157, 4), // "blue"
QT_MOC_LITERAL(181, 2162, 5), // "alpha"
QT_MOC_LITERAL(182, 2168, 12), // "clearStencil"
QT_MOC_LITERAL(183, 2181, 1), // "s"
QT_MOC_LITERAL(184, 2183, 9), // "colorMask"
QT_MOC_LITERAL(185, 2193, 10), // "blendColor"
QT_MOC_LITERAL(186, 2204, 13), // "blendEquation"
QT_MOC_LITERAL(187, 2218, 21), // "blendEquationSeparate"
QT_MOC_LITERAL(188, 2240, 7), // "modeRGB"
QT_MOC_LITERAL(189, 2248, 9), // "modeAlpha"
QT_MOC_LITERAL(190, 2258, 9), // "blendFunc"
QT_MOC_LITERAL(191, 2268, 7), // "sfactor"
QT_MOC_LITERAL(192, 2276, 7), // "dfactor"
QT_MOC_LITERAL(193, 2284, 17), // "blendFuncSeparate"
QT_MOC_LITERAL(194, 2302, 6), // "srcRGB"
QT_MOC_LITERAL(195, 2309, 6), // "dstRGB"
QT_MOC_LITERAL(196, 2316, 8), // "srcAlpha"
QT_MOC_LITERAL(197, 2325, 8), // "dstAlpha"
QT_MOC_LITERAL(198, 2334, 10), // "drawArrays"
QT_MOC_LITERAL(199, 2345, 5), // "first"
QT_MOC_LITERAL(200, 2351, 5), // "count"
QT_MOC_LITERAL(201, 2357, 12), // "drawElements"
QT_MOC_LITERAL(202, 2370, 8), // "viewport"
QT_MOC_LITERAL(203, 2379, 7), // "scissor"
QT_MOC_LITERAL(204, 2387, 10), // "readPixels"
QT_MOC_LITERAL(205, 2398, 15), // "getActiveAttrib"
QT_MOC_LITERAL(206, 2414, 17), // "CanvasActiveInfo*"
QT_MOC_LITERAL(207, 2432, 16), // "getActiveUniform"
QT_MOC_LITERAL(208, 2449, 18), // "getAttachedShaders"
QT_MOC_LITERAL(209, 2468, 11), // "stencilFunc"
QT_MOC_LITERAL(210, 2480, 3), // "ref"
QT_MOC_LITERAL(211, 2484, 4), // "mask"
QT_MOC_LITERAL(212, 2489, 19), // "stencilFuncSeparate"
QT_MOC_LITERAL(213, 2509, 4), // "face"
QT_MOC_LITERAL(214, 2514, 11), // "stencilMask"
QT_MOC_LITERAL(215, 2526, 19), // "stencilMaskSeparate"
QT_MOC_LITERAL(216, 2546, 9), // "stencilOp"
QT_MOC_LITERAL(217, 2556, 4), // "fail"
QT_MOC_LITERAL(218, 2561, 5), // "zfail"
QT_MOC_LITERAL(219, 2567, 5), // "zpass"
QT_MOC_LITERAL(220, 2573, 17), // "stencilOpSeparate"
QT_MOC_LITERAL(221, 2591, 33), // "getFramebufferAttachmentParam..."
QT_MOC_LITERAL(222, 2625, 24), // "getRenderbufferParameter"
QT_MOC_LITERAL(223, 2650, 15), // "getTexParameter"
QT_MOC_LITERAL(224, 2666, 10), // "getUniform"
QT_MOC_LITERAL(225, 2677, 21), // "getVertexAttribOffset"
QT_MOC_LITERAL(226, 2699, 15), // "getVertexAttrib"
QT_MOC_LITERAL(227, 2715, 18), // "drawingBufferWidth"
QT_MOC_LITERAL(228, 2734, 19), // "drawingBufferHeight"
QT_MOC_LITERAL(229, 2754, 16), // "DEPTH_BUFFER_BIT"
QT_MOC_LITERAL(230, 2771, 34), // "QtCanvas3D::CanvasContext::gl..."
QT_MOC_LITERAL(231, 2806, 18), // "STENCIL_BUFFER_BIT"
QT_MOC_LITERAL(232, 2825, 16), // "COLOR_BUFFER_BIT"
QT_MOC_LITERAL(233, 2842, 6), // "POINTS"
QT_MOC_LITERAL(234, 2849, 5), // "LINES"
QT_MOC_LITERAL(235, 2855, 9), // "LINE_LOOP"
QT_MOC_LITERAL(236, 2865, 10), // "LINE_STRIP"
QT_MOC_LITERAL(237, 2876, 9), // "TRIANGLES"
QT_MOC_LITERAL(238, 2886, 14), // "TRIANGLE_STRIP"
QT_MOC_LITERAL(239, 2901, 12), // "TRIANGLE_FAN"
QT_MOC_LITERAL(240, 2914, 4), // "ZERO"
QT_MOC_LITERAL(241, 2919, 3), // "ONE"
QT_MOC_LITERAL(242, 2923, 9), // "SRC_COLOR"
QT_MOC_LITERAL(243, 2933, 19), // "ONE_MINUS_SRC_COLOR"
QT_MOC_LITERAL(244, 2953, 9), // "SRC_ALPHA"
QT_MOC_LITERAL(245, 2963, 19), // "ONE_MINUS_SRC_ALPHA"
QT_MOC_LITERAL(246, 2983, 9), // "DST_ALPHA"
QT_MOC_LITERAL(247, 2993, 19), // "ONE_MINUS_DST_ALPHA"
QT_MOC_LITERAL(248, 3013, 9), // "DST_COLOR"
QT_MOC_LITERAL(249, 3023, 19), // "ONE_MINUS_DST_COLOR"
QT_MOC_LITERAL(250, 3043, 18), // "SRC_ALPHA_SATURATE"
QT_MOC_LITERAL(251, 3062, 8), // "FUNC_ADD"
QT_MOC_LITERAL(252, 3071, 14), // "BLEND_EQUATION"
QT_MOC_LITERAL(253, 3086, 18), // "BLEND_EQUATION_RGB"
QT_MOC_LITERAL(254, 3105, 20), // "BLEND_EQUATION_ALPHA"
QT_MOC_LITERAL(255, 3126, 13), // "FUNC_SUBTRACT"
QT_MOC_LITERAL(256, 3140, 21), // "FUNC_REVERSE_SUBTRACT"
QT_MOC_LITERAL(257, 3162, 13), // "BLEND_DST_RGB"
QT_MOC_LITERAL(258, 3176, 13), // "BLEND_SRC_RGB"
QT_MOC_LITERAL(259, 3190, 15), // "BLEND_DST_ALPHA"
QT_MOC_LITERAL(260, 3206, 15), // "BLEND_SRC_ALPHA"
QT_MOC_LITERAL(261, 3222, 14), // "CONSTANT_COLOR"
QT_MOC_LITERAL(262, 3237, 24), // "ONE_MINUS_CONSTANT_COLOR"
QT_MOC_LITERAL(263, 3262, 14), // "CONSTANT_ALPHA"
QT_MOC_LITERAL(264, 3277, 24), // "ONE_MINUS_CONSTANT_ALPHA"
QT_MOC_LITERAL(265, 3302, 11), // "BLEND_COLOR"
QT_MOC_LITERAL(266, 3314, 12), // "ARRAY_BUFFER"
QT_MOC_LITERAL(267, 3327, 20), // "ELEMENT_ARRAY_BUFFER"
QT_MOC_LITERAL(268, 3348, 20), // "ARRAY_BUFFER_BINDING"
QT_MOC_LITERAL(269, 3369, 28), // "ELEMENT_ARRAY_BUFFER_BINDING"
QT_MOC_LITERAL(270, 3398, 11), // "STREAM_DRAW"
QT_MOC_LITERAL(271, 3410, 11), // "STATIC_DRAW"
QT_MOC_LITERAL(272, 3422, 12), // "DYNAMIC_DRAW"
QT_MOC_LITERAL(273, 3435, 11), // "BUFFER_SIZE"
QT_MOC_LITERAL(274, 3447, 12), // "BUFFER_USAGE"
QT_MOC_LITERAL(275, 3460, 21), // "CURRENT_VERTEX_ATTRIB"
QT_MOC_LITERAL(276, 3482, 5), // "FRONT"
QT_MOC_LITERAL(277, 3488, 4), // "BACK"
QT_MOC_LITERAL(278, 3493, 14), // "FRONT_AND_BACK"
QT_MOC_LITERAL(279, 3508, 9), // "CULL_FACE"
QT_MOC_LITERAL(280, 3518, 5), // "BLEND"
QT_MOC_LITERAL(281, 3524, 6), // "DITHER"
QT_MOC_LITERAL(282, 3531, 12), // "STENCIL_TEST"
QT_MOC_LITERAL(283, 3544, 10), // "DEPTH_TEST"
QT_MOC_LITERAL(284, 3555, 12), // "SCISSOR_TEST"
QT_MOC_LITERAL(285, 3568, 19), // "POLYGON_OFFSET_FILL"
QT_MOC_LITERAL(286, 3588, 24), // "SAMPLE_ALPHA_TO_COVERAGE"
QT_MOC_LITERAL(287, 3613, 15), // "SAMPLE_COVERAGE"
QT_MOC_LITERAL(288, 3629, 8), // "NO_ERROR"
QT_MOC_LITERAL(289, 3638, 12), // "INVALID_ENUM"
QT_MOC_LITERAL(290, 3651, 13), // "INVALID_VALUE"
QT_MOC_LITERAL(291, 3665, 17), // "INVALID_OPERATION"
QT_MOC_LITERAL(292, 3683, 13), // "OUT_OF_MEMORY"
QT_MOC_LITERAL(293, 3697, 2), // "CW"
QT_MOC_LITERAL(294, 3700, 3), // "CCW"
QT_MOC_LITERAL(295, 3704, 10), // "LINE_WIDTH"
QT_MOC_LITERAL(296, 3715, 24), // "ALIASED_POINT_SIZE_RANGE"
QT_MOC_LITERAL(297, 3740, 24), // "ALIASED_LINE_WIDTH_RANGE"
QT_MOC_LITERAL(298, 3765, 14), // "CULL_FACE_MODE"
QT_MOC_LITERAL(299, 3780, 10), // "FRONT_FACE"
QT_MOC_LITERAL(300, 3791, 11), // "DEPTH_RANGE"
QT_MOC_LITERAL(301, 3803, 15), // "DEPTH_WRITEMASK"
QT_MOC_LITERAL(302, 3819, 17), // "DEPTH_CLEAR_VALUE"
QT_MOC_LITERAL(303, 3837, 10), // "DEPTH_FUNC"
QT_MOC_LITERAL(304, 3848, 19), // "STENCIL_CLEAR_VALUE"
QT_MOC_LITERAL(305, 3868, 12), // "STENCIL_FUNC"
QT_MOC_LITERAL(306, 3881, 12), // "STENCIL_FAIL"
QT_MOC_LITERAL(307, 3894, 23), // "STENCIL_PASS_DEPTH_FAIL"
QT_MOC_LITERAL(308, 3918, 23), // "STENCIL_PASS_DEPTH_PASS"
QT_MOC_LITERAL(309, 3942, 11), // "STENCIL_REF"
QT_MOC_LITERAL(310, 3954, 18), // "STENCIL_VALUE_MASK"
QT_MOC_LITERAL(311, 3973, 17), // "STENCIL_WRITEMASK"
QT_MOC_LITERAL(312, 3991, 17), // "STENCIL_BACK_FUNC"
QT_MOC_LITERAL(313, 4009, 17), // "STENCIL_BACK_FAIL"
QT_MOC_LITERAL(314, 4027, 28), // "STENCIL_BACK_PASS_DEPTH_FAIL"
QT_MOC_LITERAL(315, 4056, 28), // "STENCIL_BACK_PASS_DEPTH_PASS"
QT_MOC_LITERAL(316, 4085, 16), // "STENCIL_BACK_REF"
QT_MOC_LITERAL(317, 4102, 23), // "STENCIL_BACK_VALUE_MASK"
QT_MOC_LITERAL(318, 4126, 22), // "STENCIL_BACK_WRITEMASK"
QT_MOC_LITERAL(319, 4149, 8), // "VIEWPORT"
QT_MOC_LITERAL(320, 4158, 11), // "SCISSOR_BOX"
QT_MOC_LITERAL(321, 4170, 17), // "COLOR_CLEAR_VALUE"
QT_MOC_LITERAL(322, 4188, 15), // "COLOR_WRITEMASK"
QT_MOC_LITERAL(323, 4204, 16), // "UNPACK_ALIGNMENT"
QT_MOC_LITERAL(324, 4221, 14), // "PACK_ALIGNMENT"
QT_MOC_LITERAL(325, 4236, 16), // "MAX_TEXTURE_SIZE"
QT_MOC_LITERAL(326, 4253, 17), // "MAX_VIEWPORT_DIMS"
QT_MOC_LITERAL(327, 4271, 13), // "SUBPIXEL_BITS"
QT_MOC_LITERAL(328, 4285, 8), // "RED_BITS"
QT_MOC_LITERAL(329, 4294, 10), // "GREEN_BITS"
QT_MOC_LITERAL(330, 4305, 9), // "BLUE_BITS"
QT_MOC_LITERAL(331, 4315, 10), // "ALPHA_BITS"
QT_MOC_LITERAL(332, 4326, 10), // "DEPTH_BITS"
QT_MOC_LITERAL(333, 4337, 12), // "STENCIL_BITS"
QT_MOC_LITERAL(334, 4350, 20), // "POLYGON_OFFSET_UNITS"
QT_MOC_LITERAL(335, 4371, 21), // "POLYGON_OFFSET_FACTOR"
QT_MOC_LITERAL(336, 4393, 18), // "TEXTURE_BINDING_2D"
QT_MOC_LITERAL(337, 4412, 14), // "SAMPLE_BUFFERS"
QT_MOC_LITERAL(338, 4427, 7), // "SAMPLES"
QT_MOC_LITERAL(339, 4435, 21), // "SAMPLE_COVERAGE_VALUE"
QT_MOC_LITERAL(340, 4457, 22), // "SAMPLE_COVERAGE_INVERT"
QT_MOC_LITERAL(341, 4480, 26), // "COMPRESSED_TEXTURE_FORMATS"
QT_MOC_LITERAL(342, 4507, 9), // "DONT_CARE"
QT_MOC_LITERAL(343, 4517, 7), // "FASTEST"
QT_MOC_LITERAL(344, 4525, 6), // "NICEST"
QT_MOC_LITERAL(345, 4532, 20), // "GENERATE_MIPMAP_HINT"
QT_MOC_LITERAL(346, 4553, 4), // "BYTE"
QT_MOC_LITERAL(347, 4558, 13), // "UNSIGNED_BYTE"
QT_MOC_LITERAL(348, 4572, 5), // "SHORT"
QT_MOC_LITERAL(349, 4578, 14), // "UNSIGNED_SHORT"
QT_MOC_LITERAL(350, 4593, 3), // "INT"
QT_MOC_LITERAL(351, 4597, 12), // "UNSIGNED_INT"
QT_MOC_LITERAL(352, 4610, 5), // "FLOAT"
QT_MOC_LITERAL(353, 4616, 15), // "DEPTH_COMPONENT"
QT_MOC_LITERAL(354, 4632, 5), // "ALPHA"
QT_MOC_LITERAL(355, 4638, 3), // "RGB"
QT_MOC_LITERAL(356, 4642, 4), // "RGBA"
QT_MOC_LITERAL(357, 4647, 9), // "LUMINANCE"
QT_MOC_LITERAL(358, 4657, 15), // "LUMINANCE_ALPHA"
QT_MOC_LITERAL(359, 4673, 22), // "UNSIGNED_SHORT_4_4_4_4"
QT_MOC_LITERAL(360, 4696, 22), // "UNSIGNED_SHORT_5_5_5_1"
QT_MOC_LITERAL(361, 4719, 20), // "UNSIGNED_SHORT_5_6_5"
QT_MOC_LITERAL(362, 4740, 15), // "FRAGMENT_SHADER"
QT_MOC_LITERAL(363, 4756, 13), // "VERTEX_SHADER"
QT_MOC_LITERAL(364, 4770, 18), // "MAX_VERTEX_ATTRIBS"
QT_MOC_LITERAL(365, 4789, 26), // "MAX_VERTEX_UNIFORM_VECTORS"
QT_MOC_LITERAL(366, 4816, 19), // "MAX_VARYING_VECTORS"
QT_MOC_LITERAL(367, 4836, 32), // "MAX_COMBINED_TEXTURE_IMAGE_UNITS"
QT_MOC_LITERAL(368, 4869, 30), // "MAX_VERTEX_TEXTURE_IMAGE_UNITS"
QT_MOC_LITERAL(369, 4900, 23), // "MAX_TEXTURE_IMAGE_UNITS"
QT_MOC_LITERAL(370, 4924, 28), // "MAX_FRAGMENT_UNIFORM_VECTORS"
QT_MOC_LITERAL(371, 4953, 11), // "SHADER_TYPE"
QT_MOC_LITERAL(372, 4965, 13), // "DELETE_STATUS"
QT_MOC_LITERAL(373, 4979, 11), // "LINK_STATUS"
QT_MOC_LITERAL(374, 4991, 15), // "VALIDATE_STATUS"
QT_MOC_LITERAL(375, 5007, 16), // "ATTACHED_SHADERS"
QT_MOC_LITERAL(376, 5024, 15), // "ACTIVE_UNIFORMS"
QT_MOC_LITERAL(377, 5040, 17), // "ACTIVE_ATTRIBUTES"
QT_MOC_LITERAL(378, 5058, 24), // "SHADING_LANGUAGE_VERSION"
QT_MOC_LITERAL(379, 5083, 15), // "CURRENT_PROGRAM"
QT_MOC_LITERAL(380, 5099, 5), // "NEVER"
QT_MOC_LITERAL(381, 5105, 4), // "LESS"
QT_MOC_LITERAL(382, 5110, 5), // "EQUAL"
QT_MOC_LITERAL(383, 5116, 6), // "LEQUAL"
QT_MOC_LITERAL(384, 5123, 7), // "GREATER"
QT_MOC_LITERAL(385, 5131, 8), // "NOTEQUAL"
QT_MOC_LITERAL(386, 5140, 6), // "GEQUAL"
QT_MOC_LITERAL(387, 5147, 6), // "ALWAYS"
QT_MOC_LITERAL(388, 5154, 4), // "KEEP"
QT_MOC_LITERAL(389, 5159, 7), // "REPLACE"
QT_MOC_LITERAL(390, 5167, 4), // "INCR"
QT_MOC_LITERAL(391, 5172, 4), // "DECR"
QT_MOC_LITERAL(392, 5177, 6), // "INVERT"
QT_MOC_LITERAL(393, 5184, 9), // "INCR_WRAP"
QT_MOC_LITERAL(394, 5194, 9), // "DECR_WRAP"
QT_MOC_LITERAL(395, 5204, 6), // "VENDOR"
QT_MOC_LITERAL(396, 5211, 8), // "RENDERER"
QT_MOC_LITERAL(397, 5220, 7), // "VERSION"
QT_MOC_LITERAL(398, 5228, 7), // "NEAREST"
QT_MOC_LITERAL(399, 5236, 6), // "LINEAR"
QT_MOC_LITERAL(400, 5243, 22), // "NEAREST_MIPMAP_NEAREST"
QT_MOC_LITERAL(401, 5266, 21), // "LINEAR_MIPMAP_NEAREST"
QT_MOC_LITERAL(402, 5288, 21), // "NEAREST_MIPMAP_LINEAR"
QT_MOC_LITERAL(403, 5310, 20), // "LINEAR_MIPMAP_LINEAR"
QT_MOC_LITERAL(404, 5331, 18), // "TEXTURE_MAG_FILTER"
QT_MOC_LITERAL(405, 5350, 18), // "TEXTURE_MIN_FILTER"
QT_MOC_LITERAL(406, 5369, 14), // "TEXTURE_WRAP_S"
QT_MOC_LITERAL(407, 5384, 14), // "TEXTURE_WRAP_T"
QT_MOC_LITERAL(408, 5399, 10), // "TEXTURE_2D"
QT_MOC_LITERAL(409, 5410, 7), // "TEXTURE"
QT_MOC_LITERAL(410, 5418, 16), // "TEXTURE_CUBE_MAP"
QT_MOC_LITERAL(411, 5435, 24), // "TEXTURE_BINDING_CUBE_MAP"
QT_MOC_LITERAL(412, 5460, 27), // "TEXTURE_CUBE_MAP_POSITIVE_X"
QT_MOC_LITERAL(413, 5488, 27), // "TEXTURE_CUBE_MAP_NEGATIVE_X"
QT_MOC_LITERAL(414, 5516, 27), // "TEXTURE_CUBE_MAP_POSITIVE_Y"
QT_MOC_LITERAL(415, 5544, 27), // "TEXTURE_CUBE_MAP_NEGATIVE_Y"
QT_MOC_LITERAL(416, 5572, 27), // "TEXTURE_CUBE_MAP_POSITIVE_Z"
QT_MOC_LITERAL(417, 5600, 27), // "TEXTURE_CUBE_MAP_NEGATIVE_Z"
QT_MOC_LITERAL(418, 5628, 25), // "MAX_CUBE_MAP_TEXTURE_SIZE"
QT_MOC_LITERAL(419, 5654, 8), // "TEXTURE0"
QT_MOC_LITERAL(420, 5663, 8), // "TEXTURE1"
QT_MOC_LITERAL(421, 5672, 8), // "TEXTURE2"
QT_MOC_LITERAL(422, 5681, 8), // "TEXTURE3"
QT_MOC_LITERAL(423, 5690, 8), // "TEXTURE4"
QT_MOC_LITERAL(424, 5699, 8), // "TEXTURE5"
QT_MOC_LITERAL(425, 5708, 8), // "TEXTURE6"
QT_MOC_LITERAL(426, 5717, 8), // "TEXTURE7"
QT_MOC_LITERAL(427, 5726, 8), // "TEXTURE8"
QT_MOC_LITERAL(428, 5735, 8), // "TEXTURE9"
QT_MOC_LITERAL(429, 5744, 9), // "TEXTURE10"
QT_MOC_LITERAL(430, 5754, 9), // "TEXTURE11"
QT_MOC_LITERAL(431, 5764, 9), // "TEXTURE12"
QT_MOC_LITERAL(432, 5774, 9), // "TEXTURE13"
QT_MOC_LITERAL(433, 5784, 9), // "TEXTURE14"
QT_MOC_LITERAL(434, 5794, 9), // "TEXTURE15"
QT_MOC_LITERAL(435, 5804, 9), // "TEXTURE16"
QT_MOC_LITERAL(436, 5814, 9), // "TEXTURE17"
QT_MOC_LITERAL(437, 5824, 9), // "TEXTURE18"
QT_MOC_LITERAL(438, 5834, 9), // "TEXTURE19"
QT_MOC_LITERAL(439, 5844, 9), // "TEXTURE20"
QT_MOC_LITERAL(440, 5854, 9), // "TEXTURE21"
QT_MOC_LITERAL(441, 5864, 9), // "TEXTURE22"
QT_MOC_LITERAL(442, 5874, 9), // "TEXTURE23"
QT_MOC_LITERAL(443, 5884, 9), // "TEXTURE24"
QT_MOC_LITERAL(444, 5894, 9), // "TEXTURE25"
QT_MOC_LITERAL(445, 5904, 9), // "TEXTURE26"
QT_MOC_LITERAL(446, 5914, 9), // "TEXTURE27"
QT_MOC_LITERAL(447, 5924, 9), // "TEXTURE28"
QT_MOC_LITERAL(448, 5934, 9), // "TEXTURE29"
QT_MOC_LITERAL(449, 5944, 9), // "TEXTURE30"
QT_MOC_LITERAL(450, 5954, 9), // "TEXTURE31"
QT_MOC_LITERAL(451, 5964, 14), // "ACTIVE_TEXTURE"
QT_MOC_LITERAL(452, 5979, 6), // "REPEAT"
QT_MOC_LITERAL(453, 5986, 13), // "CLAMP_TO_EDGE"
QT_MOC_LITERAL(454, 6000, 15), // "MIRRORED_REPEAT"
QT_MOC_LITERAL(455, 6016, 10), // "FLOAT_VEC2"
QT_MOC_LITERAL(456, 6027, 10), // "FLOAT_VEC3"
QT_MOC_LITERAL(457, 6038, 10), // "FLOAT_VEC4"
QT_MOC_LITERAL(458, 6049, 8), // "INT_VEC2"
QT_MOC_LITERAL(459, 6058, 8), // "INT_VEC3"
QT_MOC_LITERAL(460, 6067, 8), // "INT_VEC4"
QT_MOC_LITERAL(461, 6076, 4), // "BOOL"
QT_MOC_LITERAL(462, 6081, 9), // "BOOL_VEC2"
QT_MOC_LITERAL(463, 6091, 9), // "BOOL_VEC3"
QT_MOC_LITERAL(464, 6101, 9), // "BOOL_VEC4"
QT_MOC_LITERAL(465, 6111, 10), // "FLOAT_MAT2"
QT_MOC_LITERAL(466, 6122, 10), // "FLOAT_MAT3"
QT_MOC_LITERAL(467, 6133, 10), // "FLOAT_MAT4"
QT_MOC_LITERAL(468, 6144, 10), // "SAMPLER_2D"
QT_MOC_LITERAL(469, 6155, 12), // "SAMPLER_CUBE"
QT_MOC_LITERAL(470, 6168, 27), // "VERTEX_ATTRIB_ARRAY_ENABLED"
QT_MOC_LITERAL(471, 6196, 24), // "VERTEX_ATTRIB_ARRAY_SIZE"
QT_MOC_LITERAL(472, 6221, 26), // "VERTEX_ATTRIB_ARRAY_STRIDE"
QT_MOC_LITERAL(473, 6248, 24), // "VERTEX_ATTRIB_ARRAY_TYPE"
QT_MOC_LITERAL(474, 6273, 30), // "VERTEX_ATTRIB_ARRAY_NORMALIZED"
QT_MOC_LITERAL(475, 6304, 27), // "VERTEX_ATTRIB_ARRAY_POINTER"
QT_MOC_LITERAL(476, 6332, 34), // "VERTEX_ATTRIB_ARRAY_BUFFER_BI..."
QT_MOC_LITERAL(477, 6367, 30), // "IMPLEMENTATION_COLOR_READ_TYPE"
QT_MOC_LITERAL(478, 6398, 32), // "IMPLEMENTATION_COLOR_READ_FORMAT"
QT_MOC_LITERAL(479, 6431, 14), // "COMPILE_STATUS"
QT_MOC_LITERAL(480, 6446, 9), // "LOW_FLOAT"
QT_MOC_LITERAL(481, 6456, 12), // "MEDIUM_FLOAT"
QT_MOC_LITERAL(482, 6469, 10), // "HIGH_FLOAT"
QT_MOC_LITERAL(483, 6480, 7), // "LOW_INT"
QT_MOC_LITERAL(484, 6488, 10), // "MEDIUM_INT"
QT_MOC_LITERAL(485, 6499, 8), // "HIGH_INT"
QT_MOC_LITERAL(486, 6508, 11), // "FRAMEBUFFER"
QT_MOC_LITERAL(487, 6520, 12), // "RENDERBUFFER"
QT_MOC_LITERAL(488, 6533, 5), // "RGBA4"
QT_MOC_LITERAL(489, 6539, 7), // "RGB5_A1"
QT_MOC_LITERAL(490, 6547, 6), // "RGB565"
QT_MOC_LITERAL(491, 6554, 17), // "DEPTH_COMPONENT16"
QT_MOC_LITERAL(492, 6572, 13), // "STENCIL_INDEX"
QT_MOC_LITERAL(493, 6586, 14), // "STENCIL_INDEX8"
QT_MOC_LITERAL(494, 6601, 13), // "DEPTH_STENCIL"
QT_MOC_LITERAL(495, 6615, 18), // "RENDERBUFFER_WIDTH"
QT_MOC_LITERAL(496, 6634, 19), // "RENDERBUFFER_HEIGHT"
QT_MOC_LITERAL(497, 6654, 28), // "RENDERBUFFER_INTERNAL_FORMAT"
QT_MOC_LITERAL(498, 6683, 21), // "RENDERBUFFER_RED_SIZE"
QT_MOC_LITERAL(499, 6705, 23), // "RENDERBUFFER_GREEN_SIZE"
QT_MOC_LITERAL(500, 6729, 22), // "RENDERBUFFER_BLUE_SIZE"
QT_MOC_LITERAL(501, 6752, 23), // "RENDERBUFFER_ALPHA_SIZE"
QT_MOC_LITERAL(502, 6776, 23), // "RENDERBUFFER_DEPTH_SIZE"
QT_MOC_LITERAL(503, 6800, 25), // "RENDERBUFFER_STENCIL_SIZE"
QT_MOC_LITERAL(504, 6826, 34), // "FRAMEBUFFER_ATTACHMENT_OBJECT..."
QT_MOC_LITERAL(505, 6861, 34), // "FRAMEBUFFER_ATTACHMENT_OBJECT..."
QT_MOC_LITERAL(506, 6896, 36), // "FRAMEBUFFER_ATTACHMENT_TEXTUR..."
QT_MOC_LITERAL(507, 6933, 44), // "FRAMEBUFFER_ATTACHMENT_TEXTUR..."
QT_MOC_LITERAL(508, 6978, 17), // "COLOR_ATTACHMENT0"
QT_MOC_LITERAL(509, 6996, 16), // "DEPTH_ATTACHMENT"
QT_MOC_LITERAL(510, 7013, 18), // "STENCIL_ATTACHMENT"
QT_MOC_LITERAL(511, 7032, 24), // "DEPTH_STENCIL_ATTACHMENT"
QT_MOC_LITERAL(512, 7057, 4), // "NONE"
QT_MOC_LITERAL(513, 7062, 20), // "FRAMEBUFFER_COMPLETE"
QT_MOC_LITERAL(514, 7083, 33), // "FRAMEBUFFER_INCOMPLETE_ATTACH..."
QT_MOC_LITERAL(515, 7117, 41), // "FRAMEBUFFER_INCOMPLETE_MISSIN..."
QT_MOC_LITERAL(516, 7159, 33), // "FRAMEBUFFER_INCOMPLETE_DIMENS..."
QT_MOC_LITERAL(517, 7193, 23), // "FRAMEBUFFER_UNSUPPORTED"
QT_MOC_LITERAL(518, 7217, 19), // "FRAMEBUFFER_BINDING"
QT_MOC_LITERAL(519, 7237, 20), // "RENDERBUFFER_BINDING"
QT_MOC_LITERAL(520, 7258, 21), // "MAX_RENDERBUFFER_SIZE"
QT_MOC_LITERAL(521, 7280, 29), // "INVALID_FRAMEBUFFER_OPERATION"
QT_MOC_LITERAL(522, 7310, 19), // "UNPACK_FLIP_Y_WEBGL"
QT_MOC_LITERAL(523, 7330, 30), // "UNPACK_PREMULTIPLY_ALPHA_WEBGL"
QT_MOC_LITERAL(524, 7361, 18), // "CONTEXT_LOST_WEBGL"
QT_MOC_LITERAL(525, 7380, 34), // "UNPACK_COLORSPACE_CONVERSION_..."
QT_MOC_LITERAL(526, 7415, 21), // "BROWSER_DEFAULT_WEBGL"
QT_MOC_LITERAL(527, 7437, 26), // "DEPTH_AND_COLOR_BUFFER_BIT"
QT_MOC_LITERAL(528, 7464, 38), // "DEPTH_AND_STENCIL_AND_COLOR_B..."
QT_MOC_LITERAL(529, 7503, 35), // "FRAGMENT_SHADER_DERIVATIVE_HI..."
QT_MOC_LITERAL(530, 7539, 21), // "UNMASKED_VENDOR_WEBGL"
QT_MOC_LITERAL(531, 7561, 23), // "UNMASKED_RENDERER_WEBGL"
QT_MOC_LITERAL(532, 7585, 28), // "COMPRESSED_RGB_S3TC_DXT1_EXT"
QT_MOC_LITERAL(533, 7614, 29), // "COMPRESSED_RGBA_S3TC_DXT1_EXT"
QT_MOC_LITERAL(534, 7644, 29), // "COMPRESSED_RGBA_S3TC_DXT3_EXT"
QT_MOC_LITERAL(535, 7674, 29), // "COMPRESSED_RGBA_S3TC_DXT5_EXT"
QT_MOC_LITERAL(536, 7704, 31), // "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
QT_MOC_LITERAL(537, 7736, 31), // "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
QT_MOC_LITERAL(538, 7768, 32), // "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
QT_MOC_LITERAL(539, 7801, 32) // "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"

    },
    "QtCanvas3D::CanvasContext\0canvasChanged\0"
    "\0Canvas*\0canvas\0drawingBufferWidthChanged\0"
    "drawingBufferHeightChanged\0"
    "handleFullCommandQueue\0handleTextureIdResolved\0"
    "QQuickItem*\0item\0handleObjectDeletion\0"
    "obj\0getSupportedExtensions\0getExtension\0"
    "name\0isContextLost\0getContextAttributes\0"
    "QJSValue\0getShaderPrecisionFormat\0"
    "glEnums\0shadertype\0precisiontype\0flush\0"
    "finish\0createTexture\0deleteTexture\0"
    "texture\0activeTexture\0bindTexture\0"
    "target\0generateMipmap\0isTexture\0"
    "anyObject\0compressedTexImage2D\0level\0"
    "internalformat\0width\0height\0border\0"
    "pixels\0compressedTexSubImage2D\0xoffset\0"
    "yoffset\0format\0copyTexImage2D\0x\0y\0"
    "copyTexSubImage2D\0texImage2D\0type\0"
    "texSubImage2D\0image\0texParameterf\0"
    "pname\0param\0texParameteri\0createFramebuffer\0"
    "deleteFramebuffer\0buffer\0bindFramebuffer\0"
    "framebuffer\0checkFramebufferStatus\0"
    "framebufferRenderbuffer\0attachment\0"
    "renderbuffertarget\0renderbuffer\0"
    "framebufferTexture2D\0textarget\0"
    "isFramebuffer\0createRenderbuffer\0"
    "bindRenderbuffer\0renderbufferStorage\0"
    "isRenderbuffer\0deleteRenderbuffer\0"
    "sampleCoverage\0value\0invert\0createShader\0"
    "isShader\0shader3D\0deleteShader\0"
    "shaderSource\0getShaderSource\0compileShader\0"
    "uniform1f\0location\0uniform1i\0uniform2f\0"
    "uniform2i\0uniform3f\0z\0uniform3i\0"
    "uniform4f\0w\0uniform4i\0uniform1fv\0array\0"
    "uniform1iv\0uniform2fv\0uniform2iv\0"
    "uniform3fv\0uniform3iv\0uniform4fv\0"
    "uniform4iv\0uniformMatrix2fv\0transpose\0"
    "uniformMatrix3fv\0uniformMatrix4fv\0"
    "createProgram\0attachShader\0program\0"
    "detachShader\0linkProgram\0useProgram\0"
    "validateProgram\0getUniformLocation\0"
    "getAttribLocation\0bindAttribLocation\0"
    "index\0getProgramInfoLog\0isProgram\0"
    "deleteProgram\0disableVertexAttribArray\0"
    "enableVertexAttribArray\0vertexAttribPointer\0"
    "indx\0size\0normalized\0stride\0offset\0"
    "vertexAttrib1f\0vertexAttrib2f\0"
    "vertexAttrib3f\0vertexAttrib4f\0"
    "vertexAttrib1fv\0vertexAttrib2fv\0"
    "vertexAttrib3fv\0vertexAttrib4fv\0"
    "getShaderParameter\0paramName\0"
    "getProgramParameter\0getShaderInfoLog\0"
    "createBuffer\0bindBuffer\0bufferData\0"
    "hint\0data\0bufferSubData\0getBufferParameter\0"
    "isBuffer\0deleteBuffer\0getError\0cullFace\0"
    "mode\0frontFace\0lineWidth\0pixelStorei\0"
    "polygonOffset\0factor\0units\0enable\0cap\0"
    "isEnabled\0disable\0getParameter\0clear\0"
    "flags\0depthMask\0flag\0depthFunc\0func\0"
    "depthRange\0zNear\0zFar\0clearDepth\0depth\0"
    "clearColor\0red\0green\0blue\0alpha\0"
    "clearStencil\0s\0colorMask\0blendColor\0"
    "blendEquation\0blendEquationSeparate\0"
    "modeRGB\0modeAlpha\0blendFunc\0sfactor\0"
    "dfactor\0blendFuncSeparate\0srcRGB\0"
    "dstRGB\0srcAlpha\0dstAlpha\0drawArrays\0"
    "first\0count\0drawElements\0viewport\0"
    "scissor\0readPixels\0getActiveAttrib\0"
    "CanvasActiveInfo*\0getActiveUniform\0"
    "getAttachedShaders\0stencilFunc\0ref\0"
    "mask\0stencilFuncSeparate\0face\0stencilMask\0"
    "stencilMaskSeparate\0stencilOp\0fail\0"
    "zfail\0zpass\0stencilOpSeparate\0"
    "getFramebufferAttachmentParameter\0"
    "getRenderbufferParameter\0getTexParameter\0"
    "getUniform\0getVertexAttribOffset\0"
    "getVertexAttrib\0drawingBufferWidth\0"
    "drawingBufferHeight\0DEPTH_BUFFER_BIT\0"
    "QtCanvas3D::CanvasContext::glEnums\0"
    "STENCIL_BUFFER_BIT\0COLOR_BUFFER_BIT\0"
    "POINTS\0LINES\0LINE_LOOP\0LINE_STRIP\0"
    "TRIANGLES\0TRIANGLE_STRIP\0TRIANGLE_FAN\0"
    "ZERO\0ONE\0SRC_COLOR\0ONE_MINUS_SRC_COLOR\0"
    "SRC_ALPHA\0ONE_MINUS_SRC_ALPHA\0DST_ALPHA\0"
    "ONE_MINUS_DST_ALPHA\0DST_COLOR\0"
    "ONE_MINUS_DST_COLOR\0SRC_ALPHA_SATURATE\0"
    "FUNC_ADD\0BLEND_EQUATION\0BLEND_EQUATION_RGB\0"
    "BLEND_EQUATION_ALPHA\0FUNC_SUBTRACT\0"
    "FUNC_REVERSE_SUBTRACT\0BLEND_DST_RGB\0"
    "BLEND_SRC_RGB\0BLEND_DST_ALPHA\0"
    "BLEND_SRC_ALPHA\0CONSTANT_COLOR\0"
    "ONE_MINUS_CONSTANT_COLOR\0CONSTANT_ALPHA\0"
    "ONE_MINUS_CONSTANT_ALPHA\0BLEND_COLOR\0"
    "ARRAY_BUFFER\0ELEMENT_ARRAY_BUFFER\0"
    "ARRAY_BUFFER_BINDING\0ELEMENT_ARRAY_BUFFER_BINDING\0"
    "STREAM_DRAW\0STATIC_DRAW\0DYNAMIC_DRAW\0"
    "BUFFER_SIZE\0BUFFER_USAGE\0CURRENT_VERTEX_ATTRIB\0"
    "FRONT\0BACK\0FRONT_AND_BACK\0CULL_FACE\0"
    "BLEND\0DITHER\0STENCIL_TEST\0DEPTH_TEST\0"
    "SCISSOR_TEST\0POLYGON_OFFSET_FILL\0"
    "SAMPLE_ALPHA_TO_COVERAGE\0SAMPLE_COVERAGE\0"
    "NO_ERROR\0INVALID_ENUM\0INVALID_VALUE\0"
    "INVALID_OPERATION\0OUT_OF_MEMORY\0CW\0"
    "CCW\0LINE_WIDTH\0ALIASED_POINT_SIZE_RANGE\0"
    "ALIASED_LINE_WIDTH_RANGE\0CULL_FACE_MODE\0"
    "FRONT_FACE\0DEPTH_RANGE\0DEPTH_WRITEMASK\0"
    "DEPTH_CLEAR_VALUE\0DEPTH_FUNC\0"
    "STENCIL_CLEAR_VALUE\0STENCIL_FUNC\0"
    "STENCIL_FAIL\0STENCIL_PASS_DEPTH_FAIL\0"
    "STENCIL_PASS_DEPTH_PASS\0STENCIL_REF\0"
    "STENCIL_VALUE_MASK\0STENCIL_WRITEMASK\0"
    "STENCIL_BACK_FUNC\0STENCIL_BACK_FAIL\0"
    "STENCIL_BACK_PASS_DEPTH_FAIL\0"
    "STENCIL_BACK_PASS_DEPTH_PASS\0"
    "STENCIL_BACK_REF\0STENCIL_BACK_VALUE_MASK\0"
    "STENCIL_BACK_WRITEMASK\0VIEWPORT\0"
    "SCISSOR_BOX\0COLOR_CLEAR_VALUE\0"
    "COLOR_WRITEMASK\0UNPACK_ALIGNMENT\0"
    "PACK_ALIGNMENT\0MAX_TEXTURE_SIZE\0"
    "MAX_VIEWPORT_DIMS\0SUBPIXEL_BITS\0"
    "RED_BITS\0GREEN_BITS\0BLUE_BITS\0ALPHA_BITS\0"
    "DEPTH_BITS\0STENCIL_BITS\0POLYGON_OFFSET_UNITS\0"
    "POLYGON_OFFSET_FACTOR\0TEXTURE_BINDING_2D\0"
    "SAMPLE_BUFFERS\0SAMPLES\0SAMPLE_COVERAGE_VALUE\0"
    "SAMPLE_COVERAGE_INVERT\0"
    "COMPRESSED_TEXTURE_FORMATS\0DONT_CARE\0"
    "FASTEST\0NICEST\0GENERATE_MIPMAP_HINT\0"
    "BYTE\0UNSIGNED_BYTE\0SHORT\0UNSIGNED_SHORT\0"
    "INT\0UNSIGNED_INT\0FLOAT\0DEPTH_COMPONENT\0"
    "ALPHA\0RGB\0RGBA\0LUMINANCE\0LUMINANCE_ALPHA\0"
    "UNSIGNED_SHORT_4_4_4_4\0UNSIGNED_SHORT_5_5_5_1\0"
    "UNSIGNED_SHORT_5_6_5\0FRAGMENT_SHADER\0"
    "VERTEX_SHADER\0MAX_VERTEX_ATTRIBS\0"
    "MAX_VERTEX_UNIFORM_VECTORS\0"
    "MAX_VARYING_VECTORS\0"
    "MAX_COMBINED_TEXTURE_IMAGE_UNITS\0"
    "MAX_VERTEX_TEXTURE_IMAGE_UNITS\0"
    "MAX_TEXTURE_IMAGE_UNITS\0"
    "MAX_FRAGMENT_UNIFORM_VECTORS\0SHADER_TYPE\0"
    "DELETE_STATUS\0LINK_STATUS\0VALIDATE_STATUS\0"
    "ATTACHED_SHADERS\0ACTIVE_UNIFORMS\0"
    "ACTIVE_ATTRIBUTES\0SHADING_LANGUAGE_VERSION\0"
    "CURRENT_PROGRAM\0NEVER\0LESS\0EQUAL\0"
    "LEQUAL\0GREATER\0NOTEQUAL\0GEQUAL\0ALWAYS\0"
    "KEEP\0REPLACE\0INCR\0DECR\0INVERT\0INCR_WRAP\0"
    "DECR_WRAP\0VENDOR\0RENDERER\0VERSION\0"
    "NEAREST\0LINEAR\0NEAREST_MIPMAP_NEAREST\0"
    "LINEAR_MIPMAP_NEAREST\0NEAREST_MIPMAP_LINEAR\0"
    "LINEAR_MIPMAP_LINEAR\0TEXTURE_MAG_FILTER\0"
    "TEXTURE_MIN_FILTER\0TEXTURE_WRAP_S\0"
    "TEXTURE_WRAP_T\0TEXTURE_2D\0TEXTURE\0"
    "TEXTURE_CUBE_MAP\0TEXTURE_BINDING_CUBE_MAP\0"
    "TEXTURE_CUBE_MAP_POSITIVE_X\0"
    "TEXTURE_CUBE_MAP_NEGATIVE_X\0"
    "TEXTURE_CUBE_MAP_POSITIVE_Y\0"
    "TEXTURE_CUBE_MAP_NEGATIVE_Y\0"
    "TEXTURE_CUBE_MAP_POSITIVE_Z\0"
    "TEXTURE_CUBE_MAP_NEGATIVE_Z\0"
    "MAX_CUBE_MAP_TEXTURE_SIZE\0TEXTURE0\0"
    "TEXTURE1\0TEXTURE2\0TEXTURE3\0TEXTURE4\0"
    "TEXTURE5\0TEXTURE6\0TEXTURE7\0TEXTURE8\0"
    "TEXTURE9\0TEXTURE10\0TEXTURE11\0TEXTURE12\0"
    "TEXTURE13\0TEXTURE14\0TEXTURE15\0TEXTURE16\0"
    "TEXTURE17\0TEXTURE18\0TEXTURE19\0TEXTURE20\0"
    "TEXTURE21\0TEXTURE22\0TEXTURE23\0TEXTURE24\0"
    "TEXTURE25\0TEXTURE26\0TEXTURE27\0TEXTURE28\0"
    "TEXTURE29\0TEXTURE30\0TEXTURE31\0"
    "ACTIVE_TEXTURE\0REPEAT\0CLAMP_TO_EDGE\0"
    "MIRRORED_REPEAT\0FLOAT_VEC2\0FLOAT_VEC3\0"
    "FLOAT_VEC4\0INT_VEC2\0INT_VEC3\0INT_VEC4\0"
    "BOOL\0BOOL_VEC2\0BOOL_VEC3\0BOOL_VEC4\0"
    "FLOAT_MAT2\0FLOAT_MAT3\0FLOAT_MAT4\0"
    "SAMPLER_2D\0SAMPLER_CUBE\0"
    "VERTEX_ATTRIB_ARRAY_ENABLED\0"
    "VERTEX_ATTRIB_ARRAY_SIZE\0"
    "VERTEX_ATTRIB_ARRAY_STRIDE\0"
    "VERTEX_ATTRIB_ARRAY_TYPE\0"
    "VERTEX_ATTRIB_ARRAY_NORMALIZED\0"
    "VERTEX_ATTRIB_ARRAY_POINTER\0"
    "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\0"
    "IMPLEMENTATION_COLOR_READ_TYPE\0"
    "IMPLEMENTATION_COLOR_READ_FORMAT\0"
    "COMPILE_STATUS\0LOW_FLOAT\0MEDIUM_FLOAT\0"
    "HIGH_FLOAT\0LOW_INT\0MEDIUM_INT\0HIGH_INT\0"
    "FRAMEBUFFER\0RENDERBUFFER\0RGBA4\0RGB5_A1\0"
    "RGB565\0DEPTH_COMPONENT16\0STENCIL_INDEX\0"
    "STENCIL_INDEX8\0DEPTH_STENCIL\0"
    "RENDERBUFFER_WIDTH\0RENDERBUFFER_HEIGHT\0"
    "RENDERBUFFER_INTERNAL_FORMAT\0"
    "RENDERBUFFER_RED_SIZE\0RENDERBUFFER_GREEN_SIZE\0"
    "RENDERBUFFER_BLUE_SIZE\0RENDERBUFFER_ALPHA_SIZE\0"
    "RENDERBUFFER_DEPTH_SIZE\0"
    "RENDERBUFFER_STENCIL_SIZE\0"
    "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\0"
    "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\0"
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\0"
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\0"
    "COLOR_ATTACHMENT0\0DEPTH_ATTACHMENT\0"
    "STENCIL_ATTACHMENT\0DEPTH_STENCIL_ATTACHMENT\0"
    "NONE\0FRAMEBUFFER_COMPLETE\0"
    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT\0"
    "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\0"
    "FRAMEBUFFER_INCOMPLETE_DIMENSIONS\0"
    "FRAMEBUFFER_UNSUPPORTED\0FRAMEBUFFER_BINDING\0"
    "RENDERBUFFER_BINDING\0MAX_RENDERBUFFER_SIZE\0"
    "INVALID_FRAMEBUFFER_OPERATION\0"
    "UNPACK_FLIP_Y_WEBGL\0UNPACK_PREMULTIPLY_ALPHA_WEBGL\0"
    "CONTEXT_LOST_WEBGL\0"
    "UNPACK_COLORSPACE_CONVERSION_WEBGL\0"
    "BROWSER_DEFAULT_WEBGL\0DEPTH_AND_COLOR_BUFFER_BIT\0"
    "DEPTH_AND_STENCIL_AND_COLOR_BUFFER_BIT\0"
    "FRAGMENT_SHADER_DERIVATIVE_HINT_OES\0"
    "UNMASKED_VENDOR_WEBGL\0UNMASKED_RENDERER_WEBGL\0"
    "COMPRESSED_RGB_S3TC_DXT1_EXT\0"
    "COMPRESSED_RGBA_S3TC_DXT1_EXT\0"
    "COMPRESSED_RGBA_S3TC_DXT3_EXT\0"
    "COMPRESSED_RGBA_S3TC_DXT5_EXT\0"
    "COMPRESSED_RGB_PVRTC_4BPPV1_IMG\0"
    "COMPRESSED_RGB_PVRTC_2BPPV1_IMG\0"
    "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\0"
    "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_QtCanvas3D__CanvasContext[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
     145,   14, // methods
     300, 1542, // properties
       1, 2742, // enums/sets
       0,    0, // constructors
       0,       // flags
       3,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    1,  739,    2, 0x06 /* Public */,
       5,    0,  742,    2, 0x06 /* Public */,
       6,    0,  743,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
       7,    0,  744,    2, 0x08 /* Private */,
       8,    1,  745,    2, 0x08 /* Private */,
      11,    1,  748,    2, 0x08 /* Private */,

 // methods: name, argc, parameters, tag, flags
      13,    0,  751,    2, 0x02 /* Public */,
      14,    1,  752,    2, 0x02 /* Public */,
      16,    0,  755,    2, 0x02 /* Public */,
      17,    0,  756,    2, 0x02 /* Public */,
      19,    2,  757,    2, 0x02 /* Public */,
      23,    0,  762,    2, 0x02 /* Public */,
      24,    0,  763,    2, 0x02 /* Public */,
      25,    0,  764,    2, 0x02 /* Public */,
      26,    1,  765,    2, 0x02 /* Public */,
      28,    1,  768,    2, 0x02 /* Public */,
      29,    2,  771,    2, 0x02 /* Public */,
      31,    1,  776,    2, 0x02 /* Public */,
      32,    1,  779,    2, 0x02 /* Public */,
      34,    7,  782,    2, 0x02 /* Public */,
      41,    8,  797,    2, 0x02 /* Public */,
      45,    8,  814,    2, 0x02 /* Public */,
      48,    8,  831,    2, 0x02 /* Public */,
      49,    9,  848,    2, 0x02 /* Public */,
      51,    9,  867,    2, 0x02 /* Public */,
      49,    6,  886,    2, 0x02 /* Public */,
      51,    7,  899,    2, 0x02 /* Public */,
      53,    3,  914,    2, 0x02 /* Public */,
      56,    3,  921,    2, 0x02 /* Public */,
      57,    0,  928,    2, 0x02 /* Public */,
      58,    1,  929,    2, 0x02 /* Public */,
      60,    2,  932,    2, 0x02 /* Public */,
      62,    1,  937,    2, 0x02 /* Public */,
      63,    4,  940,    2, 0x02 /* Public */,
      67,    5,  949,    2, 0x02 /* Public */,
      69,    1,  960,    2, 0x02 /* Public */,
      70,    0,  963,    2, 0x02 /* Public */,
      71,    2,  964,    2, 0x02 /* Public */,
      72,    4,  969,    2, 0x02 /* Public */,
      73,    1,  978,    2, 0x02 /* Public */,
      74,    1,  981,    2, 0x02 /* Public */,
      75,    2,  984,    2, 0x02 /* Public */,
      78,    1,  989,    2, 0x02 /* Public */,
      79,    1,  992,    2, 0x02 /* Public */,
      81,    1,  995,    2, 0x02 /* Public */,
      82,    2,  998,    2, 0x02 /* Public */,
      83,    1, 1003,    2, 0x02 /* Public */,
      84,    1, 1006,    2, 0x02 /* Public */,
      85,    2, 1009,    2, 0x02 /* Public */,
      87,    2, 1014,    2, 0x02 /* Public */,
      88,    3, 1019,    2, 0x02 /* Public */,
      89,    3, 1026,    2, 0x02 /* Public */,
      90,    4, 1033,    2, 0x02 /* Public */,
      92,    4, 1042,    2, 0x02 /* Public */,
      93,    5, 1051,    2, 0x02 /* Public */,
      95,    5, 1062,    2, 0x02 /* Public */,
      96,    2, 1073,    2, 0x02 /* Public */,
      98,    2, 1078,    2, 0x02 /* Public */,
      99,    2, 1083,    2, 0x02 /* Public */,
     100,    2, 1088,    2, 0x02 /* Public */,
     101,    2, 1093,    2, 0x02 /* Public */,
     102,    2, 1098,    2, 0x02 /* Public */,
     103,    2, 1103,    2, 0x02 /* Public */,
     104,    2, 1108,    2, 0x02 /* Public */,
     105,    3, 1113,    2, 0x02 /* Public */,
     107,    3, 1120,    2, 0x02 /* Public */,
     108,    3, 1127,    2, 0x02 /* Public */,
     109,    0, 1134,    2, 0x02 /* Public */,
     110,    2, 1135,    2, 0x02 /* Public */,
     112,    2, 1140,    2, 0x02 /* Public */,
     113,    1, 1145,    2, 0x02 /* Public */,
     114,    1, 1148,    2, 0x02 /* Public */,
     115,    1, 1151,    2, 0x02 /* Public */,
     116,    2, 1154,    2, 0x02 /* Public */,
     117,    2, 1159,    2, 0x02 /* Public */,
     118,    3, 1164,    2, 0x02 /* Public */,
     120,    1, 1171,    2, 0x02 /* Public */,
     121,    1, 1174,    2, 0x02 /* Public */,
     122,    1, 1177,    2, 0x02 /* Public */,
     123,    1, 1180,    2, 0x02 /* Public */,
     124,    1, 1183,    2, 0x02 /* Public */,
     125,    6, 1186,    2, 0x02 /* Public */,
     131,    2, 1199,    2, 0x02 /* Public */,
     132,    3, 1204,    2, 0x02 /* Public */,
     133,    4, 1211,    2, 0x02 /* Public */,
     134,    5, 1220,    2, 0x02 /* Public */,
     135,    2, 1231,    2, 0x02 /* Public */,
     136,    2, 1236,    2, 0x02 /* Public */,
     137,    2, 1241,    2, 0x02 /* Public */,
     138,    2, 1246,    2, 0x02 /* Public */,
     139,    2, 1251,    2, 0x02 /* Public */,
     141,    2, 1256,    2, 0x02 /* Public */,
     142,    1, 1261,    2, 0x02 /* Public */,
     143,    0, 1264,    2, 0x02 /* Public */,
     144,    2, 1265,    2, 0x02 /* Public */,
     145,    3, 1270,    2, 0x02 /* Public */,
     145,    3, 1277,    2, 0x02 /* Public */,
     148,    3, 1284,    2, 0x02 /* Public */,
     149,    2, 1291,    2, 0x02 /* Public */,
     150,    1, 1296,    2, 0x02 /* Public */,
     151,    1, 1299,    2, 0x02 /* Public */,
     152,    0, 1302,    2, 0x02 /* Public */,
     153,    1, 1303,    2, 0x02 /* Public */,
     155,    1, 1306,    2, 0x02 /* Public */,
     156,    1, 1309,    2, 0x02 /* Public */,
     157,    2, 1312,    2, 0x02 /* Public */,
     158,    2, 1317,    2, 0x02 /* Public */,
     146,    2, 1322,    2, 0x02 /* Public */,
     161,    1, 1327,    2, 0x02 /* Public */,
     163,    1, 1330,    2, 0x02 /* Public */,
     164,    1, 1333,    2, 0x02 /* Public */,
     165,    1, 1336,    2, 0x02 /* Public */,
     166,    1, 1339,    2, 0x02 /* Public */,
     168,    1, 1342,    2, 0x02 /* Public */,
     170,    1, 1345,    2, 0x02 /* Public */,
     172,    2, 1348,    2, 0x02 /* Public */,
     175,    1, 1353,    2, 0x02 /* Public */,
     177,    4, 1356,    2, 0x02 /* Public */,
     182,    1, 1365,    2, 0x02 /* Public */,
     184,    4, 1368,    2, 0x02 /* Public */,
     185,    4, 1377,    2, 0x02 /* Public */,
     186,    1, 1386,    2, 0x02 /* Public */,
     187,    2, 1389,    2, 0x02 /* Public */,
     190,    2, 1394,    2, 0x02 /* Public */,
     193,    4, 1399,    2, 0x02 /* Public */,
     198,    3, 1408,    2, 0x02 /* Public */,
     201,    4, 1415,    2, 0x02 /* Public */,
     202,    4, 1424,    2, 0x02 /* Public */,
     203,    4, 1433,    2, 0x02 /* Public */,
     204,    7, 1442,    2, 0x02 /* Public */,
     205,    2, 1457,    2, 0x02 /* Public */,
     207,    2, 1462,    2, 0x02 /* Public */,
     208,    1, 1467,    2, 0x02 /* Public */,
     209,    3, 1470,    2, 0x02 /* Public */,
     212,    4, 1477,    2, 0x02 /* Public */,
     214,    1, 1486,    2, 0x02 /* Public */,
     215,    2, 1489,    2, 0x02 /* Public */,
     216,    3, 1494,    2, 0x02 /* Public */,
     220,    4, 1501,    2, 0x02 /* Public */,
     221,    3, 1510,    2, 0x02 /* Public */,
     222,    2, 1517,    2, 0x02 /* Public */,
     223,    2, 1522,    2, 0x02 /* Public */,
     224,    2, 1527,    2, 0x02 /* Public */,
     225,    2, 1532,    2, 0x02 /* Public */,
     226,    2, 1537,    2, 0x02 /* Public */,

 // signals: parameters
    QMetaType::Void, 0x80000000 | 3,    4,
    QMetaType::Void,
    QMetaType::Void,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 9,   10,
    QMetaType::Void, QMetaType::QObjectStar,   12,

 // methods: parameters
    QMetaType::QVariantList,
    QMetaType::QVariant, QMetaType::QString,   15,
    QMetaType::Bool,
    0x80000000 | 18,
    0x80000000 | 18, 0x80000000 | 20, 0x80000000 | 20,   21,   22,
    QMetaType::Void,
    QMetaType::Void,
    0x80000000 | 18,
    QMetaType::Void, 0x80000000 | 18,   27,
    QMetaType::Void, 0x80000000 | 20,   27,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 18,   30,   27,
    QMetaType::Void, 0x80000000 | 20,   30,
    QMetaType::Bool, 0x80000000 | 18,   33,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, 0x80000000 | 18,   30,   35,   36,   37,   38,   39,   40,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, 0x80000000 | 20, 0x80000000 | 18,   30,   35,   42,   43,   37,   38,   44,   40,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int,   30,   35,   36,   46,   47,   37,   38,   39,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int,   30,   35,   42,   43,   46,   47,   37,   38,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18,   30,   35,   36,   37,   38,   39,   44,   50,   40,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18,   30,   35,   42,   43,   37,   38,   44,   50,   40,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18,   30,   35,   36,   44,   50,   52,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, QMetaType::Int, QMetaType::Int, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18,   30,   35,   42,   43,   44,   50,   52,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, QMetaType::Float,   30,   54,   55,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, QMetaType::Int,   30,   54,   55,
    0x80000000 | 18,
    QMetaType::Void, 0x80000000 | 18,   59,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 18,   30,   61,
    0x80000000 | 20, 0x80000000 | 20,   30,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18,   30,   64,   65,   66,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18, QMetaType::Int,   30,   64,   68,   27,   35,
    QMetaType::Bool, 0x80000000 | 18,   33,
    0x80000000 | 18,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 18,   30,   66,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, QMetaType::Int, QMetaType::Int,   30,   36,   37,   38,
    QMetaType::Bool, 0x80000000 | 18,   33,
    QMetaType::Void, 0x80000000 | 18,   66,
    QMetaType::Void, QMetaType::Float, QMetaType::Bool,   76,   77,
    0x80000000 | 18, 0x80000000 | 20,   50,
    QMetaType::Bool, 0x80000000 | 18,   80,
    QMetaType::Void, 0x80000000 | 18,   80,
    QMetaType::Void, 0x80000000 | 18, QMetaType::QString,   80,   82,
    0x80000000 | 18, 0x80000000 | 18,   80,
    QMetaType::Void, 0x80000000 | 18,   80,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Float,   86,   46,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Int,   86,   46,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Float, QMetaType::Float,   86,   46,   47,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Int, QMetaType::Int,   86,   46,   47,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Float, QMetaType::Float, QMetaType::Float,   86,   46,   47,   91,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Int, QMetaType::Int, QMetaType::Int,   86,   46,   47,   91,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Float, QMetaType::Float, QMetaType::Float, QMetaType::Float,   86,   46,   47,   91,   94,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int,   86,   46,   47,   91,   94,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,   86,   97,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Bool, 0x80000000 | 18,   86,  106,   76,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Bool, 0x80000000 | 18,   86,  106,   76,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Bool, 0x80000000 | 18,   86,  106,   76,
    0x80000000 | 18,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,  111,   80,
    QMetaType::Void, 0x80000000 | 18, 0x80000000 | 18,  111,   80,
    QMetaType::Void, 0x80000000 | 18,  111,
    QMetaType::Void, 0x80000000 | 18,  111,
    QMetaType::Void, 0x80000000 | 18,  111,
    0x80000000 | 18, 0x80000000 | 18, QMetaType::QString,  111,   15,
    QMetaType::Int, 0x80000000 | 18, QMetaType::QString,  111,   15,
    QMetaType::Void, 0x80000000 | 18, QMetaType::Int, QMetaType::QString,  111,  119,   15,
    0x80000000 | 18, 0x80000000 | 18,  111,
    QMetaType::Bool, 0x80000000 | 18,   33,
    QMetaType::Void, 0x80000000 | 18,  111,
    QMetaType::Void, QMetaType::Int,  119,
    QMetaType::Void, QMetaType::Int,  119,
    QMetaType::Void, QMetaType::Int, QMetaType::Int, 0x80000000 | 20, QMetaType::Bool, QMetaType::Int, QMetaType::Long,  126,  127,   50,  128,  129,  130,
    QMetaType::Void, QMetaType::UInt, QMetaType::Float,  126,   46,
    QMetaType::Void, QMetaType::UInt, QMetaType::Float, QMetaType::Float,  126,   46,   47,
    QMetaType::Void, QMetaType::UInt, QMetaType::Float, QMetaType::Float, QMetaType::Float,  126,   46,   47,   91,
    QMetaType::Void, QMetaType::UInt, QMetaType::Float, QMetaType::Float, QMetaType::Float, QMetaType::Float,  126,   46,   47,   91,   94,
    QMetaType::Void, QMetaType::UInt, 0x80000000 | 18,  126,   97,
    QMetaType::Void, QMetaType::UInt, 0x80000000 | 18,  126,   97,
    QMetaType::Void, QMetaType::UInt, 0x80000000 | 18,  126,   97,
    QMetaType::Void, QMetaType::UInt, 0x80000000 | 18,  126,   97,
    0x80000000 | 18, 0x80000000 | 18, 0x80000000 | 20,   80,  140,
    0x80000000 | 18, 0x80000000 | 18, 0x80000000 | 20,  111,  140,
    0x80000000 | 18, 0x80000000 | 18,   80,
    0x80000000 | 18,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 18,   30,   59,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Long, 0x80000000 | 20,   30,  127,  146,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 18, 0x80000000 | 20,   30,  147,  146,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, 0x80000000 | 18,   30,  130,  147,
    0x80000000 | 18, 0x80000000 | 20, 0x80000000 | 20,   30,   54,
    QMetaType::Bool, 0x80000000 | 18,   76,
    QMetaType::Void, 0x80000000 | 18,   59,
    0x80000000 | 20,
    QMetaType::Void, 0x80000000 | 20,  154,
    QMetaType::Void, 0x80000000 | 20,  154,
    QMetaType::Void, QMetaType::Float,   37,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int,   54,   55,
    QMetaType::Void, QMetaType::Float, QMetaType::Float,  159,  160,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20,   30,  154,
    QMetaType::Void, 0x80000000 | 20,  162,
    QMetaType::Bool, 0x80000000 | 20,  162,
    QMetaType::Void, 0x80000000 | 20,  162,
    0x80000000 | 18, 0x80000000 | 20,   54,
    QMetaType::Void, 0x80000000 | 20,  167,
    QMetaType::Void, QMetaType::Bool,  169,
    QMetaType::Void, 0x80000000 | 20,  171,
    QMetaType::Void, QMetaType::Float, QMetaType::Float,  173,  174,
    QMetaType::Void, QMetaType::Float,  176,
    QMetaType::Void, QMetaType::Float, QMetaType::Float, QMetaType::Float, QMetaType::Float,  178,  179,  180,  181,
    QMetaType::Void, QMetaType::Int,  183,
    QMetaType::Void, QMetaType::Bool, QMetaType::Bool, QMetaType::Bool, QMetaType::Bool,  178,  179,  180,  181,
    QMetaType::Void, QMetaType::Float, QMetaType::Float, QMetaType::Float, QMetaType::Float,  178,  179,  180,  181,
    QMetaType::Void, 0x80000000 | 20,  154,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20,  188,  189,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20,  191,  192,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20,  194,  195,  196,  197,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, QMetaType::Int,   50,  199,  200,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, 0x80000000 | 20, QMetaType::Long,  154,  200,   50,  130,
    QMetaType::Void, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int,   46,   47,   37,   38,
    QMetaType::Void, QMetaType::Int, QMetaType::Int, QMetaType::Int, QMetaType::Int,   46,   47,   37,   38,
    QMetaType::Void, QMetaType::Int, QMetaType::Int, QMetaType::Long, QMetaType::Long, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 18,   46,   47,   37,   38,   44,   50,   40,
    0x80000000 | 206, 0x80000000 | 18, QMetaType::UInt,  111,  119,
    0x80000000 | 206, 0x80000000 | 18, QMetaType::UInt,  111,  119,
    0x80000000 | 18, 0x80000000 | 18,  111,
    QMetaType::Void, 0x80000000 | 20, QMetaType::Int, QMetaType::UInt,  171,  210,  211,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, QMetaType::Int, QMetaType::UInt,  213,  171,  210,  211,
    QMetaType::Void, QMetaType::UInt,  211,
    QMetaType::Void, 0x80000000 | 20, QMetaType::UInt,  213,  211,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20,  217,  218,  219,
    QMetaType::Void, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20,  213,  217,  218,  219,
    0x80000000 | 18, 0x80000000 | 20, 0x80000000 | 20, 0x80000000 | 20,   30,   64,   54,
    0x80000000 | 18, 0x80000000 | 20, 0x80000000 | 20,   30,   54,
    0x80000000 | 18, 0x80000000 | 20, 0x80000000 | 20,   30,   54,
    0x80000000 | 18, 0x80000000 | 18, 0x80000000 | 18,  111,   86,
    QMetaType::UInt, QMetaType::UInt, 0x80000000 | 20,  119,   54,
    0x80000000 | 18, QMetaType::UInt, 0x80000000 | 20,  119,   54,

 // properties: name, type, flags
       4, 0x80000000 | 3, 0x00495009,
     227, QMetaType::UInt, 0x00495001,
     228, QMetaType::UInt, 0x00495001,
     229, 0x80000000 | 230, 0x00095009,
     231, 0x80000000 | 230, 0x00095009,
     232, 0x80000000 | 230, 0x00095009,
     233, 0x80000000 | 230, 0x00095009,
     234, 0x80000000 | 230, 0x00095009,
     235, 0x80000000 | 230, 0x00095009,
     236, 0x80000000 | 230, 0x00095009,
     237, 0x80000000 | 230, 0x00095009,
     238, 0x80000000 | 230, 0x00095009,
     239, 0x80000000 | 230, 0x00095009,
     240, 0x80000000 | 230, 0x00095009,
     241, 0x80000000 | 230, 0x00095009,
     242, 0x80000000 | 230, 0x00095009,
     243, 0x80000000 | 230, 0x00095009,
     244, 0x80000000 | 230, 0x00095009,
     245, 0x80000000 | 230, 0x00095009,
     246, 0x80000000 | 230, 0x00095009,
     247, 0x80000000 | 230, 0x00095009,
     248, 0x80000000 | 230, 0x00095009,
     249, 0x80000000 | 230, 0x00095009,
     250, 0x80000000 | 230, 0x00095009,
     251, 0x80000000 | 230, 0x00095009,
     252, 0x80000000 | 230, 0x00095009,
     253, 0x80000000 | 230, 0x00095009,
     254, 0x80000000 | 230, 0x00095009,
     255, 0x80000000 | 230, 0x00095009,
     256, 0x80000000 | 230, 0x00095009,
     257, 0x80000000 | 230, 0x00095009,
     258, 0x80000000 | 230, 0x00095009,
     259, 0x80000000 | 230, 0x00095009,
     260, 0x80000000 | 230, 0x00095009,
     261, 0x80000000 | 230, 0x00095009,
     262, 0x80000000 | 230, 0x00095009,
     263, 0x80000000 | 230, 0x00095009,
     264, 0x80000000 | 230, 0x00095009,
     265, 0x80000000 | 230, 0x00095009,
     266, 0x80000000 | 230, 0x00095009,
     267, 0x80000000 | 230, 0x00095009,
     268, 0x80000000 | 230, 0x00095009,
     269, 0x80000000 | 230, 0x00095009,
     270, 0x80000000 | 230, 0x00095009,
     271, 0x80000000 | 230, 0x00095009,
     272, 0x80000000 | 230, 0x00095009,
     273, 0x80000000 | 230, 0x00095009,
     274, 0x80000000 | 230, 0x00095009,
     275, 0x80000000 | 230, 0x00095009,
     276, 0x80000000 | 230, 0x00095009,
     277, 0x80000000 | 230, 0x00095009,
     278, 0x80000000 | 230, 0x00095009,
     279, 0x80000000 | 230, 0x00095009,
     280, 0x80000000 | 230, 0x00095009,
     281, 0x80000000 | 230, 0x00095009,
     282, 0x80000000 | 230, 0x00095009,
     283, 0x80000000 | 230, 0x00095009,
     284, 0x80000000 | 230, 0x00095009,
     285, 0x80000000 | 230, 0x00095009,
     286, 0x80000000 | 230, 0x00095009,
     287, 0x80000000 | 230, 0x00095009,
     288, 0x80000000 | 230, 0x00095009,
     289, 0x80000000 | 230, 0x00095009,
     290, 0x80000000 | 230, 0x00095009,
     291, 0x80000000 | 230, 0x00095009,
     292, 0x80000000 | 230, 0x00095009,
     293, 0x80000000 | 230, 0x00095009,
     294, 0x80000000 | 230, 0x00095009,
     295, 0x80000000 | 230, 0x00095009,
     296, 0x80000000 | 230, 0x00095009,
     297, 0x80000000 | 230, 0x00095009,
     298, 0x80000000 | 230, 0x00095009,
     299, 0x80000000 | 230, 0x00095009,
     300, 0x80000000 | 230, 0x00095009,
     301, 0x80000000 | 230, 0x00095009,
     302, 0x80000000 | 230, 0x00095009,
     303, 0x80000000 | 230, 0x00095009,
     304, 0x80000000 | 230, 0x00095009,
     305, 0x80000000 | 230, 0x00095009,
     306, 0x80000000 | 230, 0x00095009,
     307, 0x80000000 | 230, 0x00095009,
     308, 0x80000000 | 230, 0x00095009,
     309, 0x80000000 | 230, 0x00095009,
     310, 0x80000000 | 230, 0x00095009,
     311, 0x80000000 | 230, 0x00095009,
     312, 0x80000000 | 230, 0x00095009,
     313, 0x80000000 | 230, 0x00095009,
     314, 0x80000000 | 230, 0x00095009,
     315, 0x80000000 | 230, 0x00095009,
     316, 0x80000000 | 230, 0x00095009,
     317, 0x80000000 | 230, 0x00095009,
     318, 0x80000000 | 230, 0x00095009,
     319, 0x80000000 | 230, 0x00095009,
     320, 0x80000000 | 230, 0x00095009,
     321, 0x80000000 | 230, 0x00095009,
     322, 0x80000000 | 230, 0x00095009,
     323, 0x80000000 | 230, 0x00095009,
     324, 0x80000000 | 230, 0x00095009,
     325, 0x80000000 | 230, 0x00095009,
     326, 0x80000000 | 230, 0x00095009,
     327, 0x80000000 | 230, 0x00095009,
     328, 0x80000000 | 230, 0x00095009,
     329, 0x80000000 | 230, 0x00095009,
     330, 0x80000000 | 230, 0x00095009,
     331, 0x80000000 | 230, 0x00095009,
     332, 0x80000000 | 230, 0x00095009,
     333, 0x80000000 | 230, 0x00095009,
     334, 0x80000000 | 230, 0x00095009,
     335, 0x80000000 | 230, 0x00095009,
     336, 0x80000000 | 230, 0x00095009,
     337, 0x80000000 | 230, 0x00095009,
     338, 0x80000000 | 230, 0x00095009,
     339, 0x80000000 | 230, 0x00095009,
     340, 0x80000000 | 230, 0x00095009,
     341, 0x80000000 | 230, 0x00095009,
     342, 0x80000000 | 230, 0x00095009,
     343, 0x80000000 | 230, 0x00095009,
     344, 0x80000000 | 230, 0x00095009,
     345, 0x80000000 | 230, 0x00095009,
     346, 0x80000000 | 230, 0x00095009,
     347, 0x80000000 | 230, 0x00095009,
     348, 0x80000000 | 230, 0x00095009,
     349, 0x80000000 | 230, 0x00095009,
     350, 0x80000000 | 230, 0x00095009,
     351, 0x80000000 | 230, 0x00095009,
     352, 0x80000000 | 230, 0x00095009,
     353, 0x80000000 | 230, 0x00095009,
     354, 0x80000000 | 230, 0x00095009,
     355, 0x80000000 | 230, 0x00095009,
     356, 0x80000000 | 230, 0x00095009,
     357, 0x80000000 | 230, 0x00095009,
     358, 0x80000000 | 230, 0x00095009,
     359, 0x80000000 | 230, 0x00095009,
     360, 0x80000000 | 230, 0x00095009,
     361, 0x80000000 | 230, 0x00095009,
     362, 0x80000000 | 230, 0x00095009,
     363, 0x80000000 | 230, 0x00095009,
     364, 0x80000000 | 230, 0x00095009,
     365, 0x80000000 | 230, 0x00095009,
     366, 0x80000000 | 230, 0x00095009,
     367, 0x80000000 | 230, 0x00095009,
     368, 0x80000000 | 230, 0x00095009,
     369, 0x80000000 | 230, 0x00095009,
     370, 0x80000000 | 230, 0x00095009,
     371, 0x80000000 | 230, 0x00095009,
     372, 0x80000000 | 230, 0x00095009,
     373, 0x80000000 | 230, 0x00095009,
     374, 0x80000000 | 230, 0x00095009,
     375, 0x80000000 | 230, 0x00095009,
     376, 0x80000000 | 230, 0x00095009,
     377, 0x80000000 | 230, 0x00095009,
     378, 0x80000000 | 230, 0x00095009,
     379, 0x80000000 | 230, 0x00095009,
     380, 0x80000000 | 230, 0x00095009,
     381, 0x80000000 | 230, 0x00095009,
     382, 0x80000000 | 230, 0x00095009,
     383, 0x80000000 | 230, 0x00095009,
     384, 0x80000000 | 230, 0x00095009,
     385, 0x80000000 | 230, 0x00095009,
     386, 0x80000000 | 230, 0x00095009,
     387, 0x80000000 | 230, 0x00095009,
     388, 0x80000000 | 230, 0x00095009,
     389, 0x80000000 | 230, 0x00095009,
     390, 0x80000000 | 230, 0x00095009,
     391, 0x80000000 | 230, 0x00095009,
     392, 0x80000000 | 230, 0x00095009,
     393, 0x80000000 | 230, 0x00095009,
     394, 0x80000000 | 230, 0x00095009,
     395, 0x80000000 | 230, 0x00095009,
     396, 0x80000000 | 230, 0x00095009,
     397, 0x80000000 | 230, 0x00095009,
     398, 0x80000000 | 230, 0x00095009,
     399, 0x80000000 | 230, 0x00095009,
     400, 0x80000000 | 230, 0x00095009,
     401, 0x80000000 | 230, 0x00095009,
     402, 0x80000000 | 230, 0x00095009,
     403, 0x80000000 | 230, 0x00095009,
     404, 0x80000000 | 230, 0x00095009,
     405, 0x80000000 | 230, 0x00095009,
     406, 0x80000000 | 230, 0x00095009,
     407, 0x80000000 | 230, 0x00095009,
     408, 0x80000000 | 230, 0x00095009,
     409, 0x80000000 | 230, 0x00095009,
     410, 0x80000000 | 230, 0x00095009,
     411, 0x80000000 | 230, 0x00095009,
     412, 0x80000000 | 230, 0x00095009,
     413, 0x80000000 | 230, 0x00095009,
     414, 0x80000000 | 230, 0x00095009,
     415, 0x80000000 | 230, 0x00095009,
     416, 0x80000000 | 230, 0x00095009,
     417, 0x80000000 | 230, 0x00095009,
     418, 0x80000000 | 230, 0x00095009,
     419, 0x80000000 | 230, 0x00095009,
     420, 0x80000000 | 230, 0x00095009,
     421, 0x80000000 | 230, 0x00095009,
     422, 0x80000000 | 230, 0x00095009,
     423, 0x80000000 | 230, 0x00095009,
     424, 0x80000000 | 230, 0x00095009,
     425, 0x80000000 | 230, 0x00095009,
     426, 0x80000000 | 230, 0x00095009,
     427, 0x80000000 | 230, 0x00095009,
     428, 0x80000000 | 230, 0x00095009,
     429, 0x80000000 | 230, 0x00095009,
     430, 0x80000000 | 230, 0x00095009,
     431, 0x80000000 | 230, 0x00095009,
     432, 0x80000000 | 230, 0x00095009,
     433, 0x80000000 | 230, 0x00095009,
     434, 0x80000000 | 230, 0x00095009,
     435, 0x80000000 | 230, 0x00095009,
     436, 0x80000000 | 230, 0x00095009,
     437, 0x80000000 | 230, 0x00095009,
     438, 0x80000000 | 230, 0x00095009,
     439, 0x80000000 | 230, 0x00095009,
     440, 0x80000000 | 230, 0x00095009,
     441, 0x80000000 | 230, 0x00095009,
     442, 0x80000000 | 230, 0x00095009,
     443, 0x80000000 | 230, 0x00095009,
     444, 0x80000000 | 230, 0x00095009,
     445, 0x80000000 | 230, 0x00095009,
     446, 0x80000000 | 230, 0x00095009,
     447, 0x80000000 | 230, 0x00095009,
     448, 0x80000000 | 230, 0x00095009,
     449, 0x80000000 | 230, 0x00095009,
     450, 0x80000000 | 230, 0x00095009,
     451, 0x80000000 | 230, 0x00095009,
     452, 0x80000000 | 230, 0x00095009,
     453, 0x80000000 | 230, 0x00095009,
     454, 0x80000000 | 230, 0x00095009,
     455, 0x80000000 | 230, 0x00095009,
     456, 0x80000000 | 230, 0x00095009,
     457, 0x80000000 | 230, 0x00095009,
     458, 0x80000000 | 230, 0x00095009,
     459, 0x80000000 | 230, 0x00095009,
     460, 0x80000000 | 230, 0x00095009,
     461, 0x80000000 | 230, 0x00095009,
     462, 0x80000000 | 230, 0x00095009,
     463, 0x80000000 | 230, 0x00095009,
     464, 0x80000000 | 230, 0x00095009,
     465, 0x80000000 | 230, 0x00095009,
     466, 0x80000000 | 230, 0x00095009,
     467, 0x80000000 | 230, 0x00095009,
     468, 0x80000000 | 230, 0x00095009,
     469, 0x80000000 | 230, 0x00095009,
     470, 0x80000000 | 230, 0x00095009,
     471, 0x80000000 | 230, 0x00095009,
     472, 0x80000000 | 230, 0x00095009,
     473, 0x80000000 | 230, 0x00095009,
     474, 0x80000000 | 230, 0x00095009,
     475, 0x80000000 | 230, 0x00095009,
     476, 0x80000000 | 230, 0x00095009,
     477, 0x80000000 | 230, 0x00095009,
     478, 0x80000000 | 230, 0x00095009,
     479, 0x80000000 | 230, 0x00095009,
     480, 0x80000000 | 230, 0x00095009,
     481, 0x80000000 | 230, 0x00095009,
     482, 0x80000000 | 230, 0x00095009,
     483, 0x80000000 | 230, 0x00095009,
     484, 0x80000000 | 230, 0x00095009,
     485, 0x80000000 | 230, 0x00095009,
     486, 0x80000000 | 230, 0x00095009,
     487, 0x80000000 | 230, 0x00095009,
     488, 0x80000000 | 230, 0x00095009,
     489, 0x80000000 | 230, 0x00095009,
     490, 0x80000000 | 230, 0x00095009,
     491, 0x80000000 | 230, 0x00095009,
     492, 0x80000000 | 230, 0x00095009,
     493, 0x80000000 | 230, 0x00095009,
     494, 0x80000000 | 230, 0x00095009,
     495, 0x80000000 | 230, 0x00095009,
     496, 0x80000000 | 230, 0x00095009,
     497, 0x80000000 | 230, 0x00095009,
     498, 0x80000000 | 230, 0x00095009,
     499, 0x80000000 | 230, 0x00095009,
     500, 0x80000000 | 230, 0x00095009,
     501, 0x80000000 | 230, 0x00095009,
     502, 0x80000000 | 230, 0x00095009,
     503, 0x80000000 | 230, 0x00095009,
     504, 0x80000000 | 230, 0x00095009,
     505, 0x80000000 | 230, 0x00095009,
     506, 0x80000000 | 230, 0x00095009,
     507, 0x80000000 | 230, 0x00095009,
     508, 0x80000000 | 230, 0x00095009,
     509, 0x80000000 | 230, 0x00095009,
     510, 0x80000000 | 230, 0x00095009,
     511, 0x80000000 | 230, 0x00095009,
     512, 0x80000000 | 230, 0x00095009,
     513, 0x80000000 | 230, 0x00095009,
     514, 0x80000000 | 230, 0x00095009,
     515, 0x80000000 | 230, 0x00095009,
     516, 0x80000000 | 230, 0x00095009,
     517, 0x80000000 | 230, 0x00095009,
     518, 0x80000000 | 230, 0x00095009,
     519, 0x80000000 | 230, 0x00095009,
     520, 0x80000000 | 230, 0x00095009,
     521, 0x80000000 | 230, 0x00095009,
     522, 0x80000000 | 230, 0x00095009,
     523, 0x80000000 | 230, 0x00095009,
     524, 0x80000000 | 230, 0x00095009,
     525, 0x80000000 | 230, 0x00095009,
     526, 0x80000000 | 230, 0x00095009,

 // properties: notify_signal_id
       0,
       1,
       2,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,

 // enums: name, flags, count, data
      20, 0x0,  310, 2746,

 // enum data: key, value
     229, uint(QtCanvas3D::CanvasContext::DEPTH_BUFFER_BIT),
     231, uint(QtCanvas3D::CanvasContext::STENCIL_BUFFER_BIT),
     232, uint(QtCanvas3D::CanvasContext::COLOR_BUFFER_BIT),
     527, uint(QtCanvas3D::CanvasContext::DEPTH_AND_COLOR_BUFFER_BIT),
     528, uint(QtCanvas3D::CanvasContext::DEPTH_AND_STENCIL_AND_COLOR_BUFFER_BIT),
     233, uint(QtCanvas3D::CanvasContext::POINTS),
     234, uint(QtCanvas3D::CanvasContext::LINES),
     235, uint(QtCanvas3D::CanvasContext::LINE_LOOP),
     236, uint(QtCanvas3D::CanvasContext::LINE_STRIP),
     237, uint(QtCanvas3D::CanvasContext::TRIANGLES),
     238, uint(QtCanvas3D::CanvasContext::TRIANGLE_STRIP),
     239, uint(QtCanvas3D::CanvasContext::TRIANGLE_FAN),
     240, uint(QtCanvas3D::CanvasContext::ZERO),
     241, uint(QtCanvas3D::CanvasContext::ONE),
     242, uint(QtCanvas3D::CanvasContext::SRC_COLOR),
     243, uint(QtCanvas3D::CanvasContext::ONE_MINUS_SRC_COLOR),
     244, uint(QtCanvas3D::CanvasContext::SRC_ALPHA),
     245, uint(QtCanvas3D::CanvasContext::ONE_MINUS_SRC_ALPHA),
     246, uint(QtCanvas3D::CanvasContext::DST_ALPHA),
     247, uint(QtCanvas3D::CanvasContext::ONE_MINUS_DST_ALPHA),
     248, uint(QtCanvas3D::CanvasContext::DST_COLOR),
     249, uint(QtCanvas3D::CanvasContext::ONE_MINUS_DST_COLOR),
     250, uint(QtCanvas3D::CanvasContext::SRC_ALPHA_SATURATE),
     251, uint(QtCanvas3D::CanvasContext::FUNC_ADD),
     252, uint(QtCanvas3D::CanvasContext::BLEND_EQUATION),
     253, uint(QtCanvas3D::CanvasContext::BLEND_EQUATION_RGB),
     254, uint(QtCanvas3D::CanvasContext::BLEND_EQUATION_ALPHA),
     255, uint(QtCanvas3D::CanvasContext::FUNC_SUBTRACT),
     256, uint(QtCanvas3D::CanvasContext::FUNC_REVERSE_SUBTRACT),
     257, uint(QtCanvas3D::CanvasContext::BLEND_DST_RGB),
     258, uint(QtCanvas3D::CanvasContext::BLEND_SRC_RGB),
     259, uint(QtCanvas3D::CanvasContext::BLEND_DST_ALPHA),
     260, uint(QtCanvas3D::CanvasContext::BLEND_SRC_ALPHA),
     261, uint(QtCanvas3D::CanvasContext::CONSTANT_COLOR),
     262, uint(QtCanvas3D::CanvasContext::ONE_MINUS_CONSTANT_COLOR),
     263, uint(QtCanvas3D::CanvasContext::CONSTANT_ALPHA),
     264, uint(QtCanvas3D::CanvasContext::ONE_MINUS_CONSTANT_ALPHA),
     265, uint(QtCanvas3D::CanvasContext::BLEND_COLOR),
     266, uint(QtCanvas3D::CanvasContext::ARRAY_BUFFER),
     267, uint(QtCanvas3D::CanvasContext::ELEMENT_ARRAY_BUFFER),
     268, uint(QtCanvas3D::CanvasContext::ARRAY_BUFFER_BINDING),
     269, uint(QtCanvas3D::CanvasContext::ELEMENT_ARRAY_BUFFER_BINDING),
     270, uint(QtCanvas3D::CanvasContext::STREAM_DRAW),
     271, uint(QtCanvas3D::CanvasContext::STATIC_DRAW),
     272, uint(QtCanvas3D::CanvasContext::DYNAMIC_DRAW),
     273, uint(QtCanvas3D::CanvasContext::BUFFER_SIZE),
     274, uint(QtCanvas3D::CanvasContext::BUFFER_USAGE),
     275, uint(QtCanvas3D::CanvasContext::CURRENT_VERTEX_ATTRIB),
     276, uint(QtCanvas3D::CanvasContext::FRONT),
     277, uint(QtCanvas3D::CanvasContext::BACK),
     278, uint(QtCanvas3D::CanvasContext::FRONT_AND_BACK),
     279, uint(QtCanvas3D::CanvasContext::CULL_FACE),
     280, uint(QtCanvas3D::CanvasContext::BLEND),
     281, uint(QtCanvas3D::CanvasContext::DITHER),
     282, uint(QtCanvas3D::CanvasContext::STENCIL_TEST),
     283, uint(QtCanvas3D::CanvasContext::DEPTH_TEST),
     284, uint(QtCanvas3D::CanvasContext::SCISSOR_TEST),
     285, uint(QtCanvas3D::CanvasContext::POLYGON_OFFSET_FILL),
     286, uint(QtCanvas3D::CanvasContext::SAMPLE_ALPHA_TO_COVERAGE),
     287, uint(QtCanvas3D::CanvasContext::SAMPLE_COVERAGE),
     288, uint(QtCanvas3D::CanvasContext::NO_ERROR),
     289, uint(QtCanvas3D::CanvasContext::INVALID_ENUM),
     290, uint(QtCanvas3D::CanvasContext::INVALID_VALUE),
     291, uint(QtCanvas3D::CanvasContext::INVALID_OPERATION),
     292, uint(QtCanvas3D::CanvasContext::OUT_OF_MEMORY),
     293, uint(QtCanvas3D::CanvasContext::CW),
     294, uint(QtCanvas3D::CanvasContext::CCW),
     295, uint(QtCanvas3D::CanvasContext::LINE_WIDTH),
     296, uint(QtCanvas3D::CanvasContext::ALIASED_POINT_SIZE_RANGE),
     297, uint(QtCanvas3D::CanvasContext::ALIASED_LINE_WIDTH_RANGE),
     298, uint(QtCanvas3D::CanvasContext::CULL_FACE_MODE),
     299, uint(QtCanvas3D::CanvasContext::FRONT_FACE),
     300, uint(QtCanvas3D::CanvasContext::DEPTH_RANGE),
     301, uint(QtCanvas3D::CanvasContext::DEPTH_WRITEMASK),
     302, uint(QtCanvas3D::CanvasContext::DEPTH_CLEAR_VALUE),
     303, uint(QtCanvas3D::CanvasContext::DEPTH_FUNC),
     304, uint(QtCanvas3D::CanvasContext::STENCIL_CLEAR_VALUE),
     305, uint(QtCanvas3D::CanvasContext::STENCIL_FUNC),
     306, uint(QtCanvas3D::CanvasContext::STENCIL_FAIL),
     307, uint(QtCanvas3D::CanvasContext::STENCIL_PASS_DEPTH_FAIL),
     308, uint(QtCanvas3D::CanvasContext::STENCIL_PASS_DEPTH_PASS),
     309, uint(QtCanvas3D::CanvasContext::STENCIL_REF),
     310, uint(QtCanvas3D::CanvasContext::STENCIL_VALUE_MASK),
     311, uint(QtCanvas3D::CanvasContext::STENCIL_WRITEMASK),
     312, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_FUNC),
     313, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_FAIL),
     314, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_PASS_DEPTH_FAIL),
     315, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_PASS_DEPTH_PASS),
     316, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_REF),
     317, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_VALUE_MASK),
     318, uint(QtCanvas3D::CanvasContext::STENCIL_BACK_WRITEMASK),
     319, uint(QtCanvas3D::CanvasContext::VIEWPORT),
     320, uint(QtCanvas3D::CanvasContext::SCISSOR_BOX),
     321, uint(QtCanvas3D::CanvasContext::COLOR_CLEAR_VALUE),
     322, uint(QtCanvas3D::CanvasContext::COLOR_WRITEMASK),
     323, uint(QtCanvas3D::CanvasContext::UNPACK_ALIGNMENT),
     324, uint(QtCanvas3D::CanvasContext::PACK_ALIGNMENT),
     325, uint(QtCanvas3D::CanvasContext::MAX_TEXTURE_SIZE),
     326, uint(QtCanvas3D::CanvasContext::MAX_VIEWPORT_DIMS),
     327, uint(QtCanvas3D::CanvasContext::SUBPIXEL_BITS),
     328, uint(QtCanvas3D::CanvasContext::RED_BITS),
     329, uint(QtCanvas3D::CanvasContext::GREEN_BITS),
     330, uint(QtCanvas3D::CanvasContext::BLUE_BITS),
     331, uint(QtCanvas3D::CanvasContext::ALPHA_BITS),
     332, uint(QtCanvas3D::CanvasContext::DEPTH_BITS),
     333, uint(QtCanvas3D::CanvasContext::STENCIL_BITS),
     334, uint(QtCanvas3D::CanvasContext::POLYGON_OFFSET_UNITS),
     335, uint(QtCanvas3D::CanvasContext::POLYGON_OFFSET_FACTOR),
     336, uint(QtCanvas3D::CanvasContext::TEXTURE_BINDING_2D),
     337, uint(QtCanvas3D::CanvasContext::SAMPLE_BUFFERS),
     338, uint(QtCanvas3D::CanvasContext::SAMPLES),
     339, uint(QtCanvas3D::CanvasContext::SAMPLE_COVERAGE_VALUE),
     340, uint(QtCanvas3D::CanvasContext::SAMPLE_COVERAGE_INVERT),
     341, uint(QtCanvas3D::CanvasContext::COMPRESSED_TEXTURE_FORMATS),
     342, uint(QtCanvas3D::CanvasContext::DONT_CARE),
     343, uint(QtCanvas3D::CanvasContext::FASTEST),
     344, uint(QtCanvas3D::CanvasContext::NICEST),
     345, uint(QtCanvas3D::CanvasContext::GENERATE_MIPMAP_HINT),
     346, uint(QtCanvas3D::CanvasContext::BYTE),
     347, uint(QtCanvas3D::CanvasContext::UNSIGNED_BYTE),
     348, uint(QtCanvas3D::CanvasContext::SHORT),
     349, uint(QtCanvas3D::CanvasContext::UNSIGNED_SHORT),
     350, uint(QtCanvas3D::CanvasContext::INT),
     351, uint(QtCanvas3D::CanvasContext::UNSIGNED_INT),
     352, uint(QtCanvas3D::CanvasContext::FLOAT),
     353, uint(QtCanvas3D::CanvasContext::DEPTH_COMPONENT),
     354, uint(QtCanvas3D::CanvasContext::ALPHA),
     355, uint(QtCanvas3D::CanvasContext::RGB),
     356, uint(QtCanvas3D::CanvasContext::RGBA),
     357, uint(QtCanvas3D::CanvasContext::LUMINANCE),
     358, uint(QtCanvas3D::CanvasContext::LUMINANCE_ALPHA),
     359, uint(QtCanvas3D::CanvasContext::UNSIGNED_SHORT_4_4_4_4),
     360, uint(QtCanvas3D::CanvasContext::UNSIGNED_SHORT_5_5_5_1),
     361, uint(QtCanvas3D::CanvasContext::UNSIGNED_SHORT_5_6_5),
     362, uint(QtCanvas3D::CanvasContext::FRAGMENT_SHADER),
     363, uint(QtCanvas3D::CanvasContext::VERTEX_SHADER),
     364, uint(QtCanvas3D::CanvasContext::MAX_VERTEX_ATTRIBS),
     365, uint(QtCanvas3D::CanvasContext::MAX_VERTEX_UNIFORM_VECTORS),
     366, uint(QtCanvas3D::CanvasContext::MAX_VARYING_VECTORS),
     367, uint(QtCanvas3D::CanvasContext::MAX_COMBINED_TEXTURE_IMAGE_UNITS),
     368, uint(QtCanvas3D::CanvasContext::MAX_VERTEX_TEXTURE_IMAGE_UNITS),
     369, uint(QtCanvas3D::CanvasContext::MAX_TEXTURE_IMAGE_UNITS),
     370, uint(QtCanvas3D::CanvasContext::MAX_FRAGMENT_UNIFORM_VECTORS),
     371, uint(QtCanvas3D::CanvasContext::SHADER_TYPE),
     372, uint(QtCanvas3D::CanvasContext::DELETE_STATUS),
     373, uint(QtCanvas3D::CanvasContext::LINK_STATUS),
     374, uint(QtCanvas3D::CanvasContext::VALIDATE_STATUS),
     375, uint(QtCanvas3D::CanvasContext::ATTACHED_SHADERS),
     376, uint(QtCanvas3D::CanvasContext::ACTIVE_UNIFORMS),
     377, uint(QtCanvas3D::CanvasContext::ACTIVE_ATTRIBUTES),
     378, uint(QtCanvas3D::CanvasContext::SHADING_LANGUAGE_VERSION),
     379, uint(QtCanvas3D::CanvasContext::CURRENT_PROGRAM),
     380, uint(QtCanvas3D::CanvasContext::NEVER),
     381, uint(QtCanvas3D::CanvasContext::LESS),
     382, uint(QtCanvas3D::CanvasContext::EQUAL),
     383, uint(QtCanvas3D::CanvasContext::LEQUAL),
     384, uint(QtCanvas3D::CanvasContext::GREATER),
     385, uint(QtCanvas3D::CanvasContext::NOTEQUAL),
     386, uint(QtCanvas3D::CanvasContext::GEQUAL),
     387, uint(QtCanvas3D::CanvasContext::ALWAYS),
     388, uint(QtCanvas3D::CanvasContext::KEEP),
     389, uint(QtCanvas3D::CanvasContext::REPLACE),
     390, uint(QtCanvas3D::CanvasContext::INCR),
     391, uint(QtCanvas3D::CanvasContext::DECR),
     392, uint(QtCanvas3D::CanvasContext::INVERT),
     393, uint(QtCanvas3D::CanvasContext::INCR_WRAP),
     394, uint(QtCanvas3D::CanvasContext::DECR_WRAP),
     395, uint(QtCanvas3D::CanvasContext::VENDOR),
     396, uint(QtCanvas3D::CanvasContext::RENDERER),
     397, uint(QtCanvas3D::CanvasContext::VERSION),
     398, uint(QtCanvas3D::CanvasContext::NEAREST),
     399, uint(QtCanvas3D::CanvasContext::LINEAR),
     400, uint(QtCanvas3D::CanvasContext::NEAREST_MIPMAP_NEAREST),
     401, uint(QtCanvas3D::CanvasContext::LINEAR_MIPMAP_NEAREST),
     402, uint(QtCanvas3D::CanvasContext::NEAREST_MIPMAP_LINEAR),
     403, uint(QtCanvas3D::CanvasContext::LINEAR_MIPMAP_LINEAR),
     404, uint(QtCanvas3D::CanvasContext::TEXTURE_MAG_FILTER),
     405, uint(QtCanvas3D::CanvasContext::TEXTURE_MIN_FILTER),
     406, uint(QtCanvas3D::CanvasContext::TEXTURE_WRAP_S),
     407, uint(QtCanvas3D::CanvasContext::TEXTURE_WRAP_T),
     408, uint(QtCanvas3D::CanvasContext::TEXTURE_2D),
     409, uint(QtCanvas3D::CanvasContext::TEXTURE),
     410, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP),
     411, uint(QtCanvas3D::CanvasContext::TEXTURE_BINDING_CUBE_MAP),
     412, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP_POSITIVE_X),
     413, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP_NEGATIVE_X),
     414, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP_POSITIVE_Y),
     415, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP_NEGATIVE_Y),
     416, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP_POSITIVE_Z),
     417, uint(QtCanvas3D::CanvasContext::TEXTURE_CUBE_MAP_NEGATIVE_Z),
     418, uint(QtCanvas3D::CanvasContext::MAX_CUBE_MAP_TEXTURE_SIZE),
     419, uint(QtCanvas3D::CanvasContext::TEXTURE0),
     420, uint(QtCanvas3D::CanvasContext::TEXTURE1),
     421, uint(QtCanvas3D::CanvasContext::TEXTURE2),
     422, uint(QtCanvas3D::CanvasContext::TEXTURE3),
     423, uint(QtCanvas3D::CanvasContext::TEXTURE4),
     424, uint(QtCanvas3D::CanvasContext::TEXTURE5),
     425, uint(QtCanvas3D::CanvasContext::TEXTURE6),
     426, uint(QtCanvas3D::CanvasContext::TEXTURE7),
     427, uint(QtCanvas3D::CanvasContext::TEXTURE8),
     428, uint(QtCanvas3D::CanvasContext::TEXTURE9),
     429, uint(QtCanvas3D::CanvasContext::TEXTURE10),
     430, uint(QtCanvas3D::CanvasContext::TEXTURE11),
     431, uint(QtCanvas3D::CanvasContext::TEXTURE12),
     432, uint(QtCanvas3D::CanvasContext::TEXTURE13),
     433, uint(QtCanvas3D::CanvasContext::TEXTURE14),
     434, uint(QtCanvas3D::CanvasContext::TEXTURE15),
     435, uint(QtCanvas3D::CanvasContext::TEXTURE16),
     436, uint(QtCanvas3D::CanvasContext::TEXTURE17),
     437, uint(QtCanvas3D::CanvasContext::TEXTURE18),
     438, uint(QtCanvas3D::CanvasContext::TEXTURE19),
     439, uint(QtCanvas3D::CanvasContext::TEXTURE20),
     440, uint(QtCanvas3D::CanvasContext::TEXTURE21),
     441, uint(QtCanvas3D::CanvasContext::TEXTURE22),
     442, uint(QtCanvas3D::CanvasContext::TEXTURE23),
     443, uint(QtCanvas3D::CanvasContext::TEXTURE24),
     444, uint(QtCanvas3D::CanvasContext::TEXTURE25),
     445, uint(QtCanvas3D::CanvasContext::TEXTURE26),
     446, uint(QtCanvas3D::CanvasContext::TEXTURE27),
     447, uint(QtCanvas3D::CanvasContext::TEXTURE28),
     448, uint(QtCanvas3D::CanvasContext::TEXTURE29),
     449, uint(QtCanvas3D::CanvasContext::TEXTURE30),
     450, uint(QtCanvas3D::CanvasContext::TEXTURE31),
     451, uint(QtCanvas3D::CanvasContext::ACTIVE_TEXTURE),
     452, uint(QtCanvas3D::CanvasContext::REPEAT),
     453, uint(QtCanvas3D::CanvasContext::CLAMP_TO_EDGE),
     454, uint(QtCanvas3D::CanvasContext::MIRRORED_REPEAT),
     455, uint(QtCanvas3D::CanvasContext::FLOAT_VEC2),
     456, uint(QtCanvas3D::CanvasContext::FLOAT_VEC3),
     457, uint(QtCanvas3D::CanvasContext::FLOAT_VEC4),
     458, uint(QtCanvas3D::CanvasContext::INT_VEC2),
     459, uint(QtCanvas3D::CanvasContext::INT_VEC3),
     460, uint(QtCanvas3D::CanvasContext::INT_VEC4),
     461, uint(QtCanvas3D::CanvasContext::BOOL),
     462, uint(QtCanvas3D::CanvasContext::BOOL_VEC2),
     463, uint(QtCanvas3D::CanvasContext::BOOL_VEC3),
     464, uint(QtCanvas3D::CanvasContext::BOOL_VEC4),
     465, uint(QtCanvas3D::CanvasContext::FLOAT_MAT2),
     466, uint(QtCanvas3D::CanvasContext::FLOAT_MAT3),
     467, uint(QtCanvas3D::CanvasContext::FLOAT_MAT4),
     468, uint(QtCanvas3D::CanvasContext::SAMPLER_2D),
     469, uint(QtCanvas3D::CanvasContext::SAMPLER_CUBE),
     470, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_ENABLED),
     471, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_SIZE),
     472, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_STRIDE),
     473, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_TYPE),
     474, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_NORMALIZED),
     475, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_POINTER),
     476, uint(QtCanvas3D::CanvasContext::VERTEX_ATTRIB_ARRAY_BUFFER_BINDING),
     477, uint(QtCanvas3D::CanvasContext::IMPLEMENTATION_COLOR_READ_TYPE),
     478, uint(QtCanvas3D::CanvasContext::IMPLEMENTATION_COLOR_READ_FORMAT),
     479, uint(QtCanvas3D::CanvasContext::COMPILE_STATUS),
     529, uint(QtCanvas3D::CanvasContext::FRAGMENT_SHADER_DERIVATIVE_HINT_OES),
     480, uint(QtCanvas3D::CanvasContext::LOW_FLOAT),
     481, uint(QtCanvas3D::CanvasContext::MEDIUM_FLOAT),
     482, uint(QtCanvas3D::CanvasContext::HIGH_FLOAT),
     483, uint(QtCanvas3D::CanvasContext::LOW_INT),
     484, uint(QtCanvas3D::CanvasContext::MEDIUM_INT),
     485, uint(QtCanvas3D::CanvasContext::HIGH_INT),
     486, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER),
     487, uint(QtCanvas3D::CanvasContext::RENDERBUFFER),
     488, uint(QtCanvas3D::CanvasContext::RGBA4),
     489, uint(QtCanvas3D::CanvasContext::RGB5_A1),
     490, uint(QtCanvas3D::CanvasContext::RGB565),
     491, uint(QtCanvas3D::CanvasContext::DEPTH_COMPONENT16),
     492, uint(QtCanvas3D::CanvasContext::STENCIL_INDEX),
     493, uint(QtCanvas3D::CanvasContext::STENCIL_INDEX8),
     494, uint(QtCanvas3D::CanvasContext::DEPTH_STENCIL),
     495, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_WIDTH),
     496, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_HEIGHT),
     497, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_INTERNAL_FORMAT),
     498, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_RED_SIZE),
     499, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_GREEN_SIZE),
     500, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_BLUE_SIZE),
     501, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_ALPHA_SIZE),
     502, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_DEPTH_SIZE),
     503, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_STENCIL_SIZE),
     504, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE),
     505, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_ATTACHMENT_OBJECT_NAME),
     506, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL),
     507, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE),
     508, uint(QtCanvas3D::CanvasContext::COLOR_ATTACHMENT0),
     509, uint(QtCanvas3D::CanvasContext::DEPTH_ATTACHMENT),
     510, uint(QtCanvas3D::CanvasContext::STENCIL_ATTACHMENT),
     511, uint(QtCanvas3D::CanvasContext::DEPTH_STENCIL_ATTACHMENT),
     512, uint(QtCanvas3D::CanvasContext::NONE),
     513, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_COMPLETE),
     514, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_INCOMPLETE_ATTACHMENT),
     515, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT),
     516, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_INCOMPLETE_DIMENSIONS),
     517, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_UNSUPPORTED),
     518, uint(QtCanvas3D::CanvasContext::FRAMEBUFFER_BINDING),
     519, uint(QtCanvas3D::CanvasContext::RENDERBUFFER_BINDING),
     520, uint(QtCanvas3D::CanvasContext::MAX_RENDERBUFFER_SIZE),
     521, uint(QtCanvas3D::CanvasContext::INVALID_FRAMEBUFFER_OPERATION),
     522, uint(QtCanvas3D::CanvasContext::UNPACK_FLIP_Y_WEBGL),
     523, uint(QtCanvas3D::CanvasContext::UNPACK_PREMULTIPLY_ALPHA_WEBGL),
     524, uint(QtCanvas3D::CanvasContext::CONTEXT_LOST_WEBGL),
     525, uint(QtCanvas3D::CanvasContext::UNPACK_COLORSPACE_CONVERSION_WEBGL),
     526, uint(QtCanvas3D::CanvasContext::BROWSER_DEFAULT_WEBGL),
     530, uint(QtCanvas3D::CanvasContext::UNMASKED_VENDOR_WEBGL),
     531, uint(QtCanvas3D::CanvasContext::UNMASKED_RENDERER_WEBGL),
     532, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGB_S3TC_DXT1_EXT),
     533, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGBA_S3TC_DXT1_EXT),
     534, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGBA_S3TC_DXT3_EXT),
     535, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGBA_S3TC_DXT5_EXT),
     536, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGB_PVRTC_4BPPV1_IMG),
     537, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGB_PVRTC_2BPPV1_IMG),
     538, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGBA_PVRTC_4BPPV1_IMG),
     539, uint(QtCanvas3D::CanvasContext::COMPRESSED_RGBA_PVRTC_2BPPV1_IMG),

       0        // eod
};

void QtCanvas3D::CanvasContext::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        CanvasContext *_t = static_cast<CanvasContext *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->canvasChanged((*reinterpret_cast< Canvas*(*)>(_a[1]))); break;
        case 1: _t->drawingBufferWidthChanged(); break;
        case 2: _t->drawingBufferHeightChanged(); break;
        case 3: _t->handleFullCommandQueue(); break;
        case 4: _t->handleTextureIdResolved((*reinterpret_cast< QQuickItem*(*)>(_a[1]))); break;
        case 5: _t->handleObjectDeletion((*reinterpret_cast< QObject*(*)>(_a[1]))); break;
        case 6: { QVariantList _r = _t->getSupportedExtensions();
            if (_a[0]) *reinterpret_cast< QVariantList*>(_a[0]) = std::move(_r); }  break;
        case 7: { QVariant _r = _t->getExtension((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QVariant*>(_a[0]) = std::move(_r); }  break;
        case 8: { bool _r = _t->isContextLost();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 9: { QJSValue _r = _t->getContextAttributes();
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 10: { QJSValue _r = _t->getShaderPrecisionFormat((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 11: _t->flush(); break;
        case 12: _t->finish(); break;
        case 13: { QJSValue _r = _t->createTexture();
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 14: _t->deleteTexture((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 15: _t->activeTexture((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 16: _t->bindTexture((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 17: _t->generateMipmap((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 18: { bool _r = _t->isTexture((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 19: _t->compressedTexImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< QJSValue(*)>(_a[7]))); break;
        case 20: _t->compressedTexSubImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< glEnums(*)>(_a[7])),(*reinterpret_cast< QJSValue(*)>(_a[8]))); break;
        case 21: _t->copyTexImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< int(*)>(_a[7])),(*reinterpret_cast< int(*)>(_a[8]))); break;
        case 22: _t->copyTexSubImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< int(*)>(_a[7])),(*reinterpret_cast< int(*)>(_a[8]))); break;
        case 23: _t->texImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< glEnums(*)>(_a[7])),(*reinterpret_cast< glEnums(*)>(_a[8])),(*reinterpret_cast< QJSValue(*)>(_a[9]))); break;
        case 24: _t->texSubImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< glEnums(*)>(_a[7])),(*reinterpret_cast< glEnums(*)>(_a[8])),(*reinterpret_cast< QJSValue(*)>(_a[9]))); break;
        case 25: _t->texImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< glEnums(*)>(_a[4])),(*reinterpret_cast< glEnums(*)>(_a[5])),(*reinterpret_cast< QJSValue(*)>(_a[6]))); break;
        case 26: _t->texSubImage2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< glEnums(*)>(_a[5])),(*reinterpret_cast< glEnums(*)>(_a[6])),(*reinterpret_cast< QJSValue(*)>(_a[7]))); break;
        case 27: _t->texParameterf((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3]))); break;
        case 28: _t->texParameteri((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3]))); break;
        case 29: { QJSValue _r = _t->createFramebuffer();
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 30: _t->deleteFramebuffer((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 31: _t->bindFramebuffer((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 32: { glEnums _r = _t->checkFramebufferStatus((*reinterpret_cast< glEnums(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< glEnums*>(_a[0]) = std::move(_r); }  break;
        case 33: _t->framebufferRenderbuffer((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< QJSValue(*)>(_a[4]))); break;
        case 34: _t->framebufferTexture2D((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< QJSValue(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5]))); break;
        case 35: { bool _r = _t->isFramebuffer((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 36: { QJSValue _r = _t->createRenderbuffer();
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 37: _t->bindRenderbuffer((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 38: _t->renderbufferStorage((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4]))); break;
        case 39: { bool _r = _t->isRenderbuffer((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 40: _t->deleteRenderbuffer((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 41: _t->sampleCoverage((*reinterpret_cast< float(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2]))); break;
        case 42: { QJSValue _r = _t->createShader((*reinterpret_cast< glEnums(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 43: { bool _r = _t->isShader((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 44: _t->deleteShader((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 45: _t->shaderSource((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2]))); break;
        case 46: { QJSValue _r = _t->getShaderSource((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 47: _t->compileShader((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 48: _t->uniform1f((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2]))); break;
        case 49: _t->uniform1i((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2]))); break;
        case 50: _t->uniform2f((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3]))); break;
        case 51: _t->uniform2i((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3]))); break;
        case 52: _t->uniform3f((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3])),(*reinterpret_cast< float(*)>(_a[4]))); break;
        case 53: _t->uniform3i((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4]))); break;
        case 54: _t->uniform4f((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3])),(*reinterpret_cast< float(*)>(_a[4])),(*reinterpret_cast< float(*)>(_a[5]))); break;
        case 55: _t->uniform4i((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5]))); break;
        case 56: _t->uniform1fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 57: _t->uniform1iv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 58: _t->uniform2fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 59: _t->uniform2iv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 60: _t->uniform3fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 61: _t->uniform3iv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 62: _t->uniform4fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 63: _t->uniform4iv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 64: _t->uniformMatrix2fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< QJSValue(*)>(_a[3]))); break;
        case 65: _t->uniformMatrix3fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< QJSValue(*)>(_a[3]))); break;
        case 66: _t->uniformMatrix4fv((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< QJSValue(*)>(_a[3]))); break;
        case 67: { QJSValue _r = _t->createProgram();
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 68: _t->attachShader((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 69: _t->detachShader((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 70: _t->linkProgram((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 71: _t->useProgram((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 72: _t->validateProgram((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 73: { QJSValue _r = _t->getUniformLocation((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 74: { int _r = _t->getAttribLocation((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = std::move(_r); }  break;
        case 75: _t->bindAttribLocation((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3]))); break;
        case 76: { QJSValue _r = _t->getProgramInfoLog((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 77: { bool _r = _t->isProgram((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 78: _t->deleteProgram((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 79: _t->disableVertexAttribArray((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 80: _t->enableVertexAttribArray((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 81: _t->vertexAttribPointer((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< int(*)>(_a[5])),(*reinterpret_cast< long(*)>(_a[6]))); break;
        case 82: _t->vertexAttrib1f((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2]))); break;
        case 83: _t->vertexAttrib2f((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3]))); break;
        case 84: _t->vertexAttrib3f((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3])),(*reinterpret_cast< float(*)>(_a[4]))); break;
        case 85: _t->vertexAttrib4f((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3])),(*reinterpret_cast< float(*)>(_a[4])),(*reinterpret_cast< float(*)>(_a[5]))); break;
        case 86: _t->vertexAttrib1fv((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 87: _t->vertexAttrib2fv((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 88: _t->vertexAttrib3fv((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 89: _t->vertexAttrib4fv((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 90: { QJSValue _r = _t->getShaderParameter((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 91: { QJSValue _r = _t->getProgramParameter((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 92: { QJSValue _r = _t->getShaderInfoLog((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 93: { QJSValue _r = _t->createBuffer();
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 94: _t->bindBuffer((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2]))); break;
        case 95: _t->bufferData((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< long(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3]))); break;
        case 96: _t->bufferData((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3]))); break;
        case 97: _t->bufferSubData((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< QJSValue(*)>(_a[3]))); break;
        case 98: { QJSValue _r = _t->getBufferParameter((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 99: { bool _r = _t->isBuffer((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 100: _t->deleteBuffer((*reinterpret_cast< QJSValue(*)>(_a[1]))); break;
        case 101: { glEnums _r = _t->getError();
            if (_a[0]) *reinterpret_cast< glEnums*>(_a[0]) = std::move(_r); }  break;
        case 102: _t->cullFace((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 103: _t->frontFace((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 104: _t->lineWidth((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 105: _t->pixelStorei((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2]))); break;
        case 106: _t->polygonOffset((*reinterpret_cast< float(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2]))); break;
        case 107: _t->hint((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2]))); break;
        case 108: _t->enable((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 109: { bool _r = _t->isEnabled((*reinterpret_cast< glEnums(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 110: _t->disable((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 111: { QJSValue _r = _t->getParameter((*reinterpret_cast< glEnums(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 112: _t->clear((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 113: _t->depthMask((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 114: _t->depthFunc((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 115: _t->depthRange((*reinterpret_cast< float(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2]))); break;
        case 116: _t->clearDepth((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 117: _t->clearColor((*reinterpret_cast< float(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3])),(*reinterpret_cast< float(*)>(_a[4]))); break;
        case 118: _t->clearStencil((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 119: _t->colorMask((*reinterpret_cast< bool(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< bool(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4]))); break;
        case 120: _t->blendColor((*reinterpret_cast< float(*)>(_a[1])),(*reinterpret_cast< float(*)>(_a[2])),(*reinterpret_cast< float(*)>(_a[3])),(*reinterpret_cast< float(*)>(_a[4]))); break;
        case 121: _t->blendEquation((*reinterpret_cast< glEnums(*)>(_a[1]))); break;
        case 122: _t->blendEquationSeparate((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2]))); break;
        case 123: _t->blendFunc((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2]))); break;
        case 124: _t->blendFuncSeparate((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< glEnums(*)>(_a[4]))); break;
        case 125: _t->drawArrays((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3]))); break;
        case 126: _t->drawElements((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< long(*)>(_a[4]))); break;
        case 127: _t->viewport((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4]))); break;
        case 128: _t->scissor((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4]))); break;
        case 129: _t->readPixels((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< long(*)>(_a[3])),(*reinterpret_cast< long(*)>(_a[4])),(*reinterpret_cast< glEnums(*)>(_a[5])),(*reinterpret_cast< glEnums(*)>(_a[6])),(*reinterpret_cast< QJSValue(*)>(_a[7]))); break;
        case 130: { CanvasActiveInfo* _r = _t->getActiveAttrib((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< uint(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< CanvasActiveInfo**>(_a[0]) = std::move(_r); }  break;
        case 131: { CanvasActiveInfo* _r = _t->getActiveUniform((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< uint(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< CanvasActiveInfo**>(_a[0]) = std::move(_r); }  break;
        case 132: { QJSValue _r = _t->getAttachedShaders((*reinterpret_cast< QJSValue(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 133: _t->stencilFunc((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< uint(*)>(_a[3]))); break;
        case 134: _t->stencilFuncSeparate((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< uint(*)>(_a[4]))); break;
        case 135: _t->stencilMask((*reinterpret_cast< uint(*)>(_a[1]))); break;
        case 136: _t->stencilMaskSeparate((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< uint(*)>(_a[2]))); break;
        case 137: _t->stencilOp((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3]))); break;
        case 138: _t->stencilOpSeparate((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])),(*reinterpret_cast< glEnums(*)>(_a[4]))); break;
        case 139: { QJSValue _r = _t->getFramebufferAttachmentParameter((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])),(*reinterpret_cast< glEnums(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 140: { QJSValue _r = _t->getRenderbufferParameter((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 141: { QJSValue _r = _t->getTexParameter((*reinterpret_cast< glEnums(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 142: { QJSValue _r = _t->getUniform((*reinterpret_cast< QJSValue(*)>(_a[1])),(*reinterpret_cast< QJSValue(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        case 143: { uint _r = _t->getVertexAttribOffset((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< uint*>(_a[0]) = std::move(_r); }  break;
        case 144: { QJSValue _r = _t->getVertexAttrib((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< glEnums(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QJSValue*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        switch (_id) {
        default: *reinterpret_cast<int*>(_a[0]) = -1; break;
        case 4:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QQuickItem* >(); break;
            }
            break;
        case 14:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 16:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 18:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 19:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 6:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 20:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 7:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 23:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 8:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 24:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 8:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 25:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 5:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 26:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 6:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 30:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 31:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 33:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 3:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 34:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 3:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 35:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 37:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 39:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 40:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 43:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 44:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 45:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 46:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 47:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 48:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 49:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 50:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 51:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 52:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 53:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 54:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 55:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 56:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 57:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 58:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 59:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 60:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 61:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 62:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 63:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 64:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 2:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 65:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 2:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 66:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 2:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 68:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 69:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 70:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 71:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 72:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 73:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 74:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 75:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 76:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 77:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 78:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 86:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 87:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 88:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 89:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 90:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 91:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 92:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 94:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 96:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 97:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 2:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 99:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 100:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 129:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 6:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 130:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 131:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 132:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        case 142:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 1:
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QJSValue >(); break;
            }
            break;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (CanvasContext::*_t)(Canvas * );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&CanvasContext::canvasChanged)) {
                *result = 0;
                return;
            }
        }
        {
            typedef void (CanvasContext::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&CanvasContext::drawingBufferWidthChanged)) {
                *result = 1;
                return;
            }
        }
        {
            typedef void (CanvasContext::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&CanvasContext::drawingBufferHeightChanged)) {
                *result = 2;
                return;
            }
        }
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        CanvasContext *_t = static_cast<CanvasContext *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< Canvas**>(_v) = _t->canvas(); break;
        case 1: *reinterpret_cast< uint*>(_v) = _t->drawingBufferWidth(); break;
        case 2: *reinterpret_cast< uint*>(_v) = _t->drawingBufferHeight(); break;
        case 3: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_BUFFER_BIT_read(); break;
        case 4: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BUFFER_BIT_read(); break;
        case 5: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->COLOR_BUFFER_BIT_read(); break;
        case 6: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->POINTS_read(); break;
        case 7: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINES_read(); break;
        case 8: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINE_LOOP_read(); break;
        case 9: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINE_STRIP_read(); break;
        case 10: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TRIANGLES_read(); break;
        case 11: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TRIANGLE_STRIP_read(); break;
        case 12: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TRIANGLE_FAN_read(); break;
        case 13: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ZERO_read(); break;
        case 14: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_read(); break;
        case 15: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SRC_COLOR_read(); break;
        case 16: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_MINUS_SRC_COLOR_read(); break;
        case 17: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SRC_ALPHA_read(); break;
        case 18: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_MINUS_SRC_ALPHA_read(); break;
        case 19: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DST_ALPHA_read(); break;
        case 20: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_MINUS_DST_ALPHA_read(); break;
        case 21: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DST_COLOR_read(); break;
        case 22: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_MINUS_DST_COLOR_read(); break;
        case 23: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SRC_ALPHA_SATURATE_read(); break;
        case 24: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FUNC_ADD_read(); break;
        case 25: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_EQUATION_read(); break;
        case 26: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_EQUATION_RGB_read(); break;
        case 27: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_EQUATION_ALPHA_read(); break;
        case 28: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FUNC_SUBTRACT_read(); break;
        case 29: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FUNC_REVERSE_SUBTRACT_read(); break;
        case 30: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_DST_RGB_read(); break;
        case 31: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_SRC_RGB_read(); break;
        case 32: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_DST_ALPHA_read(); break;
        case 33: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_SRC_ALPHA_read(); break;
        case 34: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CONSTANT_COLOR_read(); break;
        case 35: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_MINUS_CONSTANT_COLOR_read(); break;
        case 36: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CONSTANT_ALPHA_read(); break;
        case 37: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ONE_MINUS_CONSTANT_ALPHA_read(); break;
        case 38: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_COLOR_read(); break;
        case 39: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ARRAY_BUFFER_read(); break;
        case 40: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ELEMENT_ARRAY_BUFFER_read(); break;
        case 41: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ARRAY_BUFFER_BINDING_read(); break;
        case 42: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ELEMENT_ARRAY_BUFFER_BINDING_read(); break;
        case 43: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STREAM_DRAW_read(); break;
        case 44: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STATIC_DRAW_read(); break;
        case 45: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DYNAMIC_DRAW_read(); break;
        case 46: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BUFFER_SIZE_read(); break;
        case 47: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BUFFER_USAGE_read(); break;
        case 48: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CURRENT_VERTEX_ATTRIB_read(); break;
        case 49: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRONT_read(); break;
        case 50: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BACK_read(); break;
        case 51: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRONT_AND_BACK_read(); break;
        case 52: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CULL_FACE_read(); break;
        case 53: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLEND_read(); break;
        case 54: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DITHER_read(); break;
        case 55: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_TEST_read(); break;
        case 56: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_TEST_read(); break;
        case 57: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SCISSOR_TEST_read(); break;
        case 58: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->POLYGON_OFFSET_FILL_read(); break;
        case 59: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLE_ALPHA_TO_COVERAGE_read(); break;
        case 60: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLE_COVERAGE_read(); break;
        case 61: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NO_ERROR_read(); break;
        case 62: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INVALID_ENUM_read(); break;
        case 63: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INVALID_VALUE_read(); break;
        case 64: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INVALID_OPERATION_read(); break;
        case 65: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->OUT_OF_MEMORY_read(); break;
        case 66: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CW_read(); break;
        case 67: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CCW_read(); break;
        case 68: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINE_WIDTH_read(); break;
        case 69: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ALIASED_POINT_SIZE_RANGE_read(); break;
        case 70: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ALIASED_LINE_WIDTH_RANGE_read(); break;
        case 71: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CULL_FACE_MODE_read(); break;
        case 72: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRONT_FACE_read(); break;
        case 73: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_RANGE_read(); break;
        case 74: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_WRITEMASK_read(); break;
        case 75: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_CLEAR_VALUE_read(); break;
        case 76: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_FUNC_read(); break;
        case 77: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_CLEAR_VALUE_read(); break;
        case 78: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_FUNC_read(); break;
        case 79: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_FAIL_read(); break;
        case 80: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_PASS_DEPTH_FAIL_read(); break;
        case 81: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_PASS_DEPTH_PASS_read(); break;
        case 82: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_REF_read(); break;
        case 83: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_VALUE_MASK_read(); break;
        case 84: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_WRITEMASK_read(); break;
        case 85: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_FUNC_read(); break;
        case 86: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_FAIL_read(); break;
        case 87: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_PASS_DEPTH_FAIL_read(); break;
        case 88: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_PASS_DEPTH_PASS_read(); break;
        case 89: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_REF_read(); break;
        case 90: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_VALUE_MASK_read(); break;
        case 91: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BACK_WRITEMASK_read(); break;
        case 92: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VIEWPORT_read(); break;
        case 93: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SCISSOR_BOX_read(); break;
        case 94: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->COLOR_CLEAR_VALUE_read(); break;
        case 95: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->COLOR_WRITEMASK_read(); break;
        case 96: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNPACK_ALIGNMENT_read(); break;
        case 97: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->PACK_ALIGNMENT_read(); break;
        case 98: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_TEXTURE_SIZE_read(); break;
        case 99: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_VIEWPORT_DIMS_read(); break;
        case 100: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SUBPIXEL_BITS_read(); break;
        case 101: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RED_BITS_read(); break;
        case 102: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->GREEN_BITS_read(); break;
        case 103: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BLUE_BITS_read(); break;
        case 104: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ALPHA_BITS_read(); break;
        case 105: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_BITS_read(); break;
        case 106: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_BITS_read(); break;
        case 107: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->POLYGON_OFFSET_UNITS_read(); break;
        case 108: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->POLYGON_OFFSET_FACTOR_read(); break;
        case 109: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_BINDING_2D_read(); break;
        case 110: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLE_BUFFERS_read(); break;
        case 111: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLES_read(); break;
        case 112: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLE_COVERAGE_VALUE_read(); break;
        case 113: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLE_COVERAGE_INVERT_read(); break;
        case 114: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->COMPRESSED_TEXTURE_FORMATS_read(); break;
        case 115: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DONT_CARE_read(); break;
        case 116: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FASTEST_read(); break;
        case 117: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NICEST_read(); break;
        case 118: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->GENERATE_MIPMAP_HINT_read(); break;
        case 119: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BYTE_read(); break;
        case 120: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNSIGNED_BYTE_read(); break;
        case 121: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SHORT_read(); break;
        case 122: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNSIGNED_SHORT_read(); break;
        case 123: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INT_read(); break;
        case 124: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNSIGNED_INT_read(); break;
        case 125: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_read(); break;
        case 126: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_COMPONENT_read(); break;
        case 127: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ALPHA_read(); break;
        case 128: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RGB_read(); break;
        case 129: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RGBA_read(); break;
        case 130: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LUMINANCE_read(); break;
        case 131: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LUMINANCE_ALPHA_read(); break;
        case 132: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNSIGNED_SHORT_4_4_4_4_read(); break;
        case 133: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNSIGNED_SHORT_5_5_5_1_read(); break;
        case 134: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNSIGNED_SHORT_5_6_5_read(); break;
        case 135: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAGMENT_SHADER_read(); break;
        case 136: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_SHADER_read(); break;
        case 137: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_VERTEX_ATTRIBS_read(); break;
        case 138: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_VERTEX_UNIFORM_VECTORS_read(); break;
        case 139: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_VARYING_VECTORS_read(); break;
        case 140: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_COMBINED_TEXTURE_IMAGE_UNITS_read(); break;
        case 141: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_VERTEX_TEXTURE_IMAGE_UNITS_read(); break;
        case 142: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_TEXTURE_IMAGE_UNITS_read(); break;
        case 143: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_FRAGMENT_UNIFORM_VECTORS_read(); break;
        case 144: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SHADER_TYPE_read(); break;
        case 145: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DELETE_STATUS_read(); break;
        case 146: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINK_STATUS_read(); break;
        case 147: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VALIDATE_STATUS_read(); break;
        case 148: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ATTACHED_SHADERS_read(); break;
        case 149: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ACTIVE_UNIFORMS_read(); break;
        case 150: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ACTIVE_ATTRIBUTES_read(); break;
        case 151: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SHADING_LANGUAGE_VERSION_read(); break;
        case 152: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CURRENT_PROGRAM_read(); break;
        case 153: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NEVER_read(); break;
        case 154: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LESS_read(); break;
        case 155: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->EQUAL_read(); break;
        case 156: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LEQUAL_read(); break;
        case 157: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->GREATER_read(); break;
        case 158: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NOTEQUAL_read(); break;
        case 159: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->GEQUAL_read(); break;
        case 160: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ALWAYS_read(); break;
        case 161: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->KEEP_read(); break;
        case 162: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->REPLACE_read(); break;
        case 163: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INCR_read(); break;
        case 164: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DECR_read(); break;
        case 165: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INVERT_read(); break;
        case 166: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INCR_WRAP_read(); break;
        case 167: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DECR_WRAP_read(); break;
        case 168: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VENDOR_read(); break;
        case 169: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERER_read(); break;
        case 170: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERSION_read(); break;
        case 171: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NEAREST_read(); break;
        case 172: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINEAR_read(); break;
        case 173: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NEAREST_MIPMAP_NEAREST_read(); break;
        case 174: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINEAR_MIPMAP_NEAREST_read(); break;
        case 175: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NEAREST_MIPMAP_LINEAR_read(); break;
        case 176: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LINEAR_MIPMAP_LINEAR_read(); break;
        case 177: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_MAG_FILTER_read(); break;
        case 178: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_MIN_FILTER_read(); break;
        case 179: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_WRAP_S_read(); break;
        case 180: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_WRAP_T_read(); break;
        case 181: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_2D_read(); break;
        case 182: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_read(); break;
        case 183: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_read(); break;
        case 184: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_BINDING_CUBE_MAP_read(); break;
        case 185: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_POSITIVE_X_read(); break;
        case 186: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_NEGATIVE_X_read(); break;
        case 187: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_POSITIVE_Y_read(); break;
        case 188: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_NEGATIVE_Y_read(); break;
        case 189: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_POSITIVE_Z_read(); break;
        case 190: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE_CUBE_MAP_NEGATIVE_Z_read(); break;
        case 191: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_CUBE_MAP_TEXTURE_SIZE_read(); break;
        case 192: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE0_read(); break;
        case 193: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE1_read(); break;
        case 194: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE2_read(); break;
        case 195: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE3_read(); break;
        case 196: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE4_read(); break;
        case 197: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE5_read(); break;
        case 198: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE6_read(); break;
        case 199: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE7_read(); break;
        case 200: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE8_read(); break;
        case 201: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE9_read(); break;
        case 202: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE10_read(); break;
        case 203: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE11_read(); break;
        case 204: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE12_read(); break;
        case 205: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE13_read(); break;
        case 206: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE14_read(); break;
        case 207: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE15_read(); break;
        case 208: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE16_read(); break;
        case 209: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE17_read(); break;
        case 210: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE18_read(); break;
        case 211: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE19_read(); break;
        case 212: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE20_read(); break;
        case 213: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE21_read(); break;
        case 214: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE22_read(); break;
        case 215: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE23_read(); break;
        case 216: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE24_read(); break;
        case 217: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE25_read(); break;
        case 218: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE26_read(); break;
        case 219: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE27_read(); break;
        case 220: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE28_read(); break;
        case 221: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE29_read(); break;
        case 222: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE30_read(); break;
        case 223: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->TEXTURE31_read(); break;
        case 224: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->ACTIVE_TEXTURE_read(); break;
        case 225: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->REPEAT_read(); break;
        case 226: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CLAMP_TO_EDGE_read(); break;
        case 227: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MIRRORED_REPEAT_read(); break;
        case 228: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_VEC2_read(); break;
        case 229: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_VEC3_read(); break;
        case 230: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_VEC4_read(); break;
        case 231: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INT_VEC2_read(); break;
        case 232: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INT_VEC3_read(); break;
        case 233: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INT_VEC4_read(); break;
        case 234: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BOOL_read(); break;
        case 235: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BOOL_VEC2_read(); break;
        case 236: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BOOL_VEC3_read(); break;
        case 237: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BOOL_VEC4_read(); break;
        case 238: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_MAT2_read(); break;
        case 239: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_MAT3_read(); break;
        case 240: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FLOAT_MAT4_read(); break;
        case 241: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLER_2D_read(); break;
        case 242: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->SAMPLER_CUBE_read(); break;
        case 243: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_ENABLED_read(); break;
        case 244: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_SIZE_read(); break;
        case 245: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_STRIDE_read(); break;
        case 246: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_TYPE_read(); break;
        case 247: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_NORMALIZED_read(); break;
        case 248: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_POINTER_read(); break;
        case 249: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_read(); break;
        case 250: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->IMPLEMENTATION_COLOR_READ_TYPE_read(); break;
        case 251: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->IMPLEMENTATION_COLOR_READ_FORMAT_read(); break;
        case 252: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->COMPILE_STATUS_read(); break;
        case 253: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LOW_FLOAT_read(); break;
        case 254: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MEDIUM_FLOAT_read(); break;
        case 255: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->HIGH_FLOAT_read(); break;
        case 256: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->LOW_INT_read(); break;
        case 257: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MEDIUM_INT_read(); break;
        case 258: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->HIGH_INT_read(); break;
        case 259: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_read(); break;
        case 260: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_read(); break;
        case 261: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RGBA4_read(); break;
        case 262: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RGB5_A1_read(); break;
        case 263: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RGB565_read(); break;
        case 264: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_COMPONENT16_read(); break;
        case 265: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_INDEX_read(); break;
        case 266: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_INDEX8_read(); break;
        case 267: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_STENCIL_read(); break;
        case 268: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_WIDTH_read(); break;
        case 269: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_HEIGHT_read(); break;
        case 270: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_INTERNAL_FORMAT_read(); break;
        case 271: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_RED_SIZE_read(); break;
        case 272: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_GREEN_SIZE_read(); break;
        case 273: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_BLUE_SIZE_read(); break;
        case 274: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_ALPHA_SIZE_read(); break;
        case 275: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_DEPTH_SIZE_read(); break;
        case 276: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_STENCIL_SIZE_read(); break;
        case 277: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_read(); break;
        case 278: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_read(); break;
        case 279: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_read(); break;
        case 280: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_read(); break;
        case 281: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->COLOR_ATTACHMENT0_read(); break;
        case 282: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_ATTACHMENT_read(); break;
        case 283: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->STENCIL_ATTACHMENT_read(); break;
        case 284: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->DEPTH_STENCIL_ATTACHMENT_read(); break;
        case 285: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->NONE_read(); break;
        case 286: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_COMPLETE_read(); break;
        case 287: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_INCOMPLETE_ATTACHMENT_read(); break;
        case 288: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_read(); break;
        case 289: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_INCOMPLETE_DIMENSIONS_read(); break;
        case 290: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_UNSUPPORTED_read(); break;
        case 291: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->FRAMEBUFFER_BINDING_read(); break;
        case 292: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->RENDERBUFFER_BINDING_read(); break;
        case 293: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->MAX_RENDERBUFFER_SIZE_read(); break;
        case 294: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->INVALID_FRAMEBUFFER_OPERATION_read(); break;
        case 295: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNPACK_FLIP_Y_WEBGL_read(); break;
        case 296: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNPACK_PREMULTIPLY_ALPHA_WEBGL_read(); break;
        case 297: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->CONTEXT_LOST_WEBGL_read(); break;
        case 298: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->UNPACK_COLORSPACE_CONVERSION_WEBGL_read(); break;
        case 299: *reinterpret_cast< QtCanvas3D::CanvasContext::glEnums*>(_v) = _t->BROWSER_DEFAULT_WEBGL_read(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
}

const QMetaObject QtCanvas3D::CanvasContext::staticMetaObject = {
    { &CanvasAbstractObject::staticMetaObject, qt_meta_stringdata_QtCanvas3D__CanvasContext.data,
      qt_meta_data_QtCanvas3D__CanvasContext,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *QtCanvas3D::CanvasContext::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *QtCanvas3D::CanvasContext::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_QtCanvas3D__CanvasContext.stringdata0))
        return static_cast<void*>(this);
    return CanvasAbstractObject::qt_metacast(_clname);
}

int QtCanvas3D::CanvasContext::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = CanvasAbstractObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 145)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 145;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 145)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 145;
    }
#ifndef QT_NO_PROPERTIES
   else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 300;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 300;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 300;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 300;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 300;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 300;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void QtCanvas3D::CanvasContext::canvasChanged(Canvas * _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}

// SIGNAL 1
void QtCanvas3D::CanvasContext::drawingBufferWidthChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void QtCanvas3D::CanvasContext::drawingBufferHeightChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
