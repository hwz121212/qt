/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -i geocluetypes.h -p geoclue_interface.h: org.freedesktop.Geoclue.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GEOCLUE_INTERFACE_H
#define GEOCLUE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "geocluetypes.h"

/*
 * Proxy class for interface org.freedesktop.Geoclue
 */
class OrgFreedesktopGeoclueInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Geoclue"; }

public:
    OrgFreedesktopGeoclueInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopGeoclueInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddReference()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("AddReference"), argumentList);
    }

    inline QDBusPendingReply<QString, QString> GetProviderInfo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetProviderInfo"), argumentList);
    }
    inline QDBusReply<QString> GetProviderInfo(QString &description)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetProviderInfo"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            description = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<int> GetStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetStatus"), argumentList);
    }

    inline QDBusPendingReply<> RemoveReference()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RemoveReference"), argumentList);
    }

    inline QDBusPendingReply<> SetOptions(const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("SetOptions"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void StatusChanged(int status);
};

#endif
