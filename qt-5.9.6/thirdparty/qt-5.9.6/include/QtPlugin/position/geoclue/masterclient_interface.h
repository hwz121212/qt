/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -i geocluetypes.h -p masterclient_interface.h: org.freedesktop.Geoclue.MasterClient.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MASTERCLIENT_INTERFACE_H
#define MASTERCLIENT_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "geocluetypes.h"

/*
 * Proxy class for interface org.freedesktop.Geoclue.MasterClient
 */
class OrgFreedesktopGeoclueMasterClientInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Geoclue.MasterClient"; }

public:
    OrgFreedesktopGeoclueMasterClientInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopGeoclueMasterClientInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddressStart()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("AddressStart"), argumentList);
    }

    inline QDBusPendingReply<QString, QString, QString, QString> GetAddressProvider()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAddressProvider"), argumentList);
    }
    inline QDBusReply<QString> GetAddressProvider(QString &description, QString &service, QString &path)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetAddressProvider"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            description = qdbus_cast<QString>(reply.arguments().at(1));
            service = qdbus_cast<QString>(reply.arguments().at(2));
            path = qdbus_cast<QString>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<QString, QString, QString, QString> GetPositionProvider()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetPositionProvider"), argumentList);
    }
    inline QDBusReply<QString> GetPositionProvider(QString &description, QString &service, QString &path)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetPositionProvider"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            description = qdbus_cast<QString>(reply.arguments().at(1));
            service = qdbus_cast<QString>(reply.arguments().at(2));
            path = qdbus_cast<QString>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<> PositionStart()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("PositionStart"), argumentList);
    }

    inline QDBusPendingReply<> SetRequirements(int accuracyLevel, int time, bool requireUpdates, int allowedResources)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(accuracyLevel) << QVariant::fromValue(time) << QVariant::fromValue(requireUpdates) << QVariant::fromValue(allowedResources);
        return asyncCallWithArgumentList(QStringLiteral("SetRequirements"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AddressProviderChanged(const QString &name, const QString &description, const QString &service, const QString &path);
    void PositionProviderChanged(const QString &name, const QString &description, const QString &service, const QString &path);
};

#endif
